<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>单词</title>
    <url>/2020/09/10/English/%E5%8D%95%E8%AF%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="1">1</h3>
<p>accord、improve、kid、social、require、happen、technology、according、interest、benefit、identfily、system、author、likely、provide</p>
<h3 id="2">2</h3>
<p>market、concern、blank、create、include、adult、product、item、activity、local、support、essay、result、comprehension、focus<br>
[comprehension]</p>
<h3 id="3">3</h3>
<p>finding、project、opportunity、decade、ability、career、challenge、process、tend、average、design、disease、decline、culture、digital</p>
<h3 id="4">4</h3>
<p>economy、subject、patient、major、security、global、environment、writing、derive、employee、economic、community、access、affect、survey</p>
]]></content>
      <categories>
        <category>English</category>
      </categories>
  </entry>
  <entry>
    <title>常用词根</title>
    <url>/2020/09/10/English/%E5%B8%B8%E7%94%A8%E8%AF%8D%E6%A0%B9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="常用词根">常用词根</h2>
<h3 id="A">A</h3>
<ol>
<li class="lvl-3">
<p>acid、acri、acrid、acu = sour,sharp<br>
酸的、尖锐、尖酸、敏锐</p>
</li>
<li class="lvl-3">
<p>act = air<br>
行动、做</p>
</li>
<li class="lvl-3">
<p>aer、aero、aeri<br>
空气、通气</p>
</li>
<li class="lvl-3">
<p>ag = do,act<br>
做</p>
</li>
<li class="lvl-3">
<p>agr、agri、agro = field,land<br>
田地、农业</p>
</li>
<li class="lvl-3">
<p>alter、altern、ali = other,tochange<br>
其他、改变状态</p>
</li>
<li class="lvl-3">
<p>am、amor、amat = love<br>
爱，爱情</p>
</li>
<li class="lvl-3">
<p>ambul = walk<br>
行走，走路</p>
</li>
<li class="lvl-3">
<p>anim = life,spirit<br>
声明，精神</p>
</li>
<li class="lvl-4">
<p>ann、enn = year<br>
年，一年</p>
</li>
<li class="lvl-4">
<p>aqu = water<br>
水</p>
</li>
<li class="lvl-4">
<p>arch、archy = ruler,rule,chief<br>
统治者，统治，主要的</p>
</li>
<li class="lvl-4">
<p>art = skill,joint,trick<br>
技巧，关节，诡计</p>
</li>
<li class="lvl-4">
<p>audi、audit = head<br>
听</p>
</li>
<li class="lvl-4">
<p>av、avar、avi = desire,bird<br>
渴望，鸟</p>
</li>
</ol>
]]></content>
      <categories>
        <category>English</category>
      </categories>
  </entry>
  <entry>
    <title>词根</title>
    <url>/2020/09/10/English/%E8%AF%8D%E6%A0%B9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="A">A</h3>
<ol>
<li class="lvl-3">ac、ad 强调、朝向</li>
<li class="lvl-3">act  行动</li>
<li class="lvl-3">ate 增长</li>
<li class="lvl-3">abil 才能</li>
</ol>
<h3 id="B">B</h3>
<ol>
<li class="lvl-3">
<p>bene = fine  好的</p>
</li>
</ol>
<h3 id="C">C</h3>
<ol>
<li class="lvl-3">
<p>cord 心脏，一致</p>
</li>
<li class="lvl-3">
<p>con、com  一起</p>
</li>
<li class="lvl-3">
<p>cern 区分</p>
</li>
<li class="lvl-3">
<p>cre  增长</p>
</li>
<li class="lvl-3">
<p>clude  关闭</p>
</li>
<li class="lvl-3">
<p>cess 走</p>
</li>
<li class="lvl-3">
<p>cline  倾斜</p>
</li>
<li class="lvl-3">
<p>cult 耕种</p>
</li>
<li class="lvl-3">
<p>curi = care  用心</p>
</li>
<li class="lvl-4">
<p>commun = common 公共的</p>
</li>
</ol>
<h3 id="D">D</h3>
<ol>
<li class="lvl-3">
<p>duct 指导</p>
</li>
<li class="lvl-3">
<p>de 着重、向下</p>
</li>
</ol>
<h3 id="E">E</h3>
<ol>
<li class="lvl-3">
<p>et 小</p>
</li>
<li class="lvl-3">
<p>es 向外</p>
</li>
<li class="lvl-3">
<p>ease 容易、舒服</p>
</li>
<li class="lvl-3">
<p>eco  环境、经济</p>
</li>
<li class="lvl-3">
<p>em 使</p>
</li>
</ol>
<h3 id="F">F</h3>
<ol>
<li class="lvl-3">
<p>fit  适合</p>
</li>
</ol>
<h3 id="H">H</h3>
<ol>
<li class="lvl-3">
<p>hap<br>
机会，运气</p>
</li>
</ol>
<h3 id="I">I</h3>
<ol>
<li class="lvl-3">
<p>ident  相同</p>
</li>
<li class="lvl-3">
<p>im 使</p>
</li>
<li class="lvl-3">
<p>inter = in 在……之间</p>
</li>
</ol>
<h3 id="J">J</h3>
<ol>
<li class="lvl-3">
<p>jest 投掷</p>
</li>
</ol>
<h3 id="L">L</h3>
<ol>
<li class="lvl-3">
<p>like 像</p>
</li>
<li class="lvl-3">
<p>loc = place  地方</p>
</li>
</ol>
<h3 id="M">M</h3>
<ol>
<li class="lvl-3">
<p>mark 记号</p>
</li>
</ol>
<h3 id="O">O</h3>
<ol>
<li class="lvl-3">
<p>op 进入</p>
</li>
</ol>
<h3 id="P">P</h3>
<ol>
<li class="lvl-3">
<p>pro、prove 提前，向前</p>
</li>
<li class="lvl-3">
<p>port 拿</p>
</li>
<li class="lvl-3">
<p>prehens  抓住</p>
</li>
<li class="lvl-3">
<p>port 港口</p>
</li>
<li class="lvl-3">
<p>ploy 用</p>
</li>
</ol>
<h3 id="Q">Q</h3>
<ol>
<li class="lvl-3">
<p>quire  寻找</p>
</li>
</ol>
<h3 id="R">R</h3>
<ol>
<li class="lvl-3">
<p>re 再次</p>
</li>
<li class="lvl-3">
<p>rive 河流</p>
</li>
</ol>
<h3 id="S">S</h3>
<ol>
<li class="lvl-3">
<p>soci 同伴</p>
</li>
<li class="lvl-3">
<p>sy、syn 共同</p>
</li>
<li class="lvl-3">
<p>stem 茎，干</p>
</li>
<li class="lvl-3">
<p>sup  下面</p>
</li>
<li class="lvl-3">
<p>sult 跳</p>
</li>
<li class="lvl-3">
<p>sign 记号</p>
</li>
<li class="lvl-3">
<p>se = see 看</p>
</li>
</ol>
<h3 id="T">T</h3>
<ol>
<li class="lvl-3">
<p>techno 技术</p>
</li>
</ol>
<h3 id="U">U</h3>
<ol>
<li class="lvl-3">
<p>ult  最后</p>
</li>
<li class="lvl-3">
<p>unity  团结、统一</p>
</li>
</ol>
<h3 id="V">V</h3>
<ol>
<li class="lvl-3">
<p>vid  看</p>
</li>
</ol>
]]></content>
      <categories>
        <category>English</category>
      </categories>
  </entry>
  <entry>
    <title>后端接口开发及其生活总结</title>
    <url>/2022/12/03/develop/%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%E5%8F%8A%E5%85%B6%E7%94%9F%E6%B4%BB%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="后端接口开发及其生活总结">后端接口开发及其生活总结</h2>
<h3 id="开发">开发</h3>
<p>前一段时间开始学习了一下mysql，感觉还好，简单一点的mysql语句还是能写出来的。登录、注册、日记、好友接口都写好了，然后最近也吧样式美化了一下，然后打了一下包，测试了一下，发现在electorn中好像不能使用BrowserRouter，这会导致打包后路由失效。我测试的时候一直不知道axios的url应该设置成什么，最后发现好像直接访问接口的地址就行，不需要代理（开发环境需要代理），也不知道为什么，现在还没有把接口部署，只是前端打包后，接口还是用的本地。不知道部署到服务器上后会不会有问题。目前还不知道怎么部署。</p>
<h3 id="github-io"><a href="http://github.io">github.io</a></h3>
<p>最近不知道什么原因，github.io都进不去了，起初我以为我电脑有问题，尝试了各种方法还是不行，问了问别人，结果好像都打不开，最后我去github上找了一下fasegithub，暂时能访问github.io了。</p>
<h3 id="git-lfs">git lfs</h3>
<p>今天我准备弄一下官网，然后上传压缩文件到github的时候一直上传不上去，我就打算不用命令上传了，直接在github上选择文件上传，结果显示<code>Yowza, that’s a big file. Try again with a file smaller than 25MB.</code>，然后我看了一下我的压缩文件153MB，我去网上求助，发现了git lfs这个东西。就记录一下git lfs的用法。</p>
<ol>
<li class="lvl-3">
<p>安装git lfs</p>
</li>
</ol>
<pre class="language-none"><code class="language-none">git lfs install</code></pre>
<ol start="2">
<li class="lvl-3">
<p>追踪文件</p>
</li>
</ol>
<pre class="language-none"><code class="language-none">git lfs track &quot;文件名 或 *.后缀名&quot;</code></pre>
<p>这时候会生成一个<code>.gitattributes</code>配置文件你可以通过<code> git lfs ls-files</code>来查看追踪的文件通过<code> git lfs untrack &quot;文件名 或 *.后缀名&quot;</code>来取消追踪<br>
3. push .gitattributes文件按照正常的方法将<code>.gitattributes</code>文件push到仓库<br>
4. push 大文件最后将打文件按照正常的方法push上去</p>
<p>然后就完成了大文件的push。如果clone大量lfs文件的仓库，可以使用<code>git lfs clone 地址</code>来进行clone，可以提高性能。</p>
<h3 id="官网发布">官网发布</h3>
<p>最后我还是发布了<code>PENFRIEND-DIARY</code>官网，并把第一版放了上去，因为还没有部署接口，所以肯定使没法运行的。<a href="https://gulinga.github.io/penfriend-diary/">官网地址</a></p>
<h3 id="知识体系">知识体系</h3>
<p>前一段时间，差不多一个月，把前端的面试题看了一篇，但是再去看就又忘记了。我已经开始梳理知识体系了，等把所有的东西差不多整理一下就开始背，背的熟练一点，面试的时候也能更流畅一点。</p>
<h3 id="组员">组员</h3>
<p>我留个组员，全是计科的，咱也不是对计科的有偏见，就是全是计科的多少优有点离谱。</p>
<h3 id="回家">回家</h3>
<p>我准备明天回家的，早上给辅导员报备了，晚上还打了电话问了问，说是学校又有异常的了，明天早上看看，如果没有问题就给我通过。</p>
<h3 id="力扣">力扣</h3>
<p>我的力扣估计还差四题就到10%，刷的不多，可能有好多题再写也不一定会。确定了，自己很菜。明天力扣周赛，加油。</p>
]]></content>
      <categories>
        <category>开发</category>
        <category>live</category>
      </categories>
      <tags>
        <tag>开发笔记</tag>
        <tag>云文档</tag>
        <tag>live</tag>
      </tags>
  </entry>
  <entry>
    <title>坎坎坷坷的一周</title>
    <url>/2022/12/10/develop/%E5%9D%8E%E5%9D%8E%E5%9D%B7%E5%9D%B7%E7%9A%84%E4%B8%80%E5%91%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="坎坎坷坷的一周">坎坎坷坷的一周</h2>
<h3 id="本地mysql80报错">本地mysql80报错</h3>
<p>一天早上我常规的启动node服务，结果就报错了，我弄了半天发现mysql服务开不开了，数据库连接不上，在网上找了好长时间都没结果，最后我吧mysql删除了重新安装。本以为以前的mysql查询语句和表都没了，结果查询语句还在，还好，本来表中的数据就没多少。</p>
<h3 id="mysql-node-js部署">mysql+node.js部署</h3>
<p>我弄了好长时间的linux服务器安装mysql，找了好几篇文章，跟着做都报错，然后就没弄了放了一放，今天下午就想着再弄一弄，不经意间看到了一篇文章，结果竟然弄好了，然后在vscode上安装了一下SSH TABGETS插件，使用pm2把linux服务器上的node.js运行了一下，本来我还以为要使用pkg打包一下呢，我都给打包好了，结果发现了pm2好像更好用一点就用来pm2，然后成功了。</p>
<h3 id="项目">项目</h3>
<p>我的项目的聊天模块基本成型了，今天将后端接口部署了一下，前端也打包成功了，对了今天还是我前端仓库提交量超过100的一天。</p>
<h3 id="聊天">聊天</h3>
<p>我这里说一下我的聊天功能的基本实现流程，通过@reduxjs/toolkit库中的createAsyncThunk处理异步请求，来储存笔友列表，当点击不同的笔友的时候判断是否已经请求过聊天记录，如果没有则通过createAsyncThunk来处理聊天记录的异步请求，发送消息的时候先请求发送信息的接口，如果成功则通过socket.io想服务器发送消息，然后另一个好友通过socket.io接收消息，发送过socket.io后想redux的state中添加消息。</p>
<h3 id="论文">论文</h3>
<p>好烦呀，我的论文还没写完，明天写吧，下周就要交了。</p>
<h3 id="专业课">专业课</h3>
<p>快要考试了，我专业课是一点不会，靠别人了，我兄弟说了，只要他有答案都会给我的。</p>
<h3 id="guithub的pages服务">guithub的pages服务</h3>
<p>不知道为什么，最近github的pages服务的静态页面都打不开了，我用了fastgithub才打开了，希望哪位大佬可以给我解惑一下，我实在弄不明白为什么，我ping了一下，ping的地址也没问题。但是就是显示**“页面可能存在问题，或者已永久移动到新的网址。”**</p>
<h3 id="复习">复习</h3>
<p>本来我的知识体系都总结好了，说是要背的，但是总是懒得背，明天就让我哥监督我来背。</p>
<h3 id="作息">作息</h3>
<p>最近总是起不来，闹钟响了就被我关了，起不到叫醒我的作用，还好，有我姐叫我起床。</p>
<h3 id="看书">看书</h3>
<p>我本来想买卢思浩的书来着，但是不知道为啥，我还没买，就忽然多了一本他的书《你也走了很远的路吧》，明天就开始看，哈哈。</p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>开发笔记</tag>
        <tag>云文档</tag>
      </tags>
  </entry>
  <entry>
    <title>云文档开发笔记-本地批量删除文件的BUG和路径修改BUG</title>
    <url>/2022/11/12/develop/%E6%9C%AC%E5%9C%B0%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E7%9A%84BUG/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="云文档-本地批量删除文件的BUG和路径修改BUG">云文档-本地批量删除文件的BUG和路径修改BUG</h2>
<p>我测试的时候发现一个问题就是，当修改文件的时候，如果先监听着<code>删除</code>，然后再监听<code>新增</code>的话，由于删除和新增是一个hooks监听的数据，当删除后再执行新增后，删除过的数据会再次回来，因为是同一个hooks监听的，所以删除后的数据在新增里面不会删除成功，也就是新增拿到的还是删除前的数据。</p>
<p>于是我就想着把修改写上，但是又发现了一个问题，就是node监听文件的修改不是文件路径的修改而是文件内容的修改，这就麻烦了，因为我无法监听到文件的路径修改。试了好多种方法，都不行。慌了。</p>
<p>然后我测着侧着又发现一个问题，如果本地删除一个文件没啥问题，但是如果批量删除就会出现问题，于是我又想到一个问题，为什么批量新增没问题呢？我就开始排查两个的区别，发现在删除里面，因为对象的key值是id所以我无法通过<code>obj[key]</code>的方法拿到对应title的对象，所以就导致了我需要循环对象来做删除的操作，这就导致了时间的浪费，我怀疑就是时间太长了，导致全部都由一个hooks来监听删除了，然后我又看到了文件名的删除是正常的，这又验证了我的想法。</p>
<p>所以我接下来的任务就是先把文件名的对象给修改一下。看看可不可以。</p>
<p>至于监听修改路径那个bug，我先看看改好文件名对象后能不能解决，如果不行我再另想办法。</p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>开发笔记</tag>
        <tag>云文档</tag>
        <tag>BUG</tag>
      </tags>
  </entry>
  <entry>
    <title>云文档开发笔记-录制音频</title>
    <url>/2022/11/18/develop/%E5%BD%95%E5%88%B6%E9%9F%B3%E9%A2%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="云文档开发笔记-录制音频">云文档开发笔记-录制音频</h2>
<p>我首先想到的就是使用WebRTC，如果使用WebRTC我们首先要请求麦克风权限。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>mediaDevices<span class="token punctuation">.</span><span class="token function">getUserMedia</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">audio</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">mediaStream</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">beginRecord</span><span class="token punctuation">(</span>mediaStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>这里输出的mediaStream其实就可以直接传递给audio标签的src属性使用。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span>
<span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span>
<span class="token operator">&lt;</span>head<span class="token operator">></span>
  <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"IE=edge"</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>
<span class="token operator">&lt;</span>body<span class="token operator">></span>
  <span class="token operator">&lt;</span>audio id<span class="token operator">=</span><span class="token string">"local-audio"</span> autoplay controls<span class="token operator">></span>播放麦克风捕获的声音<span class="token operator">&lt;</span><span class="token operator">/</span>audio<span class="token operator">></span>
  <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"playAudio"</span><span class="token operator">></span>打开麦克风<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
  <span class="token operator">&lt;</span>script<span class="token operator">></span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'playAudio'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>mediaDevices<span class="token punctuation">.</span><span class="token function">getUserMedia</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">audio</span><span class="token operator">:</span> <span class="token boolean">true</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">mediaStream</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'local-audio'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>srcObject <span class="token operator">=</span> mediaStream<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre>
<p>我们看上面的代码，当我们点击打开麦克风的时候，就可以使audio标签一直捕获我们的声音播放，但是问题就是，如果没戴耳机的情况下会有回音，而且，我们要做的肯定也不是直接捕获播放，而是要收集起来，点击播放的时候再播放。</p>
<p>当我们获取得到<code>mediaStream</code>数据后我们也可以采取下面的方法直接播放<br>
audioContext.createMediaStreamSource需要传入一个媒体流，然后对音频执行播放的操作。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> audioContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>AudioContext <span class="token operator">||</span> window<span class="token punctuation">.</span>webkitAudioContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> mediaNode <span class="token operator">=</span> audioContext<span class="token punctuation">.</span><span class="token function">createMediaStreamSource</span><span class="token punctuation">(</span>mediaStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
mediaNode<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>audioContext<span class="token punctuation">.</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>保存音频信息的话，我采用了PCM格式，音频的信息就相当于一连串的电信号变化，有许多[-1,1]之间的数字组成的波。如果需要播放就要转成PCM格式。</p>
<pre class="mermaid">graph TB;
麦克风--gerUserMedia传递mediaStream-->webAudio解析数据
webAudio解析数据--AudioContext-->采集数据
采集数据--使用onaudioprocess来监听音频信息-->采样PCM缓存
采样PCM缓存--加头部文件-->转换成WAV格式</pre>
<p>我们利用<code>audioContext.createScriptProcessor</code>来创建缓存节点，</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//创建AudioContext，将获取麦克风权限的stream传递给AudioContext</span>
<span class="token comment">//并创建jsNode用来收集信息，将jsNode连接</span>
<span class="token comment">//开始录音，调用该函数，将recorder函数返回的msg传递进去</span>
<span class="token function">beginRecord</span><span class="token punctuation">(</span>mediaStream<span class="token operator">:</span>MediaStream<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> audioContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">window</span><span class="token punctuation">.</span>AudioContext<span class="token punctuation">;</span>
  <span class="token keyword">let</span> mediaNode <span class="token operator">=</span> audioContext<span class="token punctuation">.</span><span class="token function">createMediaStreamSource</span><span class="token punctuation">(</span>mediaStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 创建一个jsNode</span>
  <span class="token keyword">let</span> jsNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createJSNode</span><span class="token punctuation">(</span>audioContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>jsNodes <span class="token operator">=</span> jsNode<span class="token punctuation">;</span>
  <span class="token comment">// 需要连到扬声器消费掉outputBuffer，process回调才能触发</span>
  <span class="token comment">// 并且由于不给outputBuffer设置内容，所以扬声器不会播放出声音</span>
  jsNode<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>audioContext<span class="token punctuation">.</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>
  jsNode<span class="token punctuation">.</span>onaudioprocess <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onAudioProcess<span class="token punctuation">;</span>
  <span class="token comment">// 把mediaNode连接到jsNode</span>
  mediaNode<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>jsNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//创建jsNode</span>
<span class="token function">createJSNode</span> <span class="token punctuation">(</span>audioContext<span class="token operator">:</span>AudioContext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token constant">BUFFER_SIZE</span> <span class="token operator">=</span> <span class="token number">4096</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token constant">INPUT_CHANNEL_COUNT</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token constant">OUTPUT_CHANNEL_COUNT</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token comment">// createJavaScriptNode已被废弃</span>
  <span class="token comment">//@ts-ignore</span>
  <span class="token keyword">let</span> creator <span class="token operator">=</span> audioContext<span class="token punctuation">.</span>createScriptProcessor <span class="token operator">||</span> audioContext<span class="token punctuation">.</span>createJavaScriptNode<span class="token punctuation">;</span>
  creator <span class="token operator">=</span> <span class="token function">creator</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>audioContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">creator</span><span class="token punctuation">(</span><span class="token constant">BUFFER_SIZE</span><span class="token punctuation">,</span><span class="token constant">INPUT_CHANNEL_COUNT</span><span class="token punctuation">,</span> <span class="token constant">OUTPUT_CHANNEL_COUNT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>我们主要使用<code>onaudioprocess</code>来监听音频信息。</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//收集录音信息，大概0.09s调用一次</span>
<span class="token function">onAudioProcess</span> <span class="token punctuation">(</span>event<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> audioBuffer <span class="token operator">=</span> event<span class="token punctuation">.</span>inputBuffer<span class="token punctuation">;</span>
  <span class="token comment">//左声道</span>
  <span class="token keyword">let</span> leftChannelData <span class="token operator">=</span> audioBuffer<span class="token punctuation">.</span><span class="token function">getChannelData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//右声道</span>
  <span class="token keyword">let</span> rightChannelData <span class="token operator">=</span> audioBuffer<span class="token punctuation">.</span><span class="token function">getChannelData</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  leftDataList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>leftChannelData<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  rightDataList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>rightChannelData<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>这里在全局定义<code>leftChannelData</code>和<code>rightChannelData</code>两个数组，来缓存音频信息，大概每0.09s调用一下onAudioProcess函数。</p>
<p>因为我们在上面向<code>leftChannelData</code>和<code>rightChannelData</code>中<code>push</code>的是数组，所以我们要先将<code>leftChannelData</code>和<code>rightChannelData</code>扁平化，合并成一个<code>Float32Array</code>数组。</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//停止录音</span>
<span class="token function">stopRecord</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//合并左右声道</span>
  <span class="token keyword">let</span> leftData <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">mergeArray</span><span class="token punctuation">(</span>leftDataList<span class="token punctuation">)</span><span class="token punctuation">,</span>
      rightData <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">mergeArray</span><span class="token punctuation">(</span>rightDataList<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//交叉合并左右声道</span>
  <span class="token keyword">let</span> allData <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">interleaveLeftAndRight</span><span class="token punctuation">(</span>leftData<span class="token punctuation">,</span> rightData<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> wavBuffer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createWavFile</span><span class="token punctuation">(</span>allData<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">playRecord</span><span class="token punctuation">(</span>wavBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//合并左声道和右声道</span>
<span class="token function">mergeArray</span> <span class="token punctuation">(</span>list<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> length <span class="token operator">=</span> list<span class="token punctuation">.</span>length <span class="token operator">*</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float32Array</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span>
      offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      data<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
      offset <span class="token operator">+=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> data<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>我们将还要将左右声道交叉合并。</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//交叉合并左右声道</span>
<span class="token function">interleaveLeftAndRight</span> <span class="token punctuation">(</span>left<span class="token operator">:</span>Float32Array<span class="token punctuation">,</span> right<span class="token operator">:</span>Float32Array<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> totalLength <span class="token operator">=</span> left<span class="token punctuation">.</span>length <span class="token operator">+</span> right<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float32Array</span><span class="token punctuation">(</span>totalLength<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> left<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> k <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
      data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      data<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> data<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>此时我们就可以创建一个WAV文件了。</p>
<p>我们先写入WAV文件固定的头部。</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token function">createWavFile</span> <span class="token punctuation">(</span>audioData<span class="token operator">:</span>Float32Array<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token constant">WAV_HEAD_SIZE</span> <span class="token operator">=</span> <span class="token number">44</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span>audioData<span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token constant">WAV_HEAD_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataView</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">writeUTFBytes</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'RIFF'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  view<span class="token punctuation">.</span><span class="token function">setUint32</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">44</span> <span class="token operator">+</span> audioData<span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">writeUTFBytes</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'WAVE'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">writeUTFBytes</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'fmt '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  view<span class="token punctuation">.</span><span class="token function">setUint32</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  view<span class="token punctuation">.</span><span class="token function">setUint16</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  view<span class="token punctuation">.</span><span class="token function">setUint16</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  view<span class="token punctuation">.</span><span class="token function">setUint32</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">44100</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  view<span class="token punctuation">.</span><span class="token function">setUint32</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">44100</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  view<span class="token punctuation">.</span><span class="token function">setUint16</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  view<span class="token punctuation">.</span><span class="token function">setUint16</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">writeUTFBytes</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  view<span class="token punctuation">.</span><span class="token function">setUint32</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> audioData<span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 写入PCM数据</span>
  <span class="token keyword">let</span> length <span class="token operator">=</span> audioData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">44</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> volume <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      view<span class="token punctuation">.</span><span class="token function">setInt16</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> audioData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x7FFF</span> <span class="token operator">*</span> volume<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      index <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> buffer<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">writeUTFBytes</span> <span class="token punctuation">(</span>view<span class="token operator">:</span>DataView<span class="token punctuation">,</span> offset<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> lng <span class="token operator">=</span> <span class="token builtin">string</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lng<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
      view<span class="token punctuation">.</span><span class="token function">setUint8</span><span class="token punctuation">(</span>offset <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>最后写入刚刚录制的音频数据，我们采用16位二进制来表示声音的强弱，16位表示的范围是[-32768, +32767]，最大值是32767即0x7FFF，录音数据的取值范围是[-1, 1]。</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">createWavFile</span> <span class="token punctuation">(</span>audioData<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 写入wav头部，代码同上</span>
    <span class="token comment">// 写入PCM数据</span>
    <span class="token keyword">let</span> length <span class="token operator">=</span> audioData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">44</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> volume <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        view<span class="token punctuation">.</span><span class="token function">setInt16</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> audioData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x7FFF</span> <span class="token operator">*</span> volume<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        index <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> buffer<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>最后生成本地的blob url返回。</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//返回src</span>
<span class="token function">playRecord</span> <span class="token punctuation">(</span>arrayBuffer<span class="token operator">:</span>ArrayBuffer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>arrayBuffer<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> blobUrl <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> blobUrl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<h2 id="完整代码">完整代码</h2>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> status <span class="token punctuation">&#123;</span>
  success <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span>
  error <span class="token operator">=</span> <span class="token number">500</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> leftDataList<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> rightDataList<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">//录音</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Audio</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">static</span> instance<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> mediaStreams<span class="token operator">:</span>MediaStream <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> jsNodes<span class="token operator">:</span>ScriptProcessorNode <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

  <span class="token comment">//初始化，单例模式</span>
  <span class="token keyword">static</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>Audio<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Audio</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">//获取麦克风权限</span>
  <span class="token function">recorder</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span>code<span class="token operator">:</span> status<span class="token punctuation">,</span>msg<span class="token operator">:</span> MediaStream<span class="token punctuation">&#125;</span><span class="token operator">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>mediaDevices<span class="token punctuation">.</span><span class="token function">getUserMedia</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        audio<span class="token operator">:</span> <span class="token boolean">true</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>mediaStream <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mediaStreams <span class="token operator">=</span> mediaStream<span class="token punctuation">;</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
          code<span class="token operator">:</span> status<span class="token punctuation">.</span>success<span class="token punctuation">,</span>
          msg<span class="token operator">:</span> mediaStream
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>err <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
            code<span class="token operator">:</span> status<span class="token punctuation">.</span>error<span class="token punctuation">,</span>
            msg<span class="token operator">:</span> err
          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">//创建AudioContext，将获取麦克风权限的stream传递给AudioContext</span>
  <span class="token comment">//并创建jsNode用来收集信息，将jsNode连接</span>
  <span class="token comment">//开始录音，调用该函数，将recorder函数返回的msg传递进去</span>
  <span class="token function">beginRecord</span><span class="token punctuation">(</span>mediaStream<span class="token operator">:</span>MediaStream<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> audioContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">window</span><span class="token punctuation">.</span>AudioContext<span class="token punctuation">;</span>
    <span class="token keyword">let</span> mediaNode <span class="token operator">=</span> audioContext<span class="token punctuation">.</span><span class="token function">createMediaStreamSource</span><span class="token punctuation">(</span>mediaStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建一个jsNode</span>
    <span class="token keyword">let</span> jsNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createJSNode</span><span class="token punctuation">(</span>audioContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>jsNodes <span class="token operator">=</span> jsNode<span class="token punctuation">;</span>
    <span class="token comment">// 需要连到扬声器消费掉outputBuffer，process回调才能触发</span>
    <span class="token comment">// 并且由于不给outputBuffer设置内容，所以扬声器不会播放出声音</span>
    jsNode<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>audioContext<span class="token punctuation">.</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>
    jsNode<span class="token punctuation">.</span>onaudioprocess <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onAudioProcess<span class="token punctuation">;</span>
    <span class="token comment">// 把mediaNode连接到jsNode</span>
    mediaNode<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>jsNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">//创建jsNode</span>
  <span class="token function">createJSNode</span> <span class="token punctuation">(</span>audioContext<span class="token operator">:</span>AudioContext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token constant">BUFFER_SIZE</span> <span class="token operator">=</span> <span class="token number">4096</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token constant">INPUT_CHANNEL_COUNT</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token constant">OUTPUT_CHANNEL_COUNT</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token comment">// createJavaScriptNode已被废弃</span>
    <span class="token comment">//@ts-ignore</span>
    <span class="token keyword">let</span> creator <span class="token operator">=</span> audioContext<span class="token punctuation">.</span>createScriptProcessor <span class="token operator">||</span> audioContext<span class="token punctuation">.</span>createJavaScriptNode<span class="token punctuation">;</span>
    creator <span class="token operator">=</span> <span class="token function">creator</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>audioContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">creator</span><span class="token punctuation">(</span><span class="token constant">BUFFER_SIZE</span><span class="token punctuation">,</span><span class="token constant">INPUT_CHANNEL_COUNT</span><span class="token punctuation">,</span> <span class="token constant">OUTPUT_CHANNEL_COUNT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">//收集录音信息，大概0.09s调用一次</span>
  <span class="token function">onAudioProcess</span> <span class="token punctuation">(</span>event<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> audioBuffer <span class="token operator">=</span> event<span class="token punctuation">.</span>inputBuffer<span class="token punctuation">;</span>
    <span class="token comment">//左声道</span>
    <span class="token keyword">let</span> leftChannelData <span class="token operator">=</span> audioBuffer<span class="token punctuation">.</span><span class="token function">getChannelData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//右声道</span>
    <span class="token keyword">let</span> rightChannelData <span class="token operator">=</span> audioBuffer<span class="token punctuation">.</span><span class="token function">getChannelData</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    leftDataList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>leftChannelData<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rightDataList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>rightChannelData<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">//停止录音</span>
  <span class="token function">stopRecord</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//合并左右声道</span>
    <span class="token keyword">let</span> leftData <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">mergeArray</span><span class="token punctuation">(</span>leftDataList<span class="token punctuation">)</span><span class="token punctuation">,</span>
        rightData <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">mergeArray</span><span class="token punctuation">(</span>rightDataList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//交叉合并左右声道</span>
    <span class="token keyword">let</span> allData <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">interleaveLeftAndRight</span><span class="token punctuation">(</span>leftData<span class="token punctuation">,</span> rightData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> wavBuffer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createWavFile</span><span class="token punctuation">(</span>allData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">playRecord</span><span class="token punctuation">(</span>wavBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">//返回src</span>
  <span class="token function">playRecord</span> <span class="token punctuation">(</span>arrayBuffer<span class="token operator">:</span>ArrayBuffer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>arrayBuffer<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> blobUrl <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> blobUrl<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">//合并左声道和右声道</span>
  <span class="token function">mergeArray</span> <span class="token punctuation">(</span>list<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> length <span class="token operator">=</span> list<span class="token punctuation">.</span>length <span class="token operator">*</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float32Array</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span>
        offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        data<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
        offset <span class="token operator">+=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> data<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">//交叉合并左右声道</span>
  <span class="token function">interleaveLeftAndRight</span> <span class="token punctuation">(</span>left<span class="token operator">:</span>Float32Array<span class="token punctuation">,</span> right<span class="token operator">:</span>Float32Array<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> totalLength <span class="token operator">=</span> left<span class="token punctuation">.</span>length <span class="token operator">+</span> right<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float32Array</span><span class="token punctuation">(</span>totalLength<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> left<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> k <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
        data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        data<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> data<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">//将PCM数据转换成wav</span>
  <span class="token function">createWavFile</span> <span class="token punctuation">(</span>audioData<span class="token operator">:</span>Float32Array<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token constant">WAV_HEAD_SIZE</span> <span class="token operator">=</span> <span class="token number">44</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span>audioData<span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token constant">WAV_HEAD_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataView</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">writeUTFBytes</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'RIFF'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    view<span class="token punctuation">.</span><span class="token function">setUint32</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">44</span> <span class="token operator">+</span> audioData<span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">writeUTFBytes</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'WAVE'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">writeUTFBytes</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'fmt '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    view<span class="token punctuation">.</span><span class="token function">setUint32</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    view<span class="token punctuation">.</span><span class="token function">setUint16</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    view<span class="token punctuation">.</span><span class="token function">setUint16</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    view<span class="token punctuation">.</span><span class="token function">setUint32</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">44100</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    view<span class="token punctuation">.</span><span class="token function">setUint32</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">44100</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    view<span class="token punctuation">.</span><span class="token function">setUint16</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    view<span class="token punctuation">.</span><span class="token function">setUint16</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">writeUTFBytes</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    view<span class="token punctuation">.</span><span class="token function">setUint32</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> audioData<span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
    <span class="token comment">// 写入PCM数据</span>
    <span class="token keyword">let</span> length <span class="token operator">=</span> audioData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">44</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> volume <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        view<span class="token punctuation">.</span><span class="token function">setInt16</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> audioData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x7FFF</span> <span class="token operator">*</span> volume<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        index <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> buffer<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">writeUTFBytes</span> <span class="token punctuation">(</span>view<span class="token operator">:</span>DataView<span class="token punctuation">,</span> offset<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> lng <span class="token operator">=</span> <span class="token builtin">string</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lng<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
        view<span class="token punctuation">.</span><span class="token function">setUint8</span><span class="token punctuation">(</span>offset <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span></code></pre>
<h2 id="在React中调用">在React中调用</h2>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useEffect<span class="token punctuation">,</span> useRef <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token comment">//Audio就是上面的完整代码</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Audio <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../../../utils/audio'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">ContentAudio</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">const</span> audioRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> audio <span class="token operator">=</span> Audio<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">//获取麦克风权限</span>
      <span class="token keyword">let</span> recorder <span class="token operator">=</span> <span class="token keyword">await</span> audio<span class="token punctuation">.</span><span class="token function">recorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">//开始录音</span>
      audio<span class="token punctuation">.</span><span class="token function">beginRecord</span><span class="token punctuation">(</span>recorder<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'停止录音'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> url <span class="token operator">=</span> audio<span class="token punctuation">.</span><span class="token function">stopRecord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//@ts-ignore</span>
        audioRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span>src <span class="token operator">=</span> url
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>audioRef<span class="token punctuation">&#125;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>audio<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span> <span class="token attr-name">autoPlay</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>
<h2 id="参考资料">参考资料</h2>
<p>[1]<a href="https://juejin.cn/post/6844903953381982222">前端webrtc基础 —— 录音篇</a><br>
[2]<a href="https://juejin.cn/post/6844903668588740621">如何实现前端录音功能</a></p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>开发笔记</tag>
        <tag>云文档</tag>
      </tags>
  </entry>
  <entry>
    <title>云文档开发笔记-第一周总结</title>
    <url>/2022/11/11/develop/%E7%AC%AC%E4%B8%80%E5%91%A8%E7%9A%84%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="云文档开发笔记-第一周总结">云文档开发笔记-第一周总结</h2>
<p>云文档的开发已经一周了，整个文档基本开发完了，与其说是开发完了不如说是已经写好了整个的Demo，以后肯定还要加许多功能的。我想在这里说一下我开发的时候遇到的困难和解决方案。和我学习到了什么。</p>
<blockquote>
<p>困难一-使用数组存储，每次改变使用useState改变值，删除值，查找值，几乎都要遍历一遍数组。我最开始是将文件列表以数组的形式储存在了useState中，对象的形式如下。</p>
</blockquote>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">defaultFiles</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  id<span class="token operator">:</span><span class="token builtin">string</span>
  title<span class="token operator">:</span> <span class="token builtin">string</span>
  body<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
  isNew<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
  path<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
  isLoaded<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre>
<p>于是我做了一个大胆的决定，将数组存储改成对象储存，改成了如下的结构。</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">defaultFiles</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">[</span>key<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    id<span class="token operator">:</span><span class="token builtin">string</span>
    title<span class="token operator">:</span> <span class="token builtin">string</span>
    body<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
    isNew<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
    path<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
    isLoaded<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>其中对象属性的<code>key值</code>就是<code>id值</code>。这样查找id的使用就可以直接<code>defaultFiles.id</code>，删除的时候可以<code>delete defaultFiles[id]</code>，这样就省区了数组每次操作都要遍历的问题。目前我是这样存储的，如果要加上服务器的话，估计还是返回的数组的形式，为此我写了一个函数，将数组转换成对象的形式，且对象参数的<code>key值</code>是<code>id值</code>。</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">defaultFilesType</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  id<span class="token operator">:</span><span class="token builtin">string</span>
  title<span class="token operator">:</span> <span class="token builtin">string</span>
  body<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
  isNew<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
  path<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
  isLoaded<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> flattenArr <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token operator">:</span>defaultFilesType<span class="token punctuation">)</span><span class="token operator">:</span>Object <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>map<span class="token operator">:</span>map<span class="token punctuation">,</span>item<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    map<span class="token punctuation">[</span>item<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>
    <span class="token keyword">return</span> map<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>
<blockquote>
<p>困难二-当软件没打开或者打开，本地目录中的文件被删除、修改、新增该怎么办？我当时想的就是，我可以在软件中创建文件，但是如果本地的文件被用户故意的修改怎么办呢？看看我解决的逻辑。</p>
</blockquote>
<ol>
<li class="lvl-3">
<p>第一次进入软件，查看本地目录是否删除，如果删除则重新创建。</p>
</li>
<li class="lvl-3">
<p>每当打开软件的时候，注意是打开软件，不包括刷新软件。这时候就读取一下文档的目录，然后生成对象返回，为此我封装了一个hooks，因为软件代码还没公开，这里就不展示主要代码了。</p>
</li>
<li class="lvl-3">
<p>使用node来监听目录中文件的变化，例如：当软件打开，本地的文件被用户恶意删除，那么node监听到后就返回用户的操作，新增或删除，这里没有修改，因为修改就相当于删除了一个文件和修改了一个文件。</p>
</li>
<li class="lvl-3">
<p>此时我有遇到了一个问题就是，当我在软件里面操作文件的时候，node同样能监听到目录的改变，所以我有写了一个useState来储存文件的名称。例如：文件名列表中有a.md这个文件，当用户本地删除这个文件的时候，<a href="http://xn--useStatea-u75nzdusk6hh0pvrh91mx1rgsdps2bfa515qcuci35m.md">我就会判断一下我的useState中是否存在a.md</a>，如果存在那就说明是本地删除的，如果不存在就说明是我通过软件删除的。</p>
</li>
</ol>
<p>我同样为监听目录的node封装了一个hooks。</p>
<blockquote>
<p>总结</p>
</blockquote>
<ol>
<li class="lvl-3">
<p>对数组的一些操作有些了解了，例如reduce。</p>
</li>
<li class="lvl-3">
<p>学会了封装一下hooks。</p>
</li>
<li class="lvl-3">
<p>对React组件间的props通信了解。</p>
</li>
<li class="lvl-3">
<p>我明白的最重要的事情就是，写React项目要敢写，不能一开始就考虑这里优化那里优化的，会导致哪里都不太敢写，就写不好了。先写下去，哪里不行了再重构，不能止步不前。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>开发笔记</tag>
        <tag>云文档</tag>
      </tags>
  </entry>
  <entry>
    <title>十一月学习计划</title>
    <url>/2022/11/07/live/%E5%8D%81%E4%B8%80%E6%9C%88%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="十月学习总结">十月学习总结</h2>
<p>关于十月的学习计划，算法做的不太行，一百道算法就写了一半多一点，React也学的不多，但是我面试题看了看。本来学习计划进行的好好的，然后就来了个校企合作，打乱了我的学习计划。现在已经十一月了，那我就专心的制定以下学习计划，这次不能再让别的事情干扰自己了。</p>
<h2 id="十一月学习计划">十一月学习计划</h2>
<h3 id="算法">算法</h3>
<ol>
<li class="lvl-3">
<p>每天几题：我感觉算法一天写四道有点艰难，我决定先把算法调整到一天两道，但是写过的题不能算数。</p>
</li>
<li class="lvl-3">
<p>时间：最好还是晚上来练习算法，因为晚上没有课，时间也很充沛。这样的话，一月下来差不多也能写五十多题了。</p>
</li>
</ol>
<h3 id="网络">网络</h3>
<p>这一月要开始学以下网络了，我准备直接从面试题下手，看看常见的网络面试题，把它弄明白。这样也能更快的学习到有用的知识。</p>
<p>那就把网络的学习列入到面试题目常见题目学习中。每天上午和中午看看。</p>
<h3 id="BEF">BEF</h3>
<p>BEF好久没刷了，我决定先BEF的话每天刷7题吧。可能有点多，后续再调整。</p>
<h3 id="常见面试题">常见面试题</h3>
<p>常见面试题就上午和中午学习以下。</p>
<h3 id="项目">项目</h3>
<p>每天下午开始写自己想写的项目。我就准备把我那个笔记项目先写完。等写完后把样式优化以下。然后就开始写我的那个miniDiary项目。</p>
<h3 id="维护">维护</h3>
<p>我要开始维护自己的账号了，比如<a href="https://blog.csdn.net/qq_51965698">CSDN</a>、<a href="https://github.com/guLinga">Github</a>、<a href="https://juejin.cn/user/3316588148427885/posts">掘金</a>、<a href="https://gulinga.github.io/">博客</a>。</p>
]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>学习计划</tag>
      </tags>
  </entry>
  <entry>
    <title>会议</title>
    <url>/2022/10/03/live/%E4%BC%9A%E8%AE%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="会议">会议</h2>
<h3 id="问题">问题</h3>
<p>总结问题？那先细分一下吧。</p>
<ol>
<li class="lvl-3">
<p>关于我们</p>
<ul class="lvl-2">
<li class="lvl-6">1.当前的学习
<ul class="lvl-4">
<li class="lvl-8">1.时间不多了，前端需要主抓什么方向学习？</li>
<li class="lvl-8">2.大三的有的人课多，感觉前端的好多东西学不完怎么办？需要主抓哪方面的学习呢？</li>
<li class="lvl-8">3.很焦虑，感觉好多没学好。</li>
<li class="lvl-8">4.关于算法方面，基本上遇到不熟悉的算法，不是暴力破解就是看题解。</li>
<li class="lvl-8">5.学长，你们当时焦虑吗？</li>
<li class="lvl-8">6.前端知识的主要占比是什么？linux、计组、数据库、SQL语句问的多吗？</li>
</ul>
</li>
<li class="lvl-6">2.往后的面试
<ul class="lvl-4">
<li class="lvl-8">1.面试的时候面试官主要注重什么能力？</li>
</ul>
</li>
</ul>
</li>
<li class="lvl-3">
<p>关于大二</p>
<ul class="lvl-2">
<li class="lvl-6">1.当前的学习计划
<ul class="lvl-4">
<li class="lvl-8">1.感觉前端大二上学期没啥学习计划，需不需要增加些学习计划？</li>
</ul>
</li>
</ul>
</li>
<li class="lvl-3">
<p>关于新生</p>
<ul class="lvl-2">
<li class="lvl-6">1.是否要修改学习计划
<ul class="lvl-4">
<li class="lvl-8">现在工作不好找，要修改前端学习计划吗？</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="学长学姐的回答">学长学姐的回答</h3>
<ol>
<li class="lvl-3">
<p>不要焦虑</p>
</li>
<li class="lvl-3">
<p>不一定非要进大厂，目前的形式不一样，大厂卡学历卡的厉害，门槛高了</p>
</li>
<li class="lvl-3">
<p>不要紧张，学长学姐都还在找工作呢，我们比他们还紧张。</p>
</li>
<li class="lvl-3">
<p>目前考研形式，考双非都有点卷。而且现在学校的考研率太低了。</p>
</li>
<li class="lvl-3">
<p>可以自己实现一个tcp连接，听着不简单。</p>
</li>
<li class="lvl-3">
<p>笔试的时候基本属于leetcode的中等题，面试的时候基本属于leetcode的中等题偏简单。</p>
</li>
<li class="lvl-3">
<p>面试问项目的时候，不会让你跑你的项目问流程什么的。会问一下用的框架、技术栈、还有你在这个项目中做了什么优化，and so on.</p>
</li>
<li class="lvl-3">
<p>前端的一些API比如Promise需要手写。</p>
</li>
<li class="lvl-3">
<p>大三大二都需要卷一下node，卷node就需要卷SSR，卷SSR就需要卷webpack、bebal。</p>
</li>
<li class="lvl-4">
<p>最好今早实习。</p>
</li>
<li class="lvl-4">
<p>算法一定要多复习，多总结。</p>
</li>
<li class="lvl-4">
<p>操作系统。</p>
</li>
<li class="lvl-4">
<p>进程、线程、协程。</p>
</li>
<li class="lvl-4">
<p>Vue和React都放到学习计划中，提前学习。TS也要提前学习，TS是基础。</p>
</li>
<li class="lvl-4">
<p><a href="https://codetop.cc">https://codetop.cc</a>，面试频率较高的算法题。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>live</category>
      </categories>
  </entry>
  <entry>
    <title>十一月月底总结</title>
    <url>/2022/11/27/live/%E5%8D%81%E4%B8%80%E6%9C%88%E6%9C%88%E5%BA%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="十一月月底总结">十一月月底总结</h2>
<h3 id="突如其来的假期">突如其来的假期</h3>
<p>前几天，一直有小道消息说要放假了，周边的好几个学校都走了好几个了。然后我学校也通知了，前期学校说的是四六级只有一次机会，想考试的只能留校，所以，导致了很多人都想着留校考完四六级再走，可以看出来学校还是想让学生留校的。现在反转了，好多人走不了，学校一直催着走，说现在疫情很严重，可能晚点走就走不了了，不能回家过年。我就在学校待着吧，等啥时候学校真的催我走了我再走。</p>
<h3 id="生活">生活</h3>
<p>这一月的生活方面嘛，也没啥特别的。在月中的时候小组举行了一次算法比赛，只拿了第七名。然后中午的时候还是时不时打打球，我感觉我的球技真的有进步。本来计划的是把精选一百到算法刷完的，但是就刷了80道，后面的实在写不动了。就想着开始复习一下，开了个二分查找，前几天写完了拿到了个勋章，感觉自己对二分查找又理解的更深刻了些。哦哦，对了，今天力扣周赛，我写第三题的时候发现了一个问题，在js中如果我用数组的shift方法的时间复杂度是O(n)，而用pop的方法的时间复杂度是O(1)，所以，还是少用队列，多用栈，今天我用队列就超时了，用栈没有超时。小组招新已经悄悄的进行了一段时间了，招进来十个人左右吧，这几天学生会招新完了才让小组宣传，本来五十多人的群一会就超过了一百人。我应该是第一批面试的，我当时面试的一个学妹，挺不错的，自己在私底下学的挺多，有很强的求知欲。学习态度很好。最后也是分给了我组。看了看计网和浏览器基础，感觉挺好玩的。</p>
<h3 id="开发">开发</h3>
<p>我的项目开发遇到了点问题，因为我要自己写接口，于是我这一周去学习了一下node.js+MySQL，学了一下SQL命令，学的不算多，但是应该能写一些简单的接口。等我学完就去写接口，然后继续开发项目。</p>
]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>十二月最后一段时间的规划</title>
    <url>/2022/12/18/live/%E5%8D%81%E4%BA%8C%E6%9C%88%E6%9C%80%E5%90%8E%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="十二月最后一段时间的规划">十二月最后一段时间的规划</h2>
<h3 id="关于项目">关于项目</h3>
<p>我的那个<code>penfriend-diary</code>已经完成了本地markdown，日记，聊天的功能了。我要规划一下接下来怎么完善项目。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>完善项目样式和一些小细节。</p>
</li>
<li class="lvl-2">
<p>增加云文档的功能。保留本地文档功能。</p>
</li>
<li class="lvl-2">
<p>总结一下整个项目的功能和难点，等面试的时候说。</p>
</li>
<li class="lvl-2">
<p>自己尝试使用webpack和babel优化自己的项目。</p>
</li>
<li class="lvl-2">
<p>以前写的代码好多可以使用memo、useMemo、useCallback优化的地方都没有优化，以后要注意了。</p>
</li>
<li class="lvl-2">
<p>尝试使用前端可视化来优化项目。</p>
</li>
<li class="lvl-2">
<p>聊天小游戏。</p>
</li>
<li class="lvl-2">
<p>了解react 3D。</p>
</li>
</ul>
<h3 id="算法">算法</h3>
<p>我最近算法没有怎么练，就今天leetcode周赛写了一下，这一周的有点难，我就写出来两题还能排1300多名，主要是这次思路挺不错，做的比较快。</p>
<p>以后我要开始写算法了，每天写个四到五题，emmm，是有点多，但是20多天前我开了一个leetcode的学习计划，20多天的题都没写了，只能每天写四到五题了，还好吧，好多题都是写过类似的。</p>
<p>这次算法不仅要写好，也要锻炼好算法思维和特殊情况思维。</p>
<h3 id="前端复习">前端复习</h3>
<p>我树立了一下我的知识体系，有的好多都是知道但是说不明白，所以我感觉还是要背背，但是我又怕忘记，真实瞻前顾后的，不管了，背吧，要不等以后面试的时候啥都说不出来。</p>
<p>但是背东西是真的枯燥，一天真的不能背的太多，所以现在要做的就是每天背一点，然后主要抓住项目，使用新的东西来优化项目。</p>
<h3 id="了解前端发展">了解前端发展</h3>
<p>要多多了解前端目前的发展形式。</p>
]]></content>
      <categories>
        <category>live</category>
      </categories>
  </entry>
  <entry>
    <title>十月学习计划</title>
    <url>/2022/09/21/live/%E5%8D%81%E6%9C%88%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="十月学习计划">十月学习计划</h2>
<p>马上要十月了，感觉这一月效率还行，但是还是有待提高，主要是每天没有制定固定的学习计划，想的是每天写几道算法但是有时候不想写有时候兴致来了就写几道，而且前端基础也没复习多少，感觉协下一月要开始好好计划一下每天的计划了。从现在就开始吧，这样还能为下一月做个铺垫。</p>
<h3 id="调正作息">调正作息</h3>
<p>早上醒不来主要是晚上睡得太晚了，感觉还是要睡早一点，身体重要，俺卷不动，俺不倦。中午时间也很长，睡的也很长，感觉其实中午不用睡那么长时间的，而且躺床上很长时间也都用来了刷手机，也没有好好睡觉。所以中午还是多学习一会的好。傍晚还是要锻炼一下的，别怕浪费时间啥的，没有好的心里就没有好的状态。</p>
<h3 id="学习方向">学习方向</h3>
<p>马上就要找实习了，算法肯定是必要的，但是我就是不太想刷算法，我上次看了那个力扣上的精选100道，我想刷一下，每天刷四道，很快也就刷完了。中午来刷算法吧。差不多能刷一个小时。傍晚的时候就来刷一下BFE吧，这个要好好刷，可以掌握好多前端的知识点。我还在一直焦虑React中的class组件和函数组件，我还是先好好学好函数组件用好hooks吧。我现在还有好多的知识点没学，框架、基础、网络、ts、还有好几个项目，感觉有点赶，所以，我不能浪费时间了，该放的就放一下。目前主要抓紧学。<br>
<font color="red"></p>
<ol>
<li class="lvl-3">
<p>前端基础，html、css、js都要学起来。</p>
</li>
<li class="lvl-3">
<p>算法，每天都要好好练呀。</p>
</li>
<li class="lvl-3">
<p>websocket项目和创新创业项目。</p>
</li>
<li class="lvl-3">
<p>react框架，就先学react吧，时间不多了，vue和react都精学的话感觉时间不太够了。</p>
</li>
</ol>
<p><strong>上午好好学一下框架、中午刷算法、下午总结前端知识点、傍晚刷BEF、晚上写项目。</strong><br>
</font></p>
<h3 id="习惯">习惯</h3>
<p>我要坚持21天，说的是21天能养成习惯嘛。</p>
<h3 id="专业课">专业课</h3>
<p>还有就是专业课，我总是想着专业课上多学一会前端知识点，但是根本学不进或者学的很少，咋了，我平常不好好学习，用上课这一会就能补过来了？笑话，这样前端学不会，专业课也学不好，直接坏事成双。而且这样等期末的时候还要画更多的时间去复习，就更加焦虑了，所以说还是要好好上专业课的。</p>
<h3 id="焦虑">焦虑</h3>
<p>我看了看19级学长学姐们这时候的博客。感觉我们的进度确实比他们快一点，但是就不知道质量怎么样了，希望差不多，我看学长学姐他们这个时候也有焦虑的，但是现在做的也只有前进，“悟已往之不谏，知来者之可追”。疫情影响，现在行情不怎么好。我要好好加油呀。</p>
<h3 id="远离诱惑">远离诱惑</h3>
<p>最近寝室又封了，小组也不让进，导致我在学习的时候总是想玩。真正聪明的人不是直面诱惑而是远离，所以我要做一个聪明人（好气呀，好多人说俺憨憨的），我要远离诱惑，不能相信自己的控制能力。</p>
]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>学习计划</tag>
      </tags>
  </entry>
  <entry>
    <title>十月学习计划中的感悟</title>
    <url>/2022/09/25/live/%E5%8D%81%E6%9C%88%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%E4%B8%AD%E7%9A%84%E6%84%9F%E6%82%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="十月学习计划中的感悟">十月学习计划中的感悟</h2>
<h3 id="对学习方向的思考">对学习方向的思考</h3>
<p>最近听二水说我组长写了个可牛的东西，出于好奇，我就问了一下，然后就学了两天的React SSR，这几天也和组长聊了一些，我发现学长它们好像都说的是面试的时候不怎么问框架，主要问的是基础、网络和算法。所以我就有点迷茫，如果不问框架和工程化这些东西，那我学起来还有什么用呢，现在我有点想通了。在我学习React SSR的时候，看到那些Webpack配置和babel配置我都感觉自己的能力还不太够，还有学习react源码，我也能感觉到它里面的设计思想的巧妙，所以说我觉得我现在学习这些框架和工程化的东西主要是为了我以后能够更上一层楼，为了以后能够在前端这条路上更深一步做铺垫。我就觉得我组长很厉害，它有自己的想法，总觉得他总想在前端工程化发展，但是我就找不到自己想往哪个方向发展。所以，我目前的任务就是学习好<strong>基础、网络、算法</strong>这三座大山，然后学习React，去了解他的原理，学一下工程化，更要去了解并学习一下前端新的趋势，新的技术，这样只有自己了解的更多了才能知道自己想要什么。</p>
<h3 id="对React源码学习的思考">对React源码学习的思考</h3>
<p>最近在学习React源码，怎么说的，特别坎坷。但是我也知道了一个问题，学习源码并不是要手写一套React，而是知道它的逻辑，知道源码实现的思维。我记得我当时问桃峰学长Vue和React主学什么好，当时学长说的小孩子才做选择。我最近还在担心我如果两个都学会不会精力不太够，但是我看到学长学姐们的博客后才发现，好像是应该都学一下，多一条路多一种选择。框架不重要，重要的还是基础，只有基础好了才能更快的学习并接受新的知识。</p>
<h3 id="对前端的思考">对前端的思考</h3>
<p>我刚学习前端的时候，对那些布局、定位、浮动是真的搞不懂，当时也觉得前端好像挺简单，就写一写页面，但是我现在学的越多就越觉得难了，越觉得前端的知识点太多了，但是换另一种想法就是前端的路更多了，你完全可以专攻一门做到极致，也可以扩散开来，涉猎广泛。我觉得我现在要做的就是涉猎广泛，只有自己知识储量上去了，才知道那条路更适合自己。</p>
<h3 id="算法">算法</h3>
<p>对于算法，我是想着每天写四道，先把HOP100写完，我发现最近写算法开始有点顺手了，有的题不知道怎么写看个大致思路就会了，我还得坚持每天四道的计划，不能半途而废，对我来说，一天没有坚持下来以后就更难坚持了。今天上午力扣周赛，第三题我写出来啦，虽然不算太难，但是我通过优化把超时问题解决了，激动。</p>
<h3 id="接下来对学习计划的调整">接下来对学习计划的调整</h3>
<p><code>基础、算法、网络</code>三座大山我目前开始了两座，网络还没开始学习，学长学姐们一致强调要好好学习<code>计算机网络</code>这门专业课，但是我听课的时候感觉好枯燥，都是些书面知识，听了也不一定能记得住。我目前还是要每天好好弄基础和算法，然后<strong>学习React源码，这次学习我不手写React了，我要明白它的设计思路和原理，这样在开发中需要问题的时候可以更快的解决了。<strong>然后主要学习一下</strong>React和Vue的用法</strong>，看看还有什么用法是自己不知道的。不要把框架想的太高大上了，他只是一个前端开发的工具。</p>
]]></content>
      <categories>
        <category>live</category>
      </categories>
  </entry>
  <entry>
    <title>对前端的思考</title>
    <url>/2022/09/21/live/%E5%AF%B9%E5%89%8D%E7%AB%AF%E7%9A%84%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="对前端的思考">对前端的思考</h2>
<h3 id="交流问题">交流问题</h3>
<ol>
<li class="lvl-3">
<p>当时进小组面试的时候，也基本上都问过你们沟通能力怎么样是吧，大家也都在小组待了这么长时间了，说明当时面试的时候肯定都是觉得你们沟通能力差不多的是吧。但是，我只说前端哈。我感觉在这几次的项目中，我感觉前端的沟通很不行。</p>
</li>
<li class="lvl-3">
<p>就拿第一次来说，前端的都不关心整个项目的进度，别人不给自己接口都不会自己去要是吧，项目任务中都有明确说的，不要只是完成自己的项目任务，还要熟悉整个项目的流程，你们都不交流，怎么熟悉流程。可能那时候你们刚开始合作写项目，可能有点点腼腆，所以交流的少。能理解</p>
</li>
<li class="lvl-3">
<p>那么第二次项目，给了你们那么长时间，你们第一次考核项目的时候就写成那个样子，我感觉还是项目交流的问题。可能那时候在家，也不太好交流是吧。</p>
</li>
<li class="lvl-3">
<p>那你们现在又开始一个新的项目了是吧，我要看看你们这次能不能在规定的时间内将这个项目写好了。</p>
</li>
<li class="lvl-3">
<p>不止项目交流这方面，我看你们私下交流也很少，就只知道在自己的小群体里面学自己的是吧。我们是一个大的团体，你自己学自己的，你不和别人交流，那你根本就不清楚别人的学习进度。</p>
</li>
<li class="lvl-3">
<p>你们不止私下很少交流，和我们也交流的很少，这里我们也有不对的地方。可能凶你们次数多了，都怕学长学姐了？你们要知道你们现在已经大二了，都是要做组长带下一届了。是吧。到这个时候你们还怕学长学姐吗？你不敢和我们交流，你们自己也不互相交流，那你怎么能确保能带好下一届呢？咱不能让一届比一届差呀。当然，我不否认，你们目前掌握的知识确实比我们当时强一些。</p>
</li>
<li class="lvl-3">
<p>是不是我经常凶你们，都怕我呀，那你们组长从大一就开始带你们，也没见你们交流的多呀。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>live</category>
      </categories>
  </entry>
  <entry>
    <title>校企合作</title>
    <url>/2022/10/22/live/%E6%A0%A1%E4%BC%81%E5%90%88%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="校企合作">校企合作</h2>
<p>前端时间，老师找了个校企合作。然后负责人就让报名去。我想着提升一下自己嘛，看来还是自己太天真了。这项目的的真的就是纯纯的大冤种。</p>
<ol>
<li class="lvl-3">
<p>直接用的若依的框架，根本学不到什么。</p>
</li>
<li class="lvl-3">
<p>使用的vue2，无法学习vue3。</p>
</li>
<li class="lvl-3">
<p>浪费了好多时间，将自己的复习计划和算法计划彻底打乱。</p>
</li>
</ol>
<p>我要开摆了，我摆烂又不是我急。</p>
<p>新的计划：</p>
<ol>
<li class="lvl-3">
<p>每天的算法还是四道，每晚就来写算法吧。</p>
</li>
<li class="lvl-3">
<p>每天的基础题刷几道，然后找到自己不会的知识点，总结一下。</p>
</li>
<li class="lvl-3">
<p>这一周源码估计看不完了，先学一下typescript吧，这一周就把typescript彻底弄懂，不能似懂非懂的，然后再找一些面试题看看。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>校企合作</tag>
      </tags>
  </entry>
  <entry>
    <title>校企合作总结</title>
    <url>/2022/11/07/live/%E6%A0%A1%E4%BC%81%E5%90%88%E4%BD%9C%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="校企合作总结">校企合作总结</h2>
<h3 id="一、项目介绍">一、	项目介绍</h3>
<p>我是来自信工202的徐佳恩，本次参与的项目是人脸识别系统，我在本次项目中负责的是前端。</p>
<p>这次项目前端采用的技术是vue2，直接将若依系统的vue2前后端分离项目进行改造，来实现后台的登录和人脸识别系统的后台。项目后台的功能主要有人员库管理、人员管理、预警查看。项目的后台主要是进行人员的脸部图片上传，来管理人员的信息。</p>
<h3 id="二、校企合作的收获">二、	校企合作的收获</h3>
<p>这次项目最大的收获就是使用Apifox来进行接口的调试和使用企业微信的文档来进行项目的排期。</p>
<p>在以前的项目中使用swagger来调试接口，如果后端接口没有开发出来，就不知道接口需要传递什么参数也无法模拟返回数据，只能将前后端的交互先放着，等后端接口开发完成再继续交互，使用Apifox进行接口调试可以提前写好接口所需要的参数和调用mock的模拟后端返回数据，在后端接口没开发完成的情况下也可以模拟交互。</p>
<p>我们以前的项目在开发的时候，都是前期确定一下整个项目的所需要的功能和整个项目的逻辑，安排一下每个人所负责的模块。有时候也做流程图来让项目成员更好的理解整个项目的流程，但是都没有具体的安排排期。这次项目使用文档进行排期，让整个项目的进度有了把握，不像以前项目开发一样，想到哪一个模块还没开发就去开发哪一个模块。总结起来就是，排期能够更好的让自己知道还有什么功能没有实现，什么时候自己该完成哪些功能，更好的把握整个项目的进度。</p>
<h3 id="三、校企合作技术选型缺点">三、	校企合作技术选型缺点</h3>
<p>这次项目的技术选型是vue2，是直接将若依的vue2前后端分离项目给修改了一下。</p>
<p>在项目的开发过程中，因为使用的是若依系统写好的项目，所以自己只是在别人写好的项目上进行修改。所以前端负责的交互基本上只有修改原本的数据、添加一些小功能、调用若依的接口和修改前端页面的样式。这导致了在项目的交互过程中根本学习不到关于技术方面的东西。</p>
<p>这次项目采用的技术栈是vue2，在很多较大的公司采用的技术是react，即使有使用vue的也是使用的vue3。所以校企合作采用的技术栈选型和公司就业的技术选型不一样。</p>
<h3 id="四、校企合作的总结">四、校企合作的总结</h3>
<p>在校企合作的过程中，我只学到了使用Apifox来调试接口和使用文档来排期。在整个项目的交互过程中用的都是别人已经写好的项目，基本上都是增删改查，学习不到技术方向上的知识。</p>
]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>校企合作</tag>
      </tags>
  </entry>
  <entry>
    <title>第一个面试通过啦</title>
    <url>/2022/08/31/live/%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%9D%A2%E8%AF%95%E9%80%9A%E8%BF%87%E5%95%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>    简历已经开始投好长时间了。公司不是看了不会就是直接被拒。乐观一点就是别人看自己才刚大三，不招。悲观一点就是别人看我能力不太行。<br>
    昨天算是我第一次技术面试吧，我第一次有点紧张，好多问题都没回答上来，本来还知道的深拷贝两种方法，就说出来了个使用JSON，直接忘记“递归”这个词了，第二种递归方法就没说。问的框架不怎么多，基本都是最基础的js，html，css知识点。我发现以前好多东西都是一知半解的，当真正面试的时候就只能说不来一点，没办法说的太详细。说来可笑，面试的时候就连同步异步我都说反了。但是这就阴差阳错的面过了，嘿嘿。虽然只是一个小公司，但是我还是高兴了很久，感谢上帝。<br>
<img src="images/live-%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%9D%A2%E8%AF%95%E9%80%9A%E8%BF%87%E5%95%A6.jpg" alt="面试通过的图片" loading="lazy"></p>
]]></content>
      <categories>
        <category>live</category>
      </categories>
  </entry>
  <entry>
    <title>迟到的生日祝福</title>
    <url>/2022/11/09/live/%E8%BF%9F%E5%88%B0%E7%9A%84%E7%94%9F%E6%97%A5%E7%A5%9D%E7%A6%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="迟到的生日祝福">迟到的生日祝福</h3>
<p>我的生日都是按农历9月25过的，对应今年的阳历就是10月20。说不真实不巧。在10月20这一天，因为疫情影响，辅导员让我们整栋楼的都搬宿舍。消息是上午通知的，当时还以为只是隔离一段时间，隔离完后还搬回来。但是，紧接着“要全部搬走，不再回原宿舍”的通知就发了出来。没办法，东西多也只能慢慢搬了。</p>
<p>通知刚发下来的时候，就有好多宿舍开始收拾了，我看楼下大大小小的包裹已经快没啥地方放东西了，我们还是六楼，就索性想着最后搬吧。最后经历了各种情况，我们到晚上七八点的时候才终于搬完了。</p>
<p>你看，这生日过的真委屈，校园餐厅，超市都不开门，快递也不让进。</p>
<p>就在今天，我组员跟我说了一句生日快乐，说迟到21天的生日礼物。我当时有点小激动。毕竟这算是我真正意义上的第一个生日礼物，一个逻辑鼠标，一百多呢，挺贵的。</p>
<p>我组员真好。</p>
]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>生日</tag>
      </tags>
  </entry>
  <entry>
    <title>Commonjs和EsModule</title>
    <url>/2022/09/29/technology/Commonjs%E5%92%8CEsModule/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="#1">Commonjs和EsModule</a></p>
<ul class="lvl-0">
<li class="lvl-4"><a href="#2">Commonjs</a>
<ul class="lvl-2">
<li class="lvl-6"><a href="#3">Commonjs实现原理-包装函数的本质</a></li>
<li class="lvl-6"><a href="#4">require文件加载流程</a></li>
<li class="lvl-6"><a href="#5">require引入处理</a></li>
<li class="lvl-6"><a href="#6">require的动态加载</a></li>
<li class="lvl-6"><a href="#7">exports和module.exports</a>
<ul class="lvl-4">
<li class="lvl-8"><a href="#8">exports</a></li>
<li class="lvl-8"><a href="#9">module.exports</a></li>
</ul>
</li>
</ul>
</li>
<li class="lvl-4"><a href="#10">ES Module</a>
<ul class="lvl-2">
<li class="lvl-6"><a href="#11">export和import</a></li>
</ul>
</li>
<li class="lvl-4"><a href="#12">总结</a>
<ul class="lvl-2">
<li class="lvl-6"><a href="#13">Commonjs</a></li>
<li class="lvl-6"><a href="#14">ES Module</a></li>
</ul>
</li>
</ul>
<p id=1></p>
<h1>Commonjs和EsModule</h1>
<p id=2></p>
<h2 id="Commonjs">Commonjs</h2>
<p id=3></p>
<h3 id="Commonjs实现原理-包装函数的本质">Commonjs实现原理-包装函数的本质</h3>
<p>在编译的过程中，实际 Commonjs 对 js 的代码块进行了首尾包装，其本质是：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">wrapper</span> <span class="token punctuation">(</span><span class="token parameter">script</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token string">'(function (exports, require, module, __filename, __dirname) &#123;'</span> <span class="token operator">+</span> 
        script <span class="token operator">+</span>
     <span class="token string">'\n&#125;)'</span>
<span class="token punctuation">&#125;</span></code></pre>
<p id=4></p>
<h3 id="require文件加载流程">require文件加载流程</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment">//核心模块</span>
<span class="token keyword">const</span> sayName <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./hello.js'</span><span class="token punctuation">)</span><span class="token comment">//文件模块</span>
<span class="token keyword">const</span> crypto <span class="token operator">=</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto-js'</span><span class="token punctuation">)</span><span class="token comment">//第三方自定义模块</span></code></pre>
<ol>
<li class="lvl-3">
<p>对于<code>fs、http、path</code>等核心模块，优先级仅次于缓存加载，在Node源码编译中，已经被编译成二进制代码，所以加载核心模块最快。</p>
</li>
<li class="lvl-3">
<p>以<code>./、../、/</code>开始的标识符，被当作文件模块处理，require()会将路径转换成真实路径，然后将编译后的结果缓存起来，在第二次加载的时候会更快。</p>
</li>
<li class="lvl-3">
<p>对于第三方自定义模块，会在当前的node_module目录查找，如果没有则查找上一级，知道根目录下的node_module。在查找过程中会查找package.json文件中的<code>mian</code>属性指向的文件，如果没有package.json则在node环境下依次查找<code>index.js、index.json、index.node</code>。</p>
</li>
</ol>
<pre class="mermaid">graph TB
subgraph g3
  node_module3
  subgraph g2
  	  node_module2
      subgraph g1
          require-->node_module
       end
       node_module--没有找到,向上一级查找-->node_module2 
    end
    node_module2---没有找到,向上一级查找-->node_module3
end
node_module3--找到-->package.json
package.json--是,main属性指向文件-->main指向文件
package.json--否-->index.js
subgraph g4
	index.js--没有-->index.json
	index.json--没有-->index.node
end</pre>
<p id=5></p>
<h3 id="require引入处理">require引入处理</h3>
<ol>
<li class="lvl-3">
<p>引入顺序：Commonjs<code>同步</code>加载并执行模块文件，采用深度优先遍历，执行顺序是<code>父-&gt;子-&gt;父</code>。</p>
</li>
<li class="lvl-3">
<p>加载原理：Node中，每一个js文件都是一个nodule，module上保存了exports等信息，还保存了loaded来表示该模块是否被加载，如果被加载则说明该模块在<code>Module</code>中缓存，直接读取。如果没加入缓存则加入缓存，然后执行文件。<code>这样就避免了循环引用和重复加载</code>。</p>
</li>
<li class="lvl-3">
<p>我们要注意的是，Commonjs是同步加载的，并且执行顺序是<code>父-&gt;子-&gt;父</code>，所以在<code>子</code>中引入<code>父</code>可能得不到数据。我们可以将其放入异步加载中<code>(例：setTimeout)</code>或动态加载。</p>
</li>
</ol>
<p id=6></p>
<h3 id="require的动态加载">require的动态加载</h3>
<p>动态加载是require的一个特性，require可以在任意的上下文动态加载模块，这正是区别于<code>Es Module</code>的地方。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是 a 文件'</span><span class="token punctuation">)</span>
exports<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> getMes <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./b'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>
<p id=7></p>
<h3 id="exports和module-exports">exports和module.exports</h3>
<p id=8></p>
<h4 id="exports">exports</h4>
<p>正确写法</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'names'</span><span class="token punctuation">;</span><span class="token comment">//导出</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./a'</span><span class="token punctuation">)</span><span class="token comment">//引入</span></code></pre>
<p>错误写法</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'names'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//导出</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./a'</span><span class="token punctuation">)</span><span class="token comment">//引入</span></code></pre>
<p id=9></p>
<h4 id="module-exports">module.exports</h4>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'name'</span> <span class="token punctuation">&#125;</span><span class="token comment">//导出</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//导出</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> </code></pre>
<p><strong>注意，export和module.exports不要混合使用，会出现覆盖的情况。</strong></p>
<p id=10></p>
<h2 id="ES-Module">ES Module</h2>
<p id=11></p>
<h3 id="export和import">export和import</h3>
<ol>
<li class="lvl-3">
<p>混合导入导出</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//导出</span>
<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'names'</span> 
<span class="token keyword">export</span> <span class="token punctuation">&#123;</span> name <span class="token punctuation">&#125;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello , world'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span>say <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./a.js'</span><span class="token comment">//引入导出</span>
<span class="token comment">//默认导出</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span>say <span class="token punctuation">&#125;</span>
<span class="token keyword">import</span> msg <span class="token keyword">from</span> <span class="token string">'./a.js'</span> <span class="token comment">//引入默认导出</span>

<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> mes <span class="token keyword">from</span> <span class="token string">'./a.js'</span><span class="token comment">//将导出的属性合并到mes属性上</span></code></pre>
<ol start="2">
<li class="lvl-3">
<p>重命名导入</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> name <span class="token keyword">as</span> names <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./a.js'</span></code></pre>
<ol start="3">
<li class="lvl-3">
<p>重定向导出</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'module'</span><span class="token comment">//重定向导出不包含module中default属性的所有属性</span>
<span class="token keyword">export</span> <span class="token punctuation">&#123;</span> name <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'module'</span><span class="token comment">//从module中导入name，再以name名称导出</span>
<span class="token keyword">export</span> <span class="token punctuation">&#123;</span> name <span class="token keyword">as</span> names <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'module'</span><span class="token comment">//从module中导入name，再以names名称导出</span></code></pre>
<ol start="4">
<li class="lvl-3">
<p>运行模块</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">'module'</span></code></pre>
<ol start="5">
<li class="lvl-3">
<p>动态导入</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'module'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p id=12></p>
<h2 id="总结">总结</h2>
<p id=13></p>
<h3 id="Commonjs-2">Commonjs</h3>
<ol>
<li class="lvl-3">
<p>模块由 JS 运行时实现。</p>
</li>
<li class="lvl-3">
<p>是单个值导出，本质上导出的就是 exports 属性。</p>
</li>
<li class="lvl-3">
<p>是可以动态加载的，对每一个加载都存在缓存，可以有效的解决循环引用问题。</p>
</li>
<li class="lvl-3">
<p>模块同步加载并执行模块文件。</p>
</li>
</ol>
<p id=14></p>
<h3 id="ES-Module-2">ES Module</h3>
<ol>
<li class="lvl-3">
<p>ES6 Module 静态的，不能放在块级作用域内，代码发生在编译时。</p>
</li>
<li class="lvl-3">
<p>ES6 Module 的值是动态绑定的，可以通过导出方法修改，可以直接访问修改结果。</p>
</li>
<li class="lvl-3">
<p>ES6 Module 可以导出多个属性和方法，可以单个导入导出，混合导入导出。</p>
</li>
<li class="lvl-3">
<p>ES6 模块提前加载并执行模块文件，</p>
</li>
<li class="lvl-3">
<p>ES6 Module 导入模块在严格模式下。</p>
</li>
<li class="lvl-3">
<p>ES6 Module 的特性可以很容易实现 Tree Shaking 和 Code Splitting。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
  </entry>
  <entry>
    <title>JS事件循环机制event loop</title>
    <url>/2022/09/18/technology/JS%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6event%20loop/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="#1">JS事件循环机制event loop</a></p>
<ul class="lvl-0">
<li class="lvl-4"><a href="#2">同步和异步</a></li>
<li class="lvl-4"><a href="#3">宏任务和微任务</a></li>
<li class="lvl-4"><a href="#4">宏任务</a></li>
<li class="lvl-4"><a href="#5">微任务</a></li>
</ul>
<p id=1></p>
<h2 id="JS事件循环机制event-loop">JS事件循环机制event loop</h2>
<p id=2></p>
<h3 id="同步和异步">同步和异步</h3>
<p>我们先来看这样一段代码。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'333'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'222'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1111'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>它的输出顺序是111、222、333，为什么会按照这种顺序输出呢？</p>
<pre class="mermaid">graph TB;
任务进入执行栈-->同步任务还是异步任务
同步任务还是异步任务--同步-->主线程
同步任务还是异步任务--异步-->EventTable
主线程-->任务全部执行完毕
EventTable--注册回调函数-->EventQueue
任务全部执行完毕-->读取任务队列中的结果,进入主线程执行
EventQueue---读取任务队列中的结果,进入主线程执行</pre>
<ol>
<li class="lvl-3">
<p>同步和异步任务分别进入不同的执行场所，同步任务进入主线程，异步任务进入EventTable并注册函数。</p>
</li>
<li class="lvl-3">
<p>当指定的事情完成时（例如，延时器结束后），EventTable会将这个函数移入EventQueue。</p>
</li>
<li class="lvl-3">
<p>主线程内的任务执行完毕为空，回去EventQueue读取对应的函数进入主线程执行。</p>
</li>
<li class="lvl-3">
<p>js引擎存在monitoring process进程，会持续不断的检查主线程执行栈是否为空，一旦为空，就会去Event Queue那里检查是否有等待被调用的函数。</p>
</li>
</ol>
<p id=3></p>
<h3 id="宏任务和微任务">宏任务和微任务</h3>
<pre class="mermaid">graph TB;
进入任务执行栈-->判断同步异步
判断同步异步--同步-->主线程
判断同步异步--异步-->判断微任务或宏任务
判断微任务或宏任务--宏任务-->EventTable-宏
判断微任务或宏任务--微任务-->EventTable-微
EventTable-宏--注册回调-->EventQueue-宏
EventTable-微--注册回调-->EventQueue-微
主线程-->任务执行完毕
任务执行完毕-->检查任务队列,先微后宏,有事件回调,入主线程执行
EventQueue-宏-->检查任务队列,先微后宏,有事件回调,入主线程执行
EventQueue-微-->检查任务队列,先微后宏,有事件回调,入主线程执行
检查任务队列,先微后宏,有事件回调,入主线程执行-->进入任务执行栈</pre>
<p>对于Promise中的then函数：</p>
<ol>
<li class="lvl-3">
<p>只要then中回调的代码执行完毕并获得同步返回值，这个then返回的promise就算本resolve。</p>
</li>
<li class="lvl-3">
<p>关于同步返回值，如果then中存在新建的promise，那么then返回的promise会等待这个promise被resolve后再resplve。下面这段代码当作练习题</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>
<p>上面的代码输出1 8 2 3 9 4 7 5 6 0 3</p>
<p id=4></p>
<h3 id="宏任务">宏任务</h3>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">浏览器</th>
<th style="text-align:center">Node</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">I/O</td>
<td style="text-align:center">☑</td>
<td style="text-align:center">☑</td>
</tr>
<tr>
<td style="text-align:center">setTimeout</td>
<td style="text-align:center">☑</td>
<td style="text-align:center">☑</td>
</tr>
<tr>
<td style="text-align:center">setInterval</td>
<td style="text-align:center">☑</td>
<td style="text-align:center">☑</td>
</tr>
<tr>
<td style="text-align:center">setInnediate</td>
<td style="text-align:center">☒</td>
<td style="text-align:center">☑</td>
</tr>
<tr>
<td style="text-align:center">requestAnimationFrame</td>
<td style="text-align:center">☑</td>
<td style="text-align:center">☒</td>
</tr>
</tbody>
</table>
<p id=5></p>
<h3 id="微任务">微任务</h3>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">浏览器</th>
<th style="text-align:center">Node</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">process.nextTick</td>
<td style="text-align:center">☒</td>
<td style="text-align:center">☑</td>
</tr>
<tr>
<td style="text-align:center">MutationObserver</td>
<td style="text-align:center">☑</td>
<td style="text-align:center">☒</td>
</tr>
<tr>
<td style="text-align:center">Promise.then chat finally</td>
<td style="text-align:center">☑</td>
<td style="text-align:center">☑</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
  </entry>
  <entry>
    <title>闭包</title>
    <url>/2022/09/18/technology/Web%E5%AE%89%E5%85%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="Web安全">Web安全</h2>
<h3 id="攻击">攻击</h3>
<h4 id="XSS">XSS</h4>
<p>XSS是跨站脚本工具，攻击者通过一种方式将恶意脚本注入，例如，评论的输入框直接将用户输入的字符串转换成DOM。特点：</p>
<ol>
<li class="lvl-3">
<p>通常难以从UI上感知(暗地执行脚本)</p>
</li>
<li class="lvl-3">
<p>窃取用户信息(cookie/token)</p>
</li>
<li class="lvl-3">
<p>绘制UI (例如弹窗),诱骗用户点击/填写表单</p>
</li>
</ol>
<p>XSS工具类别</p>
<ol>
<li class="lvl-3">
<p>存储型XSS攻击恶意脚本呗存在数据库中，危害最大，对全部用户都可见。</p>
</li>
</ol>
<blockquote>
<p>Demo</p>
</blockquote>
<pre class="language-none"><code class="language-none">&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;github.com&#x2F;favicon.ico&quot; onload&#x3D;&quot;alert(&#39;XSS&#39;)&quot; alt&#x3D;&quot;&quot;&gt;</code></pre>
<ol start="2">
<li class="lvl-3">
<p>反射型XSS攻击</p>
</li>
</ol>
<pre class="language-none"><code class="language-none">host&#x2F;path&#x2F;&gt;param&#x3D;&lt;script&gt;alert(&#39;123&#39;)&lt;&#x2F;script&gt;</code></pre>
<p>如果代码获取了地址的url并将其转换为DOM使用，那么如果我们注入恶意脚本则是反射性XSS攻击。<br>
3.</p>
<h3 id="防御">防御</h3>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
  </entry>
  <entry>
    <title>css优先级计算规则</title>
    <url>/2022/09/21/technology/css%E4%BC%98%E5%85%88%E7%BA%A7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="#1">css优先级计算规则</a></p>
<ul class="lvl-0">
<li class="lvl-4"><a href="#2">优先级的计算规则</a></li>
<li class="lvl-4"><a href="#3">优先级特殊情况</a></li>
<li class="lvl-4"><a href="#4">问题</a></li>
</ul>
<p id=1></p>
<h2 id="css优先级计算规则">css优先级计算规则</h2>
<p id=2></p>
<h3 id="优先级的计算规则">优先级的计算规则</h3>
<table>
<thead>
<tr>
<th style="text-align:center">#</th>
<th style="text-align:center">A</th>
<th style="text-align:center">B</th>
<th style="text-align:center">C</th>
<th style="text-align:center">D</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">内联样式</td>
<td style="text-align:center">☑</td>
<td style="text-align:center">☐</td>
<td style="text-align:center">☐</td>
<td style="text-align:center">☐</td>
</tr>
<tr>
<td style="text-align:center">ID选择器</td>
<td style="text-align:center">☐</td>
<td style="text-align:center">☑</td>
<td style="text-align:center">☐</td>
<td style="text-align:center">☐</td>
</tr>
<tr>
<td style="text-align:center">类选择器</td>
<td style="text-align:center">☐</td>
<td style="text-align:center">☐</td>
<td style="text-align:center">☑</td>
<td style="text-align:center">☐</td>
</tr>
<tr>
<td style="text-align:center">属性选择器</td>
<td style="text-align:center">☐</td>
<td style="text-align:center">☐</td>
<td style="text-align:center">☑</td>
<td style="text-align:center">☐</td>
</tr>
<tr>
<td style="text-align:center">伪类</td>
<td style="text-align:center">☐</td>
<td style="text-align:center">☐</td>
<td style="text-align:center">☑</td>
<td style="text-align:center">☐</td>
</tr>
<tr>
<td style="text-align:center">标签选择器</td>
<td style="text-align:center">☐</td>
<td style="text-align:center">☐</td>
<td style="text-align:center">☐</td>
<td style="text-align:center">☑</td>
</tr>
<tr>
<td style="text-align:center">伪元素</td>
<td style="text-align:center">☐</td>
<td style="text-align:center">☐</td>
<td style="text-align:center">☐</td>
<td style="text-align:center">☑</td>
</tr>
</tbody>
</table>
<p>A、B、C、D各自对应不同的选择器出现的次数。</p>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">#id > div > span > a.link</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre>
<ol>
<li class="lvl-3">
<p>没有内联样式A为0</p>
</li>
<li class="lvl-3">
<p>有一个id选择器B为1</p>
</li>
<li class="lvl-3">
<p>有一个类选择器C为1</p>
</li>
<li class="lvl-3">
<p>有三个标签选择器D为3<br>
A、B、C、D可简写为(0,1,1,3)</p>
</li>
</ol>
<p>优先级的比较规则是，从左往右一次比较A、B、C、D，大的优先级高。如果四位全一样，则后面的会覆盖前面的。</p>
<p id=3></p>
<h3 id="优先级特殊情况">优先级特殊情况</h3>
<ol>
<li class="lvl-3">
<p>在样式后面!important会将样式的优先级提升到最高。</p>
</li>
<li class="lvl-3">
<p>在width后面设置!important不会影响max-width。height和max-height同理。</p>
</li>
</ol>
<p>知识点：</p>
<ol>
<li class="lvl-3">
<p>属性选择器</p>
</li>
</ol>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">[title]</span><span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
&lt;h2 title=<span class="token string">"Hello world"</span>>Hello world&lt;/h2>
&lt;a title=<span class="token string">"W3School"</span> href=<span class="token string">"#"</span>>W3School&lt;/a></code></pre>
<p id=4></p>
<h3 id="问题">问题</h3>
<p><strong>这里有一个小问题，我在尝试的时候发现给内联样式加上!important也无法覆盖伪类的样式。</strong></p>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
  </entry>
  <entry>
    <title>Flex布局</title>
    <url>/2022/08/31/technology/flex%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="Flex布局">Flex布局</h3>
<p>    Flex布局主要是针对容器和项目来说的，容器就是包裹其他元素的元素，项目就是大被包裹的元素。</p>
<h4 id="Flex布局容器">Flex布局容器</h4>
<p>    首先我们先明白容器有主轴和与主轴垂直的轴。<br>
    我们先了解一下Flex布局容器上面的属性都有哪些</p>
<ol>
<li class="lvl-3">
<p>flex-direction：决定主轴的方向</p>
<ul class="lvl-2">
<li class="lvl-5">row（默认值）：水平方向从左到右</li>
<li class="lvl-5">row-reverse：水平方向从右到左</li>
<li class="lvl-5">column：垂直方向从上到下</li>
<li class="lvl-5">column：垂直方向从下到上</li>
</ul>
</li>
<li class="lvl-3">
<p>flex-wrap：项目排列在主轴上的换行方式</p>
<ul class="lvl-2">
<li class="lvl-5">nowarp（默认值）：不换行</li>
<li class="lvl-5">warp：换行，并且第一行在上方</li>
<li class="lvl-5">warp-reverse：换行，第一行在下方</li>
</ul>
</li>
<li class="lvl-3">
<p>flex-flow：前两个属性的简写形式（flex-flow:<flex-direction> || <flex-wrap>）</p>
</li>
<li class="lvl-3">
<p>justify-content：主轴上项目的对齐方式</p>
<ul class="lvl-2">
<li class="lvl-5">flex-start：对其主轴的开始位置</li>
<li class="lvl-5">flex-end：对其主轴的结束位置</li>
<li class="lvl-5">center：居中</li>
<li class="lvl-5">space-between：两端对其，项目间隔相等</li>
<li class="lvl-5">space-around：项目两侧间隔相等</li>
</ul>
</li>
<li class="lvl-3">
<p>align-items 项目在主轴交叉轴上的对齐方式</p>
<ul class="lvl-2">
<li class="lvl-5">flex-start：交叉轴的起点对齐</li>
<li class="lvl-5">flex-end：交叉轴的终点对齐</li>
<li class="lvl-5">center：交叉轴居中</li>
<li class="lvl-5">baseline：项目的第一行文字的基线对齐</li>
<li class="lvl-5">stretch（默认值）：如果高度没设置，高度为auto</li>
</ul>
</li>
<li class="lvl-3">
<p>align-content：多条主轴的对齐方式，如果只有一条主轴则不生效</p>
<ul class="lvl-2">
<li class="lvl-5">flex-start：与交叉轴的起点对齐。</li>
<li class="lvl-5">flex-end：与交叉轴的终点对齐。</li>
<li class="lvl-5">center：与交叉轴的中点对齐。</li>
<li class="lvl-5">space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>
<li class="lvl-5">space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>
<li class="lvl-5">stretch（默认值）：轴线占满整个交叉轴。</li>
</ul>
</li>
</ol>
<h4 id="Flex布局项目">Flex布局项目</h4>
<ol>
<li class="lvl-3">
<p>order：属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p>
</li>
<li class="lvl-3">
<p>flex-grow：属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p>
</li>
<li class="lvl-3">
<p>flex-shrink：属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>
</li>
<li class="lvl-3">
<p>flex-basis：定义了在分配多余空间之前，项目占据的主轴空间（main size）。（不太明白）</p>
</li>
<li class="lvl-3">
<p>flex：flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</p>
</li>
<li class="lvl-3">
<p>align-self：允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto</p>
</li>
</ol>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
  </entry>
  <entry>
    <title>闭包</title>
    <url>/2022/08/31/technology/hooks%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="#1">React Hooks简单用法了解</a></p>
<ul class="lvl-0">
<li class="lvl-2"><a href="#2">hooks数据更新驱动</a>
<ul class="lvl-2">
<li class="lvl-4"><a href="#3">useState</a></li>
<li class="lvl-4"><a href="#4">useReducer</a></li>
<li class="lvl-4"><a href="#5">useSyncExternalStore</a></li>
<li class="lvl-4"><a href="#6">useTransition</a></li>
<li class="lvl-4"><a href="#7">useDeferredValue</a></li>
</ul>
</li>
<li class="lvl-2"><a href="#8">hooks执行副作用</a>
<ul class="lvl-2">
<li class="lvl-4"><a href="#9">useEffect</a></li>
<li class="lvl-4"><a href="#10">useLayoutEffect</a></li>
<li class="lvl-4"><a href="#11">useInsertionEffect</a></li>
</ul>
</li>
<li class="lvl-2"><a href="#12">hooks状态获取与传递</a>
<ul class="lvl-2">
<li class="lvl-4"><a href="#13">useContext</a></li>
<li class="lvl-4"><a href="#14">useRef</a></li>
<li class="lvl-4"><a href="#15">useImperativeHandle</a></li>
</ul>
</li>
<li class="lvl-2"><a href="#16">hooks状态派生与保存</a>
<ul class="lvl-2">
<li class="lvl-4"><a href="#17">useMemo</a></li>
<li class="lvl-4"><a href="#18">useCallback</a></li>
</ul>
</li>
<li class="lvl-2"><a href="#19">hooks工具hooks</a>
<ul class="lvl-2">
<li class="lvl-4"><a href="#20">useDebugValue</a></li>
<li class="lvl-4"><a href="#21">useId</a></li>
</ul>
</li>
</ul>
<p id=1></p>
<h1>React Hooks简单用法了解</h1>
<p id=2></p>
<h2 id="hooks数据更新驱动">hooks数据更新驱动</h2>
<p id=3></p>
<h3 id="useState">useState</h3>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>initData<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<ol>
<li class="lvl-3">
<p>state是一个值，可以交给render来渲染。</p>
</li>
<li class="lvl-3">
<p>dispatch是改变state的函数。</p>
</li>
<li class="lvl-3">
<p>initData是state值得初始化值，可以是一个值也可以是一个函数，如果是一个函数则state的初始化值就是函数的返回值。</p>
</li>
</ol>
<blockquote>
<p>Demo</p>
</blockquote>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span> setNum<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    <span class="token function">setNum</span><span class="token punctuation">(</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里的num是不能够及时改变的</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token punctuation">&#123;</span>num<span class="token punctuation">&#125;</span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre>
<p>注意点：</p>
<ol>
<li class="lvl-3">
<p>在函数组件的一次上下文中，state的值是固定不变的，及时你使用dispatch对state进行修改，在视图中state改变，但是打印的state还是没有改变。</p>
</li>
<li class="lvl-3">
<p>如果dispatch传入的值state的值不变或地址值不变，则组件不会更新。</p>
</li>
</ol>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span> setNum<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'name'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    num<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'name2'</span><span class="token punctuation">;</span>
    <span class="token function">setNum</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//因为num的地址值没有改变，所以组件不会更新，视图也不会改变</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token punctuation">&#123;</span>num<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre>
<ol start="3">
<li class="lvl-3">
<p>dispatch在当前执行上下文中获取不到最新的state,只有在下一组件render中才能获取到。</p>
</li>
</ol>
<p id=4></p>
<h3 id="useReducer">useReducer</h3>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<ol>
<li class="lvl-3">
<p>state</p>
</li>
<li class="lvl-3">
<p>dispatch和useState中的dispatch是一样的。</p>
</li>
<li class="lvl-3">
<p>reducer是一个函数，接收两个参数，state和action，state是之前的state值，action是传入的值，如果state和action相同，则组件不会更新。</p>
</li>
</ol>
<blockquote>
<p>Demo</p>
</blockquote>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useReducer <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span> setNum<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> action<span class="token operator">:</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'add'</span><span class="token operator">|</span><span class="token string">'sub'</span><span class="token operator">|</span><span class="token string">'reset'</span><span class="token punctuation">;</span> payload<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span> payload<span class="token punctuation">&#125;</span> <span class="token operator">=</span> action<span class="token punctuation">;</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">case</span> <span class="token string">'add'</span><span class="token operator">:</span>
        <span class="token keyword">return</span> state <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">'sub'</span><span class="token operator">:</span>
        <span class="token keyword">return</span> state <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">'reset'</span><span class="token operator">:</span>
        <span class="token keyword">return</span> payload<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
    当前值：</span><span class="token punctuation">&#123;</span>num<span class="token punctuation">&#125;</span><span class="token plain-text">
    </span><span class="token punctuation">&#123;</span><span class="token comment">/* 派发更新 */</span><span class="token punctuation">&#125;</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token function">setNum</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'add'</span><span class="token punctuation">,</span> payload<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">增加</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token function">setNum</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'sub'</span><span class="token punctuation">,</span> payload<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">减少</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token function">setNum</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'reset'</span><span class="token punctuation">,</span> payload<span class="token operator">:</span> <span class="token number">666</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">赋值</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre>
<p id=5></p>
<h3 id="useSyncExternalStore">useSyncExternalStore</h3>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token function">useSyncExternalStore</span><span class="token punctuation">(</span>
    subscribe<span class="token punctuation">,</span>
    getSnapshot<span class="token punctuation">,</span>
    getServerSnapshot
<span class="token punctuation">)</span></code></pre>
<ol>
<li class="lvl-3">
<p>subscribe为订阅函数，当数据改变的时候会触发subscribe，useSyncExternalStore会通过带有记忆性的getSnapshot来判断数据是否发生变化，如果发生变化则会强制更新数据</p>
</li>
<li class="lvl-3">
<p>getSnapshot 可以理解成一个带有记忆功能的选择器。当 store 变化的时候，会通过 getSnapshot 生成新的状态值，这个状态值可提供给组件作为数据源使用，getSnapshot 可以检查订阅的值是否改变，改变的话那么会触发更新。</p>
</li>
<li class="lvl-3">
<p>getServerSnapshot 用于 hydration 模式下的 getSnapshot。</p>
</li>
</ol>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useReducer<span class="token punctuation">,</span> useState<span class="token punctuation">,</span> useSyncExternalStore <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span>combineReducers<span class="token punctuation">,</span> createStore<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'redux'</span>
<span class="token keyword">function</span> <span class="token function">numberReducer</span><span class="token punctuation">(</span>state<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>action<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> <span class="token string">'ADD'</span><span class="token operator">:</span>
      <span class="token keyword">return</span> state <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token keyword">case</span> <span class="token string">'DEL'</span><span class="token operator">:</span>
      <span class="token keyword">return</span> state <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> state
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> rootReducer <span class="token operator">=</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token builtin">number</span><span class="token operator">:</span> numberReducer<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>rootReducer<span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token builtin">number</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">useSyncExternalStore</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>subscribe<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token punctuation">&#123;</span>state<span class="token punctuation">&#125;</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>type<span class="token operator">:</span> <span class="token string">'ADD'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">点击</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre>
<p id=6></p>
<h3 id="useTransition">useTransition</h3>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span>  <span class="token punctuation">[</span> isPending <span class="token punctuation">,</span> startTransition <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useTransition</span> <span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<ol>
<li class="lvl-3">
<p>isPending是出于过度状态的标志。</p>
</li>
<li class="lvl-3">
<p>startTransition可以把更新任务变成过渡任务。</p>
</li>
</ol>
<blockquote>
<p>Demo</p>
</blockquote>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useState<span class="token punctuation">,</span> useTransition <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token comment">/* 模拟数据 */</span>
<span class="token keyword">const</span> mockList1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">'tab1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token operator">=></span>item<span class="token operator">+</span><span class="token string">'--'</span><span class="token operator">+</span>index <span class="token punctuation">)</span>
<span class="token keyword">const</span> mockList2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">'tab2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token operator">=></span>item<span class="token operator">+</span><span class="token string">'--'</span><span class="token operator">+</span>index <span class="token punctuation">)</span>
<span class="token keyword">const</span> mockList3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">'tab3'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token operator">=></span>item<span class="token operator">+</span><span class="token string">'--'</span><span class="token operator">+</span>index <span class="token punctuation">)</span>

<span class="token keyword">const</span> tab <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  tab1<span class="token operator">:</span> mockList1<span class="token punctuation">,</span>
  tab2<span class="token operator">:</span> mockList2<span class="token punctuation">,</span>
  tab3<span class="token operator">:</span> mockList3
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>active<span class="token punctuation">,</span> setActive<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">'tab1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>renderData<span class="token punctuation">,</span> setRenderData<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>tab<span class="token punctuation">[</span>active<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>isPending<span class="token punctuation">,</span> startTransition<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useTransition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">handleChangeTab</span><span class="token punctuation">(</span>activeItem<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">setActive</span><span class="token punctuation">(</span>activeItem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//立即更新</span>
    <span class="token function">startTransition</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token comment">//startTransition里面的任务优先级低</span>
      <span class="token function">setRenderData</span><span class="token punctuation">(</span>tab<span class="token punctuation">[</span>activeItem<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>tab<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token punctuation">&#123;</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>tab<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>idx<span class="token punctuation">)</span><span class="token operator">=></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>idx<span class="token punctuation">&#125;</span></span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>active <span class="token operator">===</span> item <span class="token operator">?</span> <span class="token string">'active'</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">&#125;</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token function">handleChangeTab</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>item<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>content<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token punctuation">&#123;</span>isPending<span class="token operator">&amp;&amp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">loading...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span><span class="token plain-text">
      </span><span class="token punctuation">&#123;</span>renderData<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>item<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre>
<p id=7></p>
<h3 id="useDeferredValue">useDeferredValue</h3>
<p>useDeferredValue和useTransition类似。它两个本质上和内部实现一样都是标记成了过渡更新任务。<br>
useTransition是把其内部的更新任务变成了过渡任务transtion，而useDeferredValue是把原值通过过渡任务得到新的值，这个值作为延时状态。一个是处理一段逻辑，一个是产生一个新的状态。</p>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> deferrredValue <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useDeferredValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></code></pre>
<ol>
<li class="lvl-3">
<p>value一般为可变的state</p>
</li>
<li class="lvl-3">
<p>deferrredValue是返回的延时状态</p>
</li>
</ol>
<blockquote>
<p>Demo 将useTransition的例子用useDeferredValue实现</p>
</blockquote>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useDeferredValue<span class="token punctuation">,</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">'./index.css'</span>
<span class="token comment">/* 模拟数据 */</span>
<span class="token keyword">const</span> mockList1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">'tab1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token operator">=></span>item<span class="token operator">+</span><span class="token string">'--'</span><span class="token operator">+</span>index <span class="token punctuation">)</span>
<span class="token keyword">const</span> mockList2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">'tab2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token operator">=></span>item<span class="token operator">+</span><span class="token string">'--'</span><span class="token operator">+</span>index <span class="token punctuation">)</span>
<span class="token keyword">const</span> mockList3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">'tab3'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token operator">=></span>item<span class="token operator">+</span><span class="token string">'--'</span><span class="token operator">+</span>index <span class="token punctuation">)</span>

<span class="token keyword">const</span> tab <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  tab1<span class="token operator">:</span> mockList1<span class="token punctuation">,</span>
  tab2<span class="token operator">:</span> mockList2<span class="token punctuation">,</span>
  tab3<span class="token operator">:</span> mockList3
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>active<span class="token punctuation">,</span> setActive<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">'tab1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> deferActive <span class="token operator">=</span> <span class="token function">useDeferredValue</span><span class="token punctuation">(</span>active<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">handleChangeTab</span><span class="token punctuation">(</span>activeItem<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">setActive</span><span class="token punctuation">(</span>activeItem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//立即更新</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">const</span> renderData <span class="token operator">=</span> tab<span class="token punctuation">[</span>deferActive<span class="token punctuation">]</span><span class="token comment">//滞后状态</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>tab<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token punctuation">&#123;</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>tab<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>idx<span class="token punctuation">)</span><span class="token operator">=></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>idx<span class="token punctuation">&#125;</span></span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>active <span class="token operator">===</span> item <span class="token operator">?</span> <span class="token string">'active'</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">&#125;</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token function">handleChangeTab</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>item<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>content<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token punctuation">&#123;</span>renderData<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>item<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre>
<p id=8></p>
<h2 id="hooks执行副作用">hooks执行副作用</h2>
<p id=9></p>
<h3 id="useEffect">useEffect</h3>
<p>useEffect、useLayoutEffect、useInsertionEffect弥补了函数组件没有生命周期的缺陷。其中最常用的就是 useEffect。</p>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> destory
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>dep<span class="token punctuation">)</span></code></pre>
<ol>
<li class="lvl-3">
<p>第一个参数-callbacb，返回的destory作为下一次callback执行之前调用，可以用来清除上一次callback产生的副作用，可以代替卸载组件的声明周期。</p>
</li>
<li class="lvl-3">
<p>dep是依赖项，是一个数组，可以有多个依赖项。当dep发生改变，执行上一次callback返回的destory，和执行新的effect第一个参数callback。对于 useEffect 执行， React 处理逻辑是采用异步调用 ，对于每一个 effect 的 callback， React 会向 setTimeout回调函数一样，放入任务队列，等到主线程任务完成，DOM 更新，js 执行完成，视图绘制完毕，才执行。所以 effect 回调函数不会阻塞浏览器绘制视图。</p>
</li>
</ol>
<blockquote>
<p>Demo</p>
</blockquote>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useEffect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token comment">//模仿请求数据</span>
<span class="token keyword">function</span> <span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        name<span class="token operator">:</span> <span class="token string">'name1'</span><span class="token punctuation">,</span>
        age<span class="token operator">:</span> <span class="token number">16</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  <span class="token comment">//因为useEffect第二个参数为空数组，说明这个useEffect只执行一次，相当于mouted生命周期函数</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    <span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>val<span class="token operator">=></span><span class="token punctuation">&#123;</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre>
<p>useEffect 中做的功能如下：</p>
<ol>
<li class="lvl-3">
<p>请求数据。</p>
</li>
<li class="lvl-3">
<p>设置定时器,延时器等。</p>
</li>
<li class="lvl-3">
<p>操作 dom , 在 React Native 中可以通过 ref 获取元素位置信息等内容。</p>
</li>
<li class="lvl-3">
<p>注册事件监听器, 事件绑定，在 React Native 中可以注册 NativeEventEmitter 。</p>
</li>
<li class="lvl-3">
<p>还可以清除定时器，延时器，解绑事件监听器等。</p>
</li>
</ol>
<p id=10></p>
<h3 id="useLayoutEffect">useLayoutEffect</h3>
<p>useLayoutEffect和useEffect的区别</p>
<ol>
<li class="lvl-3">
<p>useLayoutEffect是同步的，useEffect是异步的。</p>
</li>
<li class="lvl-3">
<p>useLayoutEffect是在DOM更新之后，浏览器绘制之前。useEffect是在DOM更新之后，浏览器绘制之后。所以如果要修改DOM可以在useLayoutEffect中，这样避免了在useEffect中，绘制过后再次绘制。</p>
</li>
<li class="lvl-3">
<p>useLayoutEffect callback 中代码执行会阻塞浏览器绘制。因为useLayoutEffect是在DOM结构更新后，渲染前执行，所以相当于有一个防抖效果。</p>
</li>
</ol>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"render"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">value: </span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre>
<p>上面的代码执行的顺序是：</p>
<ol>
<li class="lvl-3">
<p>点击</p>
</li>
<li class="lvl-3">
<p>虚拟DOM设置到真实DOM上</p>
</li>
<li class="lvl-3">
<p>渲染</p>
</li>
<li class="lvl-3">
<p>执行useEffect回调</p>
</li>
<li class="lvl-3">
<p>调用setVlaue更新value</p>
</li>
<li class="lvl-3">
<p>虚拟DOM设置到真实DOM上</p>
</li>
<li class="lvl-3">
<p>渲染因为在很短的时间内渲染了两次，所以导致页面会出现闪动。我们可以用useLayoutEffect改进。</p>
</li>
</ol>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useLayoutEffect<span class="token punctuation">,</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">useLayoutEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"render"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">value: </span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre>
<p>上面的代码执行的顺序是：</p>
<ol>
<li class="lvl-3">
<p>点击</p>
</li>
<li class="lvl-3">
<p>虚拟DOM设置到真实DOM上</p>
</li>
<li class="lvl-3">
<p>执行useLayoutEffect回调</p>
</li>
<li class="lvl-3">
<p>调用setVlaue更新value</p>
</li>
<li class="lvl-3">
<p>虚拟DOM设置到真实DOM上</p>
</li>
<li class="lvl-3">
<p>渲染上面的代码只渲染了一次，不会出现页面闪动。</p>
</li>
</ol>
<p id=11></p>
<h3 id="useInsertionEffect-一般不使用">useInsertionEffect(一般不使用)</h3>
<ol>
<li class="lvl-3">
<p>useInsertionEffect比useLayoutEffect和useEffect的执行都要靠前。</p>
</li>
<li class="lvl-3">
<p>useInsertionEffect执行的时候，DOM还没有更新。</p>
</li>
<li class="lvl-3">
<p>useInsertionEffect主要解决css-in-js在渲染中注入样式的性能问题。</p>
</li>
</ol>
<blockquote>
<p>Demo</p>
</blockquote>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useInsertionEffect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  <span class="token function">useInsertionEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> style <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    style<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
      .css-in-js&#123;
        color: red;
        font-size: 20px;
      &#125;
    </span><span class="token template-punctuation string">`</span></span>
    document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css-in-js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">123</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre>
<p id=12></p>
<h2 id="hooks状态获取与传递">hooks状态获取与传递</h2>
<p id=13></p>
<h3 id="useContext">useContext</h3>
<p>可以使用useContext接收父组件传过来的参数，也可以使用Context.Consumer接收父组件传过来的参数。</p>
<blockquote>
<p>Demo</p>
</blockquote>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">//App.tsx文件</span>
<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> createContext<span class="token punctuation">,</span> useContext<span class="token punctuation">,</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Children2 <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./components/children"</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> CountContext <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>num<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>count<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span> setNum<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">父组件num和count：</span><span class="token punctuation">&#123;</span>num<span class="token punctuation">&#125;</span><span class="token plain-text">,</span><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token function">setNum</span><span class="token punctuation">(</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">点击</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token function">setCount</span><span class="token punctuation">(</span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">点击</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CountContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>num<span class="token punctuation">,</span>count<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Children</span></span><span class="token punctuation">/></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Children2</span></span><span class="token punctuation">/></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">CountContext.Provider</span></span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Children</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>num<span class="token punctuation">,</span> count<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>CountContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">子组件num和count：</span><span class="token punctuation">&#123;</span>num<span class="token punctuation">&#125;</span><span class="token plain-text">,</span><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>

<span class="token comment">//子组件文件</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> CountContext <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../../App'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Children2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CountContext.Consumer</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token punctuation">&#123;</span>
      <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>num<span class="token punctuation">,</span> count<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">子组件num和count：</span><span class="token punctuation">&#123;</span>num<span class="token punctuation">&#125;</span><span class="token plain-text">,</span><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">&#125;</span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">CountContext.Consumer</span></span><span class="token punctuation">></span></span>
<span class="token punctuation">&#125;</span></code></pre>
<p id=14></p>
<h3 id="useRef">useRef</h3>
<p>useRef可以用来获取DOM元素，缓存状态，在React Native中虽然没有 DOM 元素，但是也能够获取组件的节点信息。</p>
<pre class="language-none"><code class="language-none">const cur &#x3D; React.useRef(initState)
console.log(cur.current)</code></pre>
<ol>
<li class="lvl-3">
<p>cur上有一个current就是ref对象需要获取的内容。</p>
</li>
<li class="lvl-3">
<p>initState是初始化值。</p>
</li>
</ol>
<blockquote>
<p>Demo</p>
</blockquote>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useRef <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> dom <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">click</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dom<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>dom<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">DOM</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>click<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">点击</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre>
<p>useRef 保存状态， 可以利用 useRef 返回的 ref 对象来保存状态，只要当前组件不被销毁，那么状态就会一直存在。</p>
<blockquote>
<p>Demo</p>
</blockquote>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useRef <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> dom <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">click</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    dom<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token operator">!</span>dom<span class="token punctuation">.</span>current<span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dom<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>click<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">点击</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre>
<p id=15></p>
<h3 id="useImperativeHandle">useImperativeHandle</h3>
<p>对于子组件，如果是 class 类组件，我们可以通过 ref 获取类组件的实例，但是在子组件是函数组件的情况，如果我们就需要useImperativeHandle和forwardRef配合来实现。</p>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token function">useImperativeHandle</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span>createHandle<span class="token punctuation">,</span>deps<span class="token punctuation">)</span></code></pre>
<ol>
<li class="lvl-3">
<p>第一个参数ref是接收forWardRef传过来的ref。</p>
</li>
<li class="lvl-3">
<p>第二个参数createHandle是处理函数，返回值作为暴露给父组件的 ref 对象。</p>
</li>
<li class="lvl-3">
<p>第三个参数deps是依赖项，依赖项更改形成新的 ref 对象。</p>
</li>
</ol>
<p id=16></p>
<h2 id="hooks状态派生与保存">hooks状态派生与保存</h2>
<p id=17></p>
<h3 id="useMemo">useMemo</h3>
<p>useMemo 可以在函数组件 render 上下文中同步执行一个函数逻辑，这个函数的返回值可以作为一个新的状态缓存起来。</p>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> cacheSomething <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span>create<span class="token punctuation">,</span>deps<span class="token punctuation">)</span></code></pre>
<ol>
<li class="lvl-3">
<p>create是一个函数，函数的返回值作为缓存值，缓存起来。</p>
</li>
<li class="lvl-3">
<p>deps是一个数组，存放useMemo的依赖项。再下一次函数组件执行时，对比deps依赖里面的状态，如果改变重新执行 create ，得到新的缓存值。</p>
</li>
<li class="lvl-3">
<p>cacheSomething执行create的返回值。如果deps中有依赖项改变，返回的重新执行create产生的值，否则取上一次缓存值。</p>
</li>
</ol>
<blockquote>
<p>Demo<br>
当持续点击一个按钮，只会输出“组件更新了”，当两个按钮切换着点击才会显示useMemo改变了。</p>
</blockquote>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useEffect<span class="token punctuation">,</span> useMemo<span class="token punctuation">,</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span> setNum<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'name'</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">handerClick</span><span class="token punctuation">(</span>num<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">setNum</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'name'</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> age<span class="token operator">:</span>num<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token function">handerClick</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">点击</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token function">handerClick</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">点击</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Son</span></span> <span class="token attr-name">msg</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>num<span class="token punctuation">&#125;</span></span><span class="token punctuation">/></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Son</span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token operator">:</span><span class="token punctuation">&#123;</span>msg<span class="token operator">:</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> memo <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'useMemo改变了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> props<span class="token punctuation">.</span>msg<span class="token punctuation">.</span>age<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>props<span class="token punctuation">.</span>msg<span class="token punctuation">.</span>age<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'组件更新了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span>props<span class="token punctuation">.</span>msg<span class="token punctuation">]</span><span class="token punctuation">)</span>
  
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre>
<p id=18></p>
<h3 id="useCallback">useCallback</h3>
<p>useMemo 和 useCallback 接收的参数都是一样，区别在于 useMemo 返回的是函数运行的结果，useCallback 返回的是函数。</p>
<blockquote>
<p>Demo</p>
</blockquote>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">//子组件会有不必要渲染的例子</span>
<span class="token keyword">interface</span> <span class="token class-name">ChildProps</span> <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> color<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    onClick<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> onClick<span class="token punctuation">&#125;</span><span class="token operator">:</span> ChildProps<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">JSX</span><span class="token punctuation">.</span>Element <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'子组件?'</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span><span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> color<span class="token operator">:</span> name<span class="token punctuation">.</span>color <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">我是一个子组件，父级传过来的数据：</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token function">onClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'新的子组件name'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">改变name</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> ChildMemo <span class="token operator">=</span> <span class="token function">memo</span><span class="token punctuation">(</span>Child<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">Page</span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">'Child组件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">加1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">count:</span><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ChildMemo</span></span> 
                <span class="token attr-name">name</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> color<span class="token operator">:</span> name<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token string">'red'</span> <span class="token operator">:</span> <span class="token string">'green'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span> 
                <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>newName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setName</span><span class="token punctuation">(</span>newName<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span></span>
            <span class="token punctuation">/></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>
<p id=19></p>
<h2 id="hooks工具hooks">hooks工具hooks</h2>
<p id=20></p>
<h3 id="useDebugValue">useDebugValue</h3>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useDebugValue<span class="token punctuation">,</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">useFriendStatus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>id<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">useFriendStatus</span><span class="token punctuation">(</span>friendID<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    <span class="token function">setIsOnline</span><span class="token punctuation">(</span>friendID<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span>friendID<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>isOnline<span class="token punctuation">,</span> setIsOnline<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
  <span class="token comment">// 在开发者工具中的这个 Hook 旁边显示标签</span>
  <span class="token comment">// e.g. "FriendStatus: Online"</span>
  <span class="token function">useDebugValue</span><span class="token punctuation">(</span>isOnline<span class="token operator">!==</span><span class="token number">0</span> <span class="token operator">?</span> <span class="token string">'Online'</span> <span class="token operator">:</span> <span class="token string">'Offline'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> isOnline<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre>
<p>在开发者工具中的这个hooks旁边会显示标签。<br>
<img src="/images/hooks-1.png" alt="hooks-1" loading="lazy"></p>
<p id=21></p>
<h3 id="useId">useId</h3>
<p>useId用来生成唯一id。</p>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">function</span> <span class="token function">Demo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
   <span class="token keyword">const</span> rid <span class="token operator">=</span> <span class="token function">useId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 生成稳定的 id </span>
   <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>rid<span class="token punctuation">&#125;</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token punctuation">&#125;</span></code></pre>]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
  </entry>
  <entry>
    <title>js深拷贝和浅拷贝</title>
    <url>/2022/09/28/technology/js%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="#1">js深拷贝和浅拷贝</a></p>
<ul class="lvl-0">
<li class="lvl-4"><a href="#2">浅拷贝、深拷贝</a></li>
<li class="lvl-4"><a href="#3">定义测试对象和测试数组</a></li>
<li class="lvl-4"><a href="#4">Array.concat()</a></li>
<li class="lvl-4"><a href="#5">JSON</a></li>
<li class="lvl-4"><a href="#6">扩展运算符</a></li>
<li class="lvl-4"><a href="#7">Object.assign()</a></li>
<li class="lvl-4"><a href="#8">Array.slice()</a></li>
<li class="lvl-4"><a href="#9">lodash的_.cloneDeep方法</a></li>
<li class="lvl-4"><a href="#10">手写简单的深拷贝</a></li>
<li class="lvl-4"><a href="#11">手写复杂的深拷贝</a></li>
<li class="lvl-4"><a href="#12">参考文献</a></li>
</ul>
<p id=1></p>
<h2 id="js深拷贝和浅拷贝">js深拷贝和浅拷贝</h2>
<p id=2></p>
<h3 id="浅拷贝、深拷贝">浅拷贝、深拷贝</h3>
<p>浅拷贝：进行赋值的时候，如果是引用类型，拷贝的地址值。修改旧的数据，新的数据也会跟着改变。深拷贝：将引用类型完整的拷贝一份出来，在堆内存中开辟新的区域存放新对象。修改旧的数据，新的数据不会跟着改变。</p>
<p id=3></p>
<h3 id="定义测试对象和测试数组">定义测试对象和测试数组</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'我是可枚举的基本字符串类型'</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'nam1'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token string">'我是可枚举的基本Symbol类型'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name2</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'我是可枚举的引用字符串类型中的基本字符串类型'</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span><span class="token string">'我是不可枚举的字符串基本类型'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">writeable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'age1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span><span class="token string">'我是不可枚举的字符串Symbol类型'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">writeable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">pro</span><span class="token operator">:</span><span class="token string">'我是原型上的基本类型'</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'pro1'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token string">'我是原型上的Symbol类型'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">undefined</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'111'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
<p id=4></p>
<h3 id="Array-concat">Array.concat()</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">222</span><span class="token punctuation">,</span><span class="token keyword">undefined</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> arr3 <span class="token operator">=</span> arr<span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'name'</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">222</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>arr2<span class="token punctuation">,</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><img src="/images/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/concat.png" alt="concat" loading="lazy"><br>
Array.concat只深拷贝第一层。所以说是浅拷贝。</p>
<p id=5></p>
<h3 id="JSON">JSON</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj2<span class="token punctuation">.</span>name2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"111"</span></code></pre>
<p><img src="/images/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/JSON.png" alt="JSON" loading="lazy"><br>
JSON是深拷贝，但是有缺点。缺点：不会对undefined、Symbol、function、对象中的不可枚举属性、对象原型上的属性拷贝。</p>
<p id=6></p>
<h3 id="扩展运算符">扩展运算符</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>obj<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
obj2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'111'</span>
obj2<span class="token punctuation">.</span>name2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'111'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj'</span><span class="token punctuation">,</span>obj<span class="token punctuation">,</span><span class="token string">'obj2'</span><span class="token punctuation">,</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><img src="/images/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6.png" alt="扩展运算符" loading="lazy"><br>
扩展运算符只深拷贝第一层。所以说是浅拷贝。缺点：不会拷贝对象原型上的参数、不会拷贝对象上的不可枚举参数、只会拷贝对象的第一层参数。所以说是浅拷贝。</p>
<p id=7></p>
<h3 id="Object-assign">Object.assign()</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
obj2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'111'</span><span class="token punctuation">;</span>
obj2<span class="token punctuation">.</span>name2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'111'</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj'</span><span class="token punctuation">,</span>obj<span class="token punctuation">,</span><span class="token string">'obj2'</span><span class="token punctuation">,</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><img src="/images/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/assign.png" alt="assign" loading="lazy"><br>
Object.assign()只深拷贝第一层。所以说是浅拷贝。缺点：不会拷贝对象原型上的参数、不会拷贝对象上的不可枚举参数、只会拷贝对象的第一层参数。</p>
<p id=8></p>
<h3 id="Array-slice">Array.slice()</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> arr3 <span class="token operator">=</span> arr<span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'name'</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">222</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>arr2<span class="token punctuation">,</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><img src="/images/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/slice.png" alt="slice" loading="lazy"><br>
Array.slice()只深拷贝第一层。所以说是浅拷贝。</p>
<p id=9></p>
<h3 id="lodash的-cloneDeep方法">lodash的_.cloneDeep方法</h3>
<p id=10></p>
<h3 id="手写简单的深拷贝">手写简单的深拷贝</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">'object'</span><span class="token operator">&amp;&amp;</span>target<span class="token operator">!==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> cloneTarget <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">target<span class="token punctuation">.</span>constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> target<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'[object Map]'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        target<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          cloneTarget<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">deepClone</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'[object Set]'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        target<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          cloneTarget<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">deepClone</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          cloneTarget<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">return</span> cloneTarget
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> target<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p id=11></p>
<h3 id="手写复杂的深拷贝">手写复杂的深拷贝</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">getType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">const</span> mapTag <span class="token operator">=</span> <span class="token string">'[object Map]'</span>
<span class="token keyword">const</span> setTag <span class="token operator">=</span> <span class="token string">'[object Set]'</span>
<span class="token keyword">const</span> boolTag <span class="token operator">=</span> <span class="token string">'[object Boolean]'</span>
<span class="token keyword">const</span> numberTag <span class="token operator">=</span> <span class="token string">'[object Number]'</span>
<span class="token keyword">const</span> stringTag <span class="token operator">=</span> <span class="token string">'[object String]'</span>
<span class="token keyword">const</span> symbolTag <span class="token operator">=</span> <span class="token string">'[object Symbol]'</span>
<span class="token keyword">const</span> dateTag <span class="token operator">=</span> <span class="token string">'[object Date]'</span>
<span class="token keyword">const</span> errorTag <span class="token operator">=</span> <span class="token string">'[object Error]'</span>
<span class="token keyword">const</span> regexpTag <span class="token operator">=</span> <span class="token string">'[object RegExp]'</span>
<span class="token keyword">const</span> funcTag <span class="token operator">=</span> <span class="token string">'[object Function]'</span>

<span class="token keyword">const</span> <span class="token function-variable function">handleNotTraverse</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> tag</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> Ctor <span class="token operator">=</span> target<span class="token punctuation">.</span>constructor
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>tag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> <span class="token literal-property property">boolTag</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> <span class="token literal-property property">numberTag</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token class-name">Number</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> <span class="token literal-property property">stringTag</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> <span class="token literal-property property">symbolTag</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token class-name">Symbol</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> <span class="token literal-property property">errorTag</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token literal-property property">dateTag</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Ctor</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>
    <span class="token keyword">case</span> <span class="token literal-property property">regexpTag</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token function">handleRegExp</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>
    <span class="token keyword">case</span> <span class="token literal-property property">funcTag</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token function">handleFunc</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Ctor</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> canTraverse <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token string-property property">'[object Map]'</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token string-property property">'[object Set]'</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token string-property property">'[object Array]'</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token string-property property">'[object Object]'</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token string-property property">'[object Arguments]'</span><span class="token operator">:</span><span class="token boolean">true</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//判断target是否是数组、对象、函数</span>
<span class="token keyword">const</span> <span class="token function-variable function">isObject</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span><span class="token operator">=></span>target<span class="token operator">!==</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> target<span class="token operator">===</span><span class="token string">'object'</span><span class="token operator">||</span><span class="token keyword">typeof</span> target<span class="token operator">===</span><span class="token string">'function'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">handleRegExp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> source<span class="token punctuation">,</span> flags <span class="token punctuation">&#125;</span> <span class="token operator">=</span> target
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">target<span class="token punctuation">.</span>constructor</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> flags<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> <span class="token function-variable function">handleFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 箭头函数直接返回自身</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>func<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token keyword">return</span> func
  <span class="token keyword">const</span> bodyReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;=&#123;)(.|\n)+(?=&#125;)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">m</span></span>
  <span class="token keyword">const</span> paramReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;=\().+(?=\)\s+&#123;)</span><span class="token regex-delimiter">/</span></span>
  <span class="token keyword">const</span> funcString <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 分别匹配 函数参数 和 函数体</span>
  <span class="token keyword">const</span> param <span class="token operator">=</span> paramReg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>funcString<span class="token punctuation">)</span>
  <span class="token keyword">const</span> body <span class="token operator">=</span> bodyReg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>funcString<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>body<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> paramArr <span class="token operator">=</span> param<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token operator">...</span>paramArr<span class="token punctuation">,</span> body<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span>body<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//深拷贝</span>
<span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> target<span class="token punctuation">;</span>
  <span class="token keyword">let</span> type <span class="token operator">=</span> <span class="token function">getType</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> cloneTarget <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>canTraverse<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//不可遍历的类型</span>
    <span class="token keyword">return</span> <span class="token function">handleNotTraverse</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//可遍历的类型</span>
    <span class="token keyword">let</span> ctor <span class="token operator">=</span> target<span class="token punctuation">.</span>constructor<span class="token punctuation">;</span>
    cloneTarget <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> cloneTarget<span class="token punctuation">)</span>

  <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">===</span> mapTag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//处理Map</span>
    target<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      cloneTarget<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">deepClone</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>map<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">deepClone</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">===</span> setTag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//处理Set</span>
    target<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      cloneTarget<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">deepClone</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 处理数组和对象</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> prop <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      cloneTarget<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> cloneTarget<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p id=12></p>
<h3 id="参考文献">参考文献</h3>
<p>[1]<a href="https://github.com/lodash/lodash/blob/master/cloneDeep.js">lodash</a></p>
<p>[2]<a href="https://juejin.cn/post/6844903929705136141">如何写出一个惊艳面试官的深拷贝?</a></p>
<p>[3]<a href="https://www.zhangbaolin.cn/docs/js/%E6%89%8B%E5%86%99/%E6%B7%B1%E6%8B%B7%E8%B4%9D/">深拷贝</a></p>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
  </entry>
  <entry>
    <title>Redux、Redux Toolkit</title>
    <url>/2022/09/08/technology/redux/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="#1">Redux、Redux Toolkit</a></p>
<ul class="lvl-0">
<li class="lvl-4"><a href="#2">Redux</a>
<ul class="lvl-2">
<li class="lvl-6"><a href="#3">Redux的介绍</a></li>
<li class="lvl-6"><a href="#4">Redux代码</a></li>
<li class="lvl-6"><a href="#5">Redux中actions的问题</a></li>
<li class="lvl-6"><a href="#6">Redux中的不可变性</a></li>
<li class="lvl-6"><a href="#7">redux-actions</a></li>
<li class="lvl-6"><a href="#8">Redux中间件及异步操作</a></li>
</ul>
</li>
<li class="lvl-4"><a href="#9">Redux Toolkit</a>
<ul class="lvl-2">
<li class="lvl-6"><a href="#10">安装扩展</a></li>
<li class="lvl-6"><a href="#11">store创建</a></li>
<li class="lvl-6"><a href="#12">创建reducers</a></li>
<li class="lvl-6"><a href="#13">绑定state</a></li>
<li class="lvl-6"><a href="#14">获取state数据</a></li>
<li class="lvl-6"><a href="#15">dispatch</a></li>
<li class="lvl-6"><a href="#16">reducer中的prepare</a></li>
<li class="lvl-6"><a href="#17">createAsynThunk异步调用</a></li>
</ul>
</li>
</ul>
<p id=1></p>
<h2 id="Redux、Redux-Toolkit">Redux、Redux Toolkit</h2>
<p id=2></p>
<h3 id="Redux">Redux</h3>
<p>React中的问题：在React中，整个React没有数据向上回溯的能力，这就是React的单向数据流。这意味着如果一个数据状态复杂的应用，React可能根本无法让两个组件互相传递数据。<br>
React问题解决：Redux就是把所有的state集中到组件顶部，能够灵活的将所有state中的各种数据分发给所有组件。</p>
<p id=3></p>
<h4 id="Redux的介绍">Redux的介绍</h4>
<ol>
<li class="lvl-3">
<p>Redux给React应用提供可预测的状态管理机制。</p>
</li>
<li class="lvl-3">
<p>Redux将数据存储到store里面。</p>
</li>
<li class="lvl-3">
<p>store里面保存了一棵状态树state tree</p>
</li>
<li class="lvl-3">
<p>如果组件里面想要改变state，只能通过调用store的dispatch方法，触发一个action，这个action被对应的reducer处理，于是state完成更新。</p>
</li>
<li class="lvl-3">
<p>组件调用store的dispatch给store，而不是直接通知其他组件。</p>
</li>
<li class="lvl-3">
<p>其他组件可以通过订阅store的state，当state改变后更新自己的视图。</p>
</li>
</ol>
<p id=4></p>
<h4 id="Redux代码">Redux代码</h4>
<p>我们以下代码在React+TypeScrtip脚手架中执行。可以通过下面的命令创建脚手架</p>
<pre class="language-none"><code class="language-none">npx create-react-app jira --template typescript</code></pre>
<blockquote>
<p>src/store/index.ts文件中写如下代码创建全局的state</p>
</blockquote>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//npm i redux 安装redux</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createStore <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'redux'</span> <span class="token comment">//引入</span>
<span class="token keyword">type</span> <span class="token class-name">Type</span> <span class="token operator">=</span> <span class="token string">'Add'</span> <span class="token operator">|</span> <span class="token string">'Sub'</span><span class="token punctuation">;</span>
<span class="token comment">//创建reducers</span>
<span class="token keyword">const</span> <span class="token function-variable function">reducers</span> <span class="token operator">=</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>count<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> action<span class="token operator">:</span><span class="token punctuation">&#123;</span>type<span class="token operator">:</span> Type<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> <span class="token string">'Add'</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>count<span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">'Sub'</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>count<span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//创建actions</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> actions<span class="token operator">:</span><span class="token punctuation">&#123;</span>
  <span class="token function-variable function">add</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>type<span class="token operator">:</span><span class="token string">'Add'</span><span class="token punctuation">&#125;</span>
  <span class="token function-variable function">sub</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>type<span class="token operator">:</span><span class="token string">'Sub'</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>type<span class="token operator">:</span> <span class="token string">'Add'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function-variable function">sub</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>type<span class="token operator">:</span> <span class="token string">'Sub'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//创建store</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducers<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<blockquote>
<p>APP.tsx文件中执行如下代码 控制台输出结果是{count: 1}</p>
</blockquote>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> store<span class="token punctuation">,</span> actions <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token punctuation">;</span><span class="token comment">//引入store和actios</span>
<span class="token comment">//使用store中的dispatch触发actions，让actions被对应的reducer调用</span>
store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>actions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//调用getState方法获取state的值</span></code></pre>
<p>说明我们已经改变了全局store里面的值，并获取到了改变后的值。</p>
<p id=5></p>
<h4 id="Redux中actions的问题">Redux中actions的问题</h4>
<p>我们看过上面的代码会发现，如果我们不写actions对象，直接调用store.dispatch({type: ‘Add’});也会得到同样的效果，但是这样就使代码的维护更加复杂。<br>
Redux中的流程图如下图所示<br>
<img src="/images/Redux/1.png" alt="Redux流程图" loading="lazy"></p>
<p id=6></p>
<h4 id="Redux中的不可变性">Redux中的不可变性</h4>
<p>什么是不可变性呢？我们看以下的例子。我创建一个对象和数组，我可以通过访问对象和数组来改变其中的值。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span>
obj<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">3</span><span class="token comment">//对象仍然还是那个对象，但它的内容已经变了</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span>
arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'d'</span><span class="token comment">//数组仍然还是那个数组，但它的内容已经变了</span></code></pre>
<p>这是数组和对象的可变性。但是在Redux中我们要求不可变性。我们就需要先复制原来的对象or数组，然后更新复制体。这里又涉及到了浅拷贝和深拷贝。浅拷贝就是拷贝了地址值，让拷贝体指向本体的地址，这样拷贝体仍然是本体。显然我们要使用的是深拷贝。我们可以使用js中的展开运算符，和数组的concat方法或slice方法。</p>
<ol>
<li class="lvl-3">
<p>对于js中的展开运算符只是深拷贝了对象或数组的第一层，所以如果我们想要修改深层的对象，我们需要对每一层都使用展开运算符。</p>
</li>
<li class="lvl-3">
<p>concat是深拷贝数组。</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 为了安全的更新 obj.a.c，需要先复制一份</span>
    <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// obj 的备份</span>
  <span class="token operator">...</span>obj<span class="token punctuation">,</span>
  <span class="token comment">// 覆盖 a</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// obj.a 的备份</span>
    <span class="token operator">...</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">,</span>
    <span class="token comment">// 覆盖 c</span>
    <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">42</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr3 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
arr3<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span></code></pre>
<p id=7></p>
<h4 id="redux-actions">redux-actions</h4>
<pre class="language-none"><code class="language-none">npm i redux-actions</code></pre>
<p>redux-actions让Redux状态管理更加简单，该库提供的createAction方法用于创建actions</p>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createAction <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"redux-actions"</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">INCREMENT</span> <span class="token operator">=</span> <span class="token string">'INCREMENT'</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> increment <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span><span class="token constant">INCREMENT</span><span class="token punctuation">)</span>
<span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//&#123; type: 'INCREMENT' &#125;</span>
<span class="token function">increment</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">//&#123; type: 'INCREMENT', payload: 10 &#125;</span></code></pre>
<blockquote>
<p>使用redux-actions修改src/store/index.ts文件代码</p>
</blockquote>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createStore <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'redux'</span> <span class="token comment">//引入</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ActionFunctionAny<span class="token punctuation">,</span> createAction <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'redux-actions'</span>
<span class="token comment">//创建reducers</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">IAction</span><span class="token punctuation">&#123;</span>
  type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>index<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token builtin">any</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">IInitCountState</span><span class="token punctuation">&#123;</span>
  count<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> reducers <span class="token operator">=</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>count<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> action<span class="token operator">:</span>IAction<span class="token punctuation">)</span><span class="token operator">:</span>IInitCountState <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> <span class="token string">'Add'</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>count<span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">'Sub'</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>count<span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span> 
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>count<span class="token operator">:</span> state<span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//创建actions</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> Add <span class="token operator">=</span> <span class="token string">'Add'</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> add<span class="token operator">:</span>ActionFunctionAny<span class="token operator">&lt;</span><span class="token punctuation">&#123;</span>type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span>Add<span class="token punctuation">)</span>
<span class="token comment">//创建store</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducers<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<blockquote>
<p>使用redux-actions修改APP.tsx文件中的代码 控制台输出结果是{count: 1}</p>
</blockquote>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> store<span class="token punctuation">,</span> add <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token punctuation">;</span><span class="token comment">//引入store和actios</span>
<span class="token comment">//使用store中的dispatch触发actions，让actions被对应的reducer调用</span>
store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//调用getState方法获取state的值</span></code></pre>
<p id=8></p>
<h4 id="Redux中间件及异步操作">Redux中间件及异步操作</h4>
<ol>
<li class="lvl-3">
<p>对于redux而言，同步就是当视图发出action后，reducer立即计算出state，异步是指当action发出后，需要等待结果计算完成，也就是一段时间再执行reducer。</p>
</li>
<li class="lvl-3">
<p>同步通常再原生的redux工作流程中，而大多数场景更多需要异步操作，例如ajax请求后拿到数据后再进入reducer执行计算并对state进行更新。</p>
</li>
<li class="lvl-3">
<p>Redux显然是不支持异步操作的，这就要用到中间件来处理这种业务了。中间件就是对store.dispatch方法进行拓展。我们可以使用redux-logger来查看dispatch改变状态时打印出来的旧状态、当前触发的action和新状态。也可以使用redux-saga来调用异步接口</p>
</li>
</ol>
<blockquote>
<p>使用redux-actions修改src/store/index.ts文件代码</p>
</blockquote>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createStore<span class="token punctuation">,</span> applyMiddleware <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'redux'</span> <span class="token comment">//引入</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ActionFunctionAny<span class="token punctuation">,</span> createAction <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'redux-actions'</span>
<span class="token keyword">import</span> logger  <span class="token keyword">from</span> <span class="token string">'redux-logger'</span>
<span class="token keyword">import</span> createSagaMiddleware <span class="token keyword">from</span> <span class="token string">'redux-saga'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> sagaMiddleware <span class="token operator">=</span> <span class="token function">createSagaMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用异步接口</span>
<span class="token comment">//创建reducers</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">IAction</span><span class="token punctuation">&#123;</span>
  type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>index<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token builtin">any</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">IInitCountState</span><span class="token punctuation">&#123;</span>
  count<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> reducers <span class="token operator">=</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>count<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> action<span class="token operator">:</span>IAction<span class="token punctuation">)</span><span class="token operator">:</span>IInitCountState <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> <span class="token string">'Add'</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>count<span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">'Sub'</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>count<span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span> 
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>count<span class="token operator">:</span> state<span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//创建actions</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> Add <span class="token operator">=</span> <span class="token string">'Add'</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> add<span class="token operator">:</span>ActionFunctionAny<span class="token operator">&lt;</span><span class="token punctuation">&#123;</span>type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span>Add<span class="token punctuation">)</span>
<span class="token keyword">let</span> middleware <span class="token operator">=</span> <span class="token punctuation">[</span>logger<span class="token punctuation">,</span> sagaMiddleware<span class="token punctuation">]</span>
<span class="token comment">//创建store</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>
  reducers<span class="token punctuation">,</span>
  <span class="token function">applyMiddleware</span><span class="token punctuation">(</span><span class="token operator">...</span>middleware<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>redux-logger在控制台输出如下：<br>
<img src="/images/Redux/2.png" alt="redux-logger在控制台的输出" loading="lazy"></p>
<p id=9></p>
<h3 id="Redux-Toolkit">Redux Toolkit</h3>
<p>Redux Toolkit是Redux官方推荐的编写Redux逻辑的方法。学习Redux Toolkit推荐到<a href="https://cn.redux.js.org/">Redux官网</a>看官网的教程</p>
<p id=10></p>
<h4 id="安装扩展">安装扩展</h4>
<ol>
<li class="lvl-3">
<p>React DevTools</p>
</li>
<li class="lvl-3">
<p>Redux DevTools Extension<br>
可以在<a href="https://www.extfans.com/">extfans</a>上搜索对应的扩展。</p>
</li>
</ol>
<p id=11></p>
<h4 id="store创建">store创建</h4>
<blockquote>
<p>store/index.js</p>
</blockquote>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> configureStore <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@reduxjs/toolkit'</span><span class="token comment">//引入toolkit</span>
<span class="token keyword">import</span> postsReducer <span class="token keyword">from</span> <span class="token string">'../features/posts/postSlice'</span><span class="token comment">//引入的reducer函数，在下面会介绍到</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">configureStore</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  reducer<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    posts<span class="token operator">:</span> postsReducer
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>
<p>我们可以通过Redux DevTools Extension来查看state的结构<br>
<img src="/images/Redux/" alt="store结构" loading="lazy"></p>
<p id=12></p>
<h4 id="创建reducers">创建reducers</h4>
<blockquote>
<p>features/posts/postSlice.js</p>
</blockquote>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createSlice <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@reduxjs/toolkit'</span>
<span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  posts<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">'First Post!'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">'Second Post'</span> <span class="token punctuation">&#125;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  status<span class="token operator">:</span> <span class="token string">'idle'</span><span class="token punctuation">,</span>
  error<span class="token operator">:</span> <span class="token keyword">null</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> postsSlice <span class="token operator">=</span> <span class="token function">createSlice</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">'posts'</span><span class="token punctuation">,</span>
  initialState<span class="token punctuation">,</span>
  reducers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token function">postAdded</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      state<span class="token punctuation">.</span>posts<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> title<span class="token operator">:</span> action<span class="token punctuation">.</span>payload <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> postsSlice<span class="token punctuation">.</span>reducer</code></pre>
<p id=13></p>
<h4 id="绑定state">绑定state</h4>
<blockquote>
<p>index.tsx<br>
使用Provider标签将store绑定到全局</p>
</blockquote>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span>
<span class="token keyword">import</span> <span class="token string">'./index.css'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> App <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./App'</span>
<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./app/store'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Provider <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span>
<span class="token comment">// Wrap app rendering so we can wait for the mock API to initialize</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">React.StrictMode</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Provider</span></span> <span class="token attr-name">store</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>store<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Provider</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">React.StrictMode</span></span><span class="token punctuation">></span></span><span class="token punctuation">,</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p id=14></p>
<h4 id="获取state数据">获取state数据</h4>
<blockquote>
<p>App.js</p>
</blockquote>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useSelector <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react-redux"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span>state <span class="token operator">=></span> state<span class="token punctuation">.</span>posts<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>posts<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token punctuation">&#125;</span></code></pre>
<p>控制台可以看到输出的结果<br>
<img src="/images/Redux/4.png" alt="state获取结果" loading="lazy"></p>
<p id=15></p>
<h4 id="dispatch">dispatch</h4>
<blockquote>
<p>App.js</p>
</blockquote>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useDispatch<span class="token punctuation">,</span> useSelector <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react-redux"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> postAdded <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./features/posts/postSlice"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> dispatch <span class="token operator">=</span> <span class="token function">useDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span>state <span class="token operator">=></span> state<span class="token punctuation">.</span>posts<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">postAdded</span><span class="token punctuation">(</span><span class="token string">'three'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>posts<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>add<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">+</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token punctuation">&#125;</span></code></pre>
<p>当我们点击“+”的时候，Redux DevTools Extension左侧会输出<strong>posts/postAdded</strong>，右侧的state树会变化。<br>
<img src="/images/Redux/5.png" alt="dispatch" loading="lazy"></p>
<p id=16></p>
<h4 id="reducer中的prepare">reducer中的prepare</h4>
<p>我们可以使用prepare来接收参数，将参数转换成一定形式再传递给reducer对应的函数。我们可以将features/posts/postSlice.js使用prepare来修改。</p>
<blockquote>
<p>features/posts/postSlice.js</p>
</blockquote>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createSlice <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@reduxjs/toolkit'</span>
<span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  posts<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">'First Post!'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">'Second Post'</span> <span class="token punctuation">&#125;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  status<span class="token operator">:</span> <span class="token string">'idle'</span><span class="token punctuation">,</span>
  error<span class="token operator">:</span> <span class="token keyword">null</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> postsSlice <span class="token operator">=</span> <span class="token function">createSlice</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">'posts'</span><span class="token punctuation">,</span>
  initialState<span class="token punctuation">,</span>
  reducers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    postAdded<span class="token operator">:</span><span class="token punctuation">&#123;</span>
      <span class="token function">reducer</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        state<span class="token punctuation">.</span>posts<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>payload<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token function">prepare</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
          payload<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            title<span class="token punctuation">,</span>
            content<span class="token operator">:</span> <span class="token string">'我是内容'</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> postAdded <span class="token punctuation">&#125;</span> <span class="token operator">=</span> postsSlice<span class="token punctuation">.</span>actions
<span class="token keyword">export</span> <span class="token keyword">default</span> postsSlice<span class="token punctuation">.</span>reducer</code></pre>
<p id=17></p>
<h4 id="createAsynThunk异步调用">createAsynThunk异步调用</h4>
<blockquote>
<p>features/posts/postSlice.js</p>
</blockquote>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createSlice<span class="token punctuation">,</span> createAsyncThunk <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@reduxjs/toolkit'</span>
<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span>
<span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  posts<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">'First Post!'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">'Second Post'</span> <span class="token punctuation">&#125;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  status<span class="token operator">:</span> <span class="token string">'idle'</span><span class="token punctuation">,</span>
  error<span class="token operator">:</span> <span class="token keyword">null</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> fetchPosts <span class="token operator">=</span> <span class="token function">createAsyncThunk</span><span class="token punctuation">(</span><span class="token string">'posts/fetchPosts'</span><span class="token punctuation">,</span><span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  <span class="token comment">//这里写axios请求</span>
  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    url<span class="token operator">:</span> <span class="token string">'https://github.com/search?q=1514-blog'</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> response<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> postsSlice <span class="token operator">=</span> <span class="token function">createSlice</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">'posts'</span><span class="token punctuation">,</span>
  initialState<span class="token punctuation">,</span>
  reducers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    postAdded<span class="token operator">:</span><span class="token punctuation">&#123;</span>
      <span class="token function">reducer</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        state<span class="token punctuation">.</span>posts<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>payload<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token function">prepare</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
          payload<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            title<span class="token punctuation">,</span>
            content<span class="token operator">:</span> <span class="token string">'我是内容'</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">extraReducers</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    builder
    <span class="token punctuation">.</span><span class="token function">addCase</span><span class="token punctuation">(</span>fetchPosts<span class="token punctuation">.</span>pending<span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'loading'</span><span class="token punctuation">,</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>
      state<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">'loading'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">addCase</span><span class="token punctuation">(</span>fetchPosts<span class="token punctuation">.</span>fulfilled<span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'succeeded'</span><span class="token punctuation">,</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>
      state<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">'succeeded'</span><span class="token punctuation">;</span>
      state<span class="token punctuation">.</span>posts <span class="token operator">=</span> state<span class="token punctuation">.</span>posts<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">addCase</span><span class="token punctuation">(</span>fetchPosts<span class="token punctuation">.</span>rejected<span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'failed'</span><span class="token punctuation">,</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>
      state<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">'failed'</span><span class="token punctuation">;</span>
      state<span class="token punctuation">.</span>error <span class="token operator">=</span> action<span class="token punctuation">.</span>error<span class="token punctuation">.</span>message<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> postAdded <span class="token punctuation">&#125;</span> <span class="token operator">=</span> postsSlice<span class="token punctuation">.</span>actions
<span class="token keyword">export</span> <span class="token keyword">default</span> postsSlice<span class="token punctuation">.</span>reducer</code></pre>
<blockquote>
<p>App.js</p>
</blockquote>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useDispatch<span class="token punctuation">,</span> useSelector <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react-redux"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> postAdded<span class="token punctuation">,</span> fetchPosts <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./features/posts/postSlice"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> dispatch <span class="token operator">=</span> <span class="token function">useDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span>state <span class="token operator">=></span> state<span class="token punctuation">.</span>posts<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">postAdded</span><span class="token punctuation">(</span><span class="token string">'three'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">fetchPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>posts<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>add<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">+</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token punctuation">&#125;</span></code></pre>
<p>其中extraReducers还有另一种写法</p>
<blockquote>
<p>features/posts/postSlice.js</p>
</blockquote>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createSlice<span class="token punctuation">,</span> createAsyncThunk <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@reduxjs/toolkit'</span>
<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span>
<span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  posts<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">'First Post!'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">'Second Post'</span> <span class="token punctuation">&#125;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  status<span class="token operator">:</span> <span class="token string">'idle'</span><span class="token punctuation">,</span>
  error<span class="token operator">:</span> <span class="token keyword">null</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> fetchPosts <span class="token operator">=</span> <span class="token function">createAsyncThunk</span><span class="token punctuation">(</span><span class="token string">'posts/fetchPosts'</span><span class="token punctuation">,</span><span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  <span class="token comment">//这里写axios请求</span>
  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    url<span class="token operator">:</span> <span class="token string">'https://github.com/search?q=1514-blog'</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> response<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> postsSlice <span class="token operator">=</span> <span class="token function">createSlice</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">'posts'</span><span class="token punctuation">,</span>
  initialState<span class="token punctuation">,</span>
  reducers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    postAdded<span class="token operator">:</span><span class="token punctuation">&#123;</span>
      <span class="token function">reducer</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        state<span class="token punctuation">.</span>posts<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>payload<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token function">prepare</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
          payload<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            title<span class="token punctuation">,</span>
            content<span class="token operator">:</span> <span class="token string">'我是内容'</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  extraReducers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">[</span>fetchPosts<span class="token punctuation">.</span>pending<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'loading'</span><span class="token punctuation">,</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>
      state<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">'loading'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>fetchPosts<span class="token punctuation">.</span>fulfilled<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'succeeded'</span><span class="token punctuation">,</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>
      state<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">'succeeded'</span><span class="token punctuation">;</span>
      state<span class="token punctuation">.</span>posts <span class="token operator">=</span> state<span class="token punctuation">.</span>posts<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>fetchPosts<span class="token punctuation">.</span>rejected<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'failed'</span><span class="token punctuation">,</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>
      state<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">'failed'</span><span class="token punctuation">;</span>
      state<span class="token punctuation">.</span>error <span class="token operator">=</span> action<span class="token punctuation">.</span>error<span class="token punctuation">.</span>message<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> postAdded <span class="token punctuation">&#125;</span> <span class="token operator">=</span> postsSlice<span class="token punctuation">.</span>actions
<span class="token keyword">export</span> <span class="token keyword">default</span> postsSlice<span class="token punctuation">.</span>reducer</code></pre>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
  </entry>
  <entry>
    <title>遍历对象的方法</title>
    <url>/2022/08/30/technology/%E5%AF%B9%E8%B1%A1%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="#1">遍历对象的方法</a></p>
<ul class="lvl-0">
<li class="lvl-2"><a href="#2">1. 创建带有不同种类参数的对象</a></li>
<li class="lvl-2"><a href="#3">2. Object.keys()/Ojbect.values()/Object.entries()</a></li>
<li class="lvl-2"><a href="#4">3. Object.getOwnPropertyNames()</a></li>
<li class="lvl-2"><a href="#5">4. Object.getOwnPropertySymbols()</a></li>
<li class="lvl-2"><a href="#6">5. Reflect.ownKeys(obj)</a></li>
<li class="lvl-2"><a href="#7">6. for…in</a></li>
</ul>
<p id=1></p>
<p>对对象中的key值进行遍历对象中的属性分为两种类型，字符串和Symbol。如果我们使用除字符串和Symbol之外的类型最后都会变成字符串。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> objProp <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">[</span>objProp<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">'obj'</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123; '[object Object]': 'obj' &#125;</span></code></pre>
<p id=2></p>
<ol>
<li class="lvl-3">
<p>创建带有不同种类参数的对象</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">str</span><span class="token operator">:</span> <span class="token string">'str-value'</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">'Symbol()-value'</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// defineProperty方法可以直接再一个对象上定义一个新的属性，或者修改一个对象的现有属性，并返回此对象。</span>
<span class="token comment">//定义一个不可枚举属性</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'unenum'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'不可枚举unenum'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">writeable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//是否可以被赋值运算符改变</span>
  <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//是否出现在枚举属性中</span>
  <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token comment">//是否可以改变和删除</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token comment">//定义一个不可枚举属性</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'unenum'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'不可枚举Symbol("unenum")-value'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">writeable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token comment">//在对象的原型上添加属性</span>
Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">'原型bar-value'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">'原型Symbol("foo")-value'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>
<p>上述代码输入obj为：<br>
<img src="/images/Interview-index-1.png" alt="Interview-index-1" loading="lazy">;</p>
<p id=3></p>
<ol start="2">
<li class="lvl-3">
<p>Object.keys()/Ojbect.values()/Object.entries()<br>
这三种方法都只能访问对象上的属性的集合。但是只处理obj自身的可枚举字符串属性。<br>
Object.keys()获取key值，Ojbect.values()获取value值，Object.entries()获取key-value值。</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[ 'str' ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[ 'str-value' ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[ [ 'str', 'str-value' ] ]</span></code></pre>
<p id=4></p>
<ol start="3">
<li class="lvl-3">
<p>Object.getOwnPropertyNames()<br>
可以获取对象自身的属性集合，可以处理自身的所有字符串属性的key值，包括不可枚举的，但不能处理Symbol属性和原型上面的属性。</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[ 'str', 'unenum' ]</span></code></pre>
<p id=5></p>
<ol start="4">
<li class="lvl-3">
<p>Object.getOwnPropertySymbols()<br>
可以获取对象自身的属性集合，可以处理自身的所有Symbol属性的key值，包括不可枚举的，但不能处理字符串属性和原型上面的属性。</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[ Symbol(), Symbol(unenum) ]</span></code></pre>
<p id=6></p>
<ol start="5">
<li class="lvl-3">
<p>Reflect.ownKeys(obj)<br>
可以看作Object.getOwnPropertyNames()+Object.getOwnPropertySymbols()，返回所有自身的字符串属性和Symbol属性的key值，包括不可枚举的，但不能返回原型上面的属性。</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[ 'str', 'unenum', Symbol(), Symbol(unenum) ]</span></code></pre>
<p id=7></p>
<ol start="6">
<li class="lvl-3">
<p>for…in<br>
返回自身及其原型链上的所有可枚举的字符串属性的key值，不包括不可枚举的和Symbol属性的key值。</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> prop <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//str -> foo</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>for…in和hasOwnProperty一起用就可以实现Object.keys()/Ojbect.values()/Object.entries()<br>
hasOwnProperty是判断对象自身是否有指定的属性，也就是指定的key值。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> prop <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//&#123; key: 'str', value: 'str-value', pair: [ 'str', 'str-value' ] &#125;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">key</span><span class="token operator">:</span> prop<span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">pair</span><span class="token operator">:</span> <span class="token punctuation">[</span>prop<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
  </entry>
  <entry>
    <title>js执行上下文</title>
    <url>/2022/09/17/technology/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="#1">js执行上下文</a></p>
<ul class="lvl-0">
<li class="lvl-4"><a href="#2">4种情况会创建新的执行上下文</a></li>
<li class="lvl-4"><a href="#3">全局对象和全局scope</a></li>
<li class="lvl-4"><a href="#4">代码执行流程</a></li>
<li class="lvl-4"><a href="#5">块中的函数声明</a></li>
<li class="lvl-4"><a href="#6">块中的代码执行流程</a></li>
<li class="lvl-4"><a href="#7">解释一下函数名和var名冲突</a></li>
</ul>
<p id=1><p>
<h2 id="js执行上下文">js执行上下文</h2>
<p id=2><p>
<h3 id="4种情况会创建新的执行上下文">4种情况会创建新的执行上下文</h3>
<ol>
<li class="lvl-3">
<p>进入全局代码</p>
</li>
<li class="lvl-3">
<p>进入function 函数体代码</p>
</li>
<li class="lvl-3">
<p>进入eval函数参数指定的代码</p>
</li>
<li class="lvl-3">
<p>进入module代码</p>
</li>
</ol>
<p id=3><p>
<h3 id="全局对象和全局scope">全局对象和全局scope</h3>
<p>全局声明的变量有两个存储地方，一个是全局对象中，一个是全局scope中。<br>
var和function声明的变量会储存在全局对象中，而let和scope声明的变量会储存在全局的scope中。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> c<span class="token operator">=</span><span class="token number">1</span>
<span class="token keyword">const</span> d<span class="token operator">=</span><span class="token number">1</span></code></pre>
<p><img src="/images/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/1.png" alt="全局对象和全局scope" loading="lazy"><br>
定义在全局scope中的变量，我们是无法使用window.变量名获取到值的。注意，函数的文本环境只有它自身的scope没有全局对象。</p>
<p id=4><p>
<h3 id="代码执行流程">代码执行流程</h3>
<ol>
<li class="lvl-3">
<p>Step1	创建全局执行上下文，并加入栈顶</p>
</li>
<li class="lvl-3">
<p>Step2	分析</p>
<ol>
<li class="lvl-7">找到所有的非函数中的var声明</li>
<li class="lvl-7">找到所有的顶级函数声明（不在大括号内的函数声明）</li>
<li class="lvl-7">找到顶级let，const，class声明</li>
<li class="lvl-7">找到块中的声明，函数名不与上述重复</li>
</ol>
</li>
<li class="lvl-3">
<p>Step3	名字重复</p>
<ol>
<li class="lvl-7">let，const，class声明的名字之间不能重发
<ul class="lvl-4">
<li class="lvl-10">let声明的变量名不能重复</li>
<li class="lvl-10">const声明的变量名不能重复</li>
<li class="lvl-10">let和const声明的变量名不能重复</li>
</ul>
</li>
<li class="lvl-7">let，const，class和var，function的名字不能重复
<ul class="lvl-4">
<li class="lvl-10">let和var、function声明的变量名不能重复</li>
<li class="lvl-10">const和var、function声明的变量名不能重复</li>
</ul>
</li>
<li class="lvl-7">var和function名字重复的,function声明的函数名变量提升优先于var,所以在声明前输出会打印函数,在声明后输出会打印var。</li>
</ol>
</li>
<li class="lvl-3">
<p>Step4	创建绑定</p>
<ol>
<li class="lvl-7">找到并初始化var和undefined</li>
<li class="lvl-7">顶级函数声明：找到function名字，并初始化为新创建函数对象</li>
<li class="lvl-7">块级中函数声明：找到名字，初始化为undefined</li>
<li class="lvl-7">找到let，const，class，但未初始化</li>
</ol>
</li>
</ol>
<p id=5><p>
<h3 id="块中的函数声明">块中的函数声明</h3>
<ol>
<li class="lvl-3">
<p>Step2  分析</p>
<ol>
<li class="lvl-7">找到块中的函数声明</li>
</ol>
</li>
<li class="lvl-3">
<p>Step3  名字重复</p>
<ol>
<li class="lvl-7">如果和找到的非函数的var声明、顶级函数声明、顶级let声明、顶级const声明、顶级class声明的名称重复，则不做任何处理。</li>
<li class="lvl-7">如果不重复则在（如果是windown作用域则在全局对象，如果是函数作用域则在函数的scope）上创建一个以函数名为名的变量并初始化为undefined。</li>
</ol>
</li>
<li class="lvl-3">
<p>Step4</p>
<ol>
<li class="lvl-7">创建一个块的文本环境，将其连接到原来的文本环境中去。然后执行块中的流程</li>
</ol>
</li>
</ol>
<p id=6><p>
<h3 id="块中的代码执行流程">块中的代码执行流程</h3>
<p>块中的代码执行流程和全局的基本一样，就在块中代码执行完后有不同的情况。</p>
<ol>
<li class="lvl-3">
<p>Step5  退出块</p>
<ol>
<li class="lvl-7">如果有函数作用域连接到了块的文本环境，则去全局对象中查看是否有同名的变量，如果有则将块中的变量赋值给全局。如果没有则不做任何处理。</li>
</ol>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'函数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span></code></pre>
<p id=7><p>
<h3 id="解释一下函数名和var名冲突">解释一下函数名和var名冲突</h3>
<p>我们在上面说了。</p>
<pre class="language-none"><code class="language-none">var和function名字重复的,function声明的函数名变量提升优先于var,所以在声明前输出会打印函数,在声明后输出会打印var。</code></pre>
<p>我们看下面的代码：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//f a()&#123;&#125;</span>
<span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span></code></pre>
<p>因为函数和var重名，函数变量提升优先于var所以第一次输出a返回函数。第二次输出a由于var变量提升在var之后，所以，var在函数之后将函数覆盖，最后输出1。</p>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
  </entry>
  <entry>
    <title>数组扁平化</title>
    <url>/2022/09/18/technology/%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="数组扁平化">数组扁平化</h2>
<h3 id="flat">flat()</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[ 1, 2, 3 ]</span></code></pre>
<h3 id="JSON、replace-、split">JSON、replace()、split</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\[|\])</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[ '1', '2', '3', '21' ]</span></code></pre>
<h4 id="JSON、replace">JSON、replace</h4>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'['</span><span class="token operator">+</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\[|\])</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">']'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[ 1, 2, 3, 21 ]</span></code></pre>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
  </entry>
  <entry>
    <title>深浅拷贝（讲课版）</title>
    <url>/2022/10/31/technology/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D(%E8%AE%B2%E8%AF%BE%E7%89%88)/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="深浅拷贝">深浅拷贝</h2>
<h3 id="赋值、深拷贝和浅拷贝">赋值、深拷贝和浅拷贝</h3>
<p><strong>赋值：</strong></p>
<ol>
<li class="lvl-3">
<p>基本类型赋值：赋值后两个变量互不影响</p>
</li>
<li class="lvl-3">
<p>引用类型赋值：赋值后两个变量具有相同的引用，指向同一个对象，互相影响。</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>

<span class="token keyword">var</span> obja <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> objb <span class="token operator">=</span> obja<span class="token punctuation">;</span></code></pre>
<p><img src="/images/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E8%AE%B2%E8%AF%BE%E7%89%88/%E8%B5%8B%E5%80%BC.png" alt="" loading="lazy"></p>
<p><strong>浅拷贝：</strong><br>
浅拷贝基本类型和赋值一样，浅拷贝引用类型的时候创建了一个新的对象，是对原始对象属性值的一份拷贝。如果属性是基本类型就拷贝类型值，如果是引用类型就拷贝地址值。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obja <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//objb浅拷贝obja</span></code></pre>
<p><img src="/images/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E8%AE%B2%E8%AF%BE%E7%89%88/%E6%B5%85%E6%8B%B7%E8%B4%9D.png" alt="" loading="lazy"></p>
<p><strong>深拷贝：</strong><br>
深拷贝会拷贝所有的属性，并且拷贝属性指向的动态分配的内存。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obja <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'1'</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//objb深拷贝obja</span></code></pre>
<p><img src="/images/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E8%AE%B2%E8%AF%BE%E7%89%88/%E6%B7%B1%E6%8B%B7%E8%B4%9D.png" alt="" loading="lazy"></p>
<h3 id="JSON">JSON</h3>
<blockquote>
<p>JSON对象中有两个方法，parse()解析JSON，stringify()将对象转换成JSON。</p>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> sym <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'sym'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'names'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token literal-property property">un</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  <span class="token literal-property property">nu</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>sym<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">'sym'</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> obj2 <span class="token operator">=</span> obj<span class="token punctuation">;</span>
<span class="token keyword">let</span> obj3 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj'</span><span class="token punctuation">,</span> obj<span class="token punctuation">,</span> <span class="token string">'obj2'</span><span class="token punctuation">,</span> obj2<span class="token punctuation">,</span> <span class="token string">'obj3'</span><span class="token punctuation">,</span> obj3<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><img src="/images/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E8%AE%B2%E8%AF%BE%E7%89%88/1.png" alt="" loading="lazy"><br>
我们通过图片观察到新对象中的un、fn、Symbol(‘sym’)属性丢失。所以不管JSON是不是深拷贝他的缺点就是不会对undefined、Symbol、function拷贝。</p>
<p>然后我们来验证JSON是深拷贝还是浅拷贝。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> sym <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'sym'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'names'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token literal-property property">un</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  <span class="token literal-property property">nu</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>sym<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">'sym'</span>
<span class="token punctuation">&#125;</span>

obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> obj2 <span class="token operator">=</span> obj<span class="token punctuation">;</span>
<span class="token keyword">let</span> obj3 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj'</span><span class="token punctuation">,</span> obj<span class="token punctuation">,</span> <span class="token string">'obj2'</span><span class="token punctuation">,</span> obj2<span class="token punctuation">,</span> <span class="token string">'obj3'</span><span class="token punctuation">,</span> obj3<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>我们加了一行<code>obj.age = 19</code>;<br>
<img src="/images/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E8%AE%B2%E8%AF%BE%E7%89%88/2.png" alt="" loading="lazy"><br>
我们可以看到，原对象和赋值的对象中的age属性都发生了改变，而拷贝的obj3中的age属性没有发生改变，那么我们可以说JSON是深拷贝吗？显然不行，因为浅拷贝是对对象中的属性进行拷贝，如果属性是基本类型就拷贝类型值，如果是引用类型就拷贝地址值。我们应该给obj添加一个obj属性，值是<code>&#123;age: 18&#125;</code>。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> sym <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'sym'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'names'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token literal-property property">un</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  <span class="token literal-property property">nu</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>sym<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">'sym'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">obj</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> obj2 <span class="token operator">=</span> obj<span class="token punctuation">;</span>
<span class="token keyword">let</span> obj3 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

obj<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj'</span><span class="token punctuation">,</span> obj<span class="token punctuation">,</span> <span class="token string">'obj2'</span><span class="token punctuation">,</span> obj2<span class="token punctuation">,</span> <span class="token string">'obj3'</span><span class="token punctuation">,</span> obj3<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><img src="/images/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E8%AE%B2%E8%AF%BE%E7%89%88/3.png" alt="" loading="lazy"><br>
我们通过图片可以看到当原对象<code>obj.obj.age</code>参数改变后，obj3中的<code>obj.obj.age</code>没有发生改变，这就说明JSON是深拷贝。</p>
<h3 id="Array-concat">Array.concat()</h3>
<blockquote>
<p>concat()方法用于合并两个或多个数组，此方法不会更改现数组，而是返回一个新数组。</p>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fn'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">;</span>
<span class="token keyword">let</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>

arr<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'arr'</span><span class="token punctuation">,</span>arr<span class="token punctuation">,</span><span class="token string">'arr2'</span><span class="token punctuation">,</span>arr2<span class="token punctuation">,</span><span class="token string">'arr3'</span><span class="token punctuation">,</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><img src="/images/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E8%AE%B2%E8%AF%BE%E7%89%88/4.png" alt="" loading="lazy"><br>
我们可以看到，当<code>arr[6].age = 19</code>后，<code>arr3[6].age</code>也跟着改变了，所以说，Array.concat()是浅拷贝。</p>
<h3 id="展开运算符">展开运算符</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> sym <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'sym'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'names'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token literal-property property">un</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  <span class="token literal-property property">nu</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>sym<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">'sym'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">obj</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> obj2 <span class="token operator">=</span> obj<span class="token punctuation">;</span>
<span class="token keyword">let</span> obj3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>obj<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

obj<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj'</span><span class="token punctuation">,</span> obj<span class="token punctuation">,</span> <span class="token string">'obj2'</span><span class="token punctuation">,</span> obj2<span class="token punctuation">,</span> <span class="token string">'obj3'</span><span class="token punctuation">,</span> obj3<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><img src="/images/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E8%AE%B2%E8%AF%BE%E7%89%88/5.png" alt="" loading="lazy"><br>
我们通过图片可以看到当原对象<code>obj.obj.age</code>参数改变后，obj3中的<code>obj.obj.age</code>发生改变，这就说明扩展运算符是浅拷贝。</p>
<h3 id="Object-assign">Object.assign()</h3>
<blockquote>
<p>Object.assign() 方法将所有可枚举的自有属性从一个或多个源对象复制到目标对象，返回修改后的对象。</p>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> sym <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'sym'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'names'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token literal-property property">un</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  <span class="token literal-property property">nu</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>sym<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">'sym'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">obj</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> obj2 <span class="token operator">=</span> obj<span class="token punctuation">;</span>
<span class="token keyword">let</span> obj3 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

obj<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj'</span><span class="token punctuation">,</span> obj<span class="token punctuation">,</span> <span class="token string">'obj2'</span><span class="token punctuation">,</span> obj2<span class="token punctuation">,</span> <span class="token string">'obj3'</span><span class="token punctuation">,</span> obj3<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><img src="/images/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E8%AE%B2%E8%AF%BE%E7%89%88/6.png" alt="" loading="lazy"><br>
我们通过图片可以看到当原对象<code>obj.obj.age</code>参数改变后，obj3中的<code>obj.obj.age</code>发生改变，这就说明Object.assign()是浅拷贝。</p>
<h3 id="Array-slice">Array.slice()</h3>
<blockquote>
<p>slice() 方法返回一个新的数组对象，这一对象是一个由 begin 和 end 决定的原数组的浅拷贝（包括 begin，不包括end）。原始数组不会被改变。</p>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fn'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">;</span>
<span class="token keyword">let</span> arr3 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>

arr<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'arr'</span><span class="token punctuation">,</span>arr<span class="token punctuation">,</span><span class="token string">'arr2'</span><span class="token punctuation">,</span>arr2<span class="token punctuation">,</span><span class="token string">'arr3'</span><span class="token punctuation">,</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><img src="/images/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E8%AE%B2%E8%AF%BE%E7%89%88/7.png" alt="" loading="lazy"><br>
我们可以看到，当<code>arr[6].age = 19</code>后，<code>arr3[6].age</code>也跟着改变了，所以说，Array.slice()是浅拷贝。</p>
<h3 id="Lodash的-cloneDeep方法">Lodash的_.cloneDeep方法</h3>
<p><code>html</code></p>
<h3 id="手写深拷贝">手写深拷贝</h3>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">//判断target是否是对象、数组、函数</span>
    <span class="token keyword">const</span> <span class="token function-variable function">isObject</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token operator">=></span> target <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//判断target的具体类型</span>
    <span class="token keyword">const</span> <span class="token function-variable function">getType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> mapTag <span class="token operator">=</span> <span class="token string">'[object Map]'</span>
    <span class="token keyword">const</span> setTag <span class="token operator">=</span> <span class="token string">'[object Set]'</span>

    <span class="token keyword">const</span> boolTag <span class="token operator">=</span> <span class="token string">'[object Boolean]'</span>
    <span class="token keyword">const</span> stringTag <span class="token operator">=</span> <span class="token string">'[object String]'</span>
    <span class="token keyword">const</span> numberTag <span class="token operator">=</span> <span class="token string">'[object Number]'</span>
    <span class="token keyword">const</span> dateTag <span class="token operator">=</span> <span class="token string">'[object Date]'</span>
    <span class="token keyword">const</span> funTag <span class="token operator">=</span> <span class="token string">'[object Function]'</span>
    <span class="token keyword">const</span> regexp <span class="token operator">=</span> <span class="token string">'[object RegExp]'</span>
    <span class="token keyword">const</span> errorTag <span class="token operator">=</span> <span class="token string">'[object Error]'</span>

    <span class="token keyword">const</span> canTraverse <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      <span class="token string-property property">'[object Object]'</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token string-property property">'[object Map]'</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token string-property property">'[object Set]'</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token string-property property">'[object Array]'</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token string-property property">'[object Arguments]'</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">function</span> <span class="token function">handleNotTraverse</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> ctor <span class="token operator">=</span> target<span class="token punctuation">.</span>constructor<span class="token punctuation">;</span>
      <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">case</span> <span class="token literal-property property">boolTag</span><span class="token operator">:</span>
          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token literal-property property">numberTag</span><span class="token operator">:</span>
          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token class-name">Number</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token literal-property property">stringTag</span><span class="token operator">:</span>
          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token literal-property property">dateTag</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token literal-property property">errorTag</span><span class="token operator">:</span>
          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ctor</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token literal-property property">funTag</span><span class="token operator">:</span>
          <span class="token keyword">return</span> <span class="token function">handleFun</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token literal-property property">regexp</span><span class="token operator">:</span>
          <span class="token keyword">return</span> <span class="token function">handleRexExp</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ctor</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">function</span> <span class="token function">handleFun</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">//箭头函数直接返回自身</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>target<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token keyword">return</span> target<span class="token punctuation">;</span>
      target <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> bodyReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;=&#123;)(.|\n)+(?=&#125;)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">m</span></span>
      <span class="token keyword">const</span> paramReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;=\().+(?=\)(\s*)+&#123;)</span><span class="token regex-delimiter">/</span></span>
      <span class="token keyword">const</span> param <span class="token operator">=</span> paramReg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> body <span class="token operator">=</span> bodyReg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fun'</span><span class="token punctuation">,</span>target<span class="token punctuation">,</span><span class="token string">'param'</span><span class="token punctuation">,</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>body<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> paramsArr <span class="token operator">=</span> param<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token operator">...</span>paramsArr<span class="token punctuation">,</span>body<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span>body<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">function</span> <span class="token function">handleRexExp</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> source<span class="token punctuation">,</span> flags <span class="token punctuation">&#125;</span> <span class="token operator">=</span> target<span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">target<span class="token punctuation">.</span>constructor</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//深拷贝</span>
    <span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> cloneTarget <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token comment">//判断是否是引用类型</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> target<span class="token punctuation">;</span>
      <span class="token comment">//获取更精确的类型</span>
      <span class="token keyword">let</span> type <span class="token operator">=</span> <span class="token function">getType</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>canTraverse<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//不可遍历</span>
        <span class="token keyword">return</span> <span class="token function">handleNotTraverse</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//可遍历</span>
        <span class="token keyword">let</span> ctor <span class="token operator">=</span> target<span class="token punctuation">.</span>constructor<span class="token punctuation">;</span>
        cloneTarget <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token comment">//判断是否循环引用</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
      map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> cloneTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> mapTag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//处理Map</span>
        target<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          cloneTarget<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">deepClone</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> setTag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//处理Set</span>
        target<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          cloneTarget<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">deepClone</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
      <span class="token comment">//处理数组和对象</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> props <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          cloneTarget<span class="token punctuation">[</span>props<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>props<span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">return</span> cloneTarget<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">function</span> <span class="token function">fnc</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token function-variable function">age</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">fnc</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>


    <span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj'</span><span class="token punctuation">,</span>obj<span class="token punctuation">,</span><span class="token string">'obj2'</span><span class="token punctuation">,</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript设计模式</title>
    <url>/2021/12/22/technology/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="#1">JavaScript设计模式</a></p>
<ul class="lvl-0">
<li class="lvl-4"><a href="#2">构造器模式</a></li>
<li class="lvl-4"><a href="#3">简单工厂模式</a></li>
<li class="lvl-4"><a href="#4">抽象工厂模式</a></li>
<li class="lvl-4"><a href="#5">单例模式</a></li>
<li class="lvl-4"><a href="#6">单例模式练习</a></li>
<li class="lvl-4"><a href="#7">原型模式</a></li>
<li class="lvl-4"><a href="#8">装饰器模式</a></li>
<li class="lvl-4"><a href="#9">ES7中的装饰器</a></li>
<li class="lvl-4"><a href="#10">适配器模式</a></li>
<li class="lvl-4"><a href="#11">代理模式</a></li>
<li class="lvl-4"><a href="#12">代理模式的实践</a></li>
<li class="lvl-4"><a href="#13">策略模式</a></li>
<li class="lvl-4"><a href="#14">状态模式</a></li>
<li class="lvl-4"><a href="#15">观察者模式</a></li>
<li class="lvl-4"><a href="#16">迭代器模式</a></li>
</ul>
<p id=1></p>
<h2 id="JavaScript设计模式">JavaScript设计模式</h2>
<p id=2></p>
<h3 id="构造器模式">构造器模式</h3>
<blockquote>
<p>创建的多个实例对象都具有相同的属性。</p>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token parameter">name <span class="token punctuation">,</span> age<span class="token punctuation">,</span> career</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token keyword">this</span><span class="token punctuation">.</span>career <span class="token operator">=</span> career 
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> career<span class="token punctuation">)</span></code></pre>
<p id=3></p>
<h3 id="简单工厂模式">简单工厂模式</h3>
<blockquote>
<p>创建的多个实例对象都既有有相同的属性又有不同的属性。</p>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token parameter">name <span class="token punctuation">,</span> age<span class="token punctuation">,</span> career<span class="token punctuation">,</span> work</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
    <span class="token keyword">this</span><span class="token punctuation">.</span>career <span class="token operator">=</span> career 
    <span class="token keyword">this</span><span class="token punctuation">.</span>work <span class="token operator">=</span> work
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">Factory</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> career</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> work
    <span class="token keyword">switch</span><span class="token punctuation">(</span>career<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">case</span> <span class="token string">'coder'</span><span class="token operator">:</span>
            work <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token string">'写代码'</span><span class="token punctuation">,</span><span class="token string">'写系分'</span><span class="token punctuation">,</span> <span class="token string">'修Bug'</span><span class="token punctuation">]</span> 
            <span class="token keyword">break</span>
        <span class="token keyword">case</span> <span class="token string">'product manager'</span><span class="token operator">:</span>
            work <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'订会议室'</span><span class="token punctuation">,</span> <span class="token string">'写PRD'</span><span class="token punctuation">,</span> <span class="token string">'催更'</span><span class="token punctuation">]</span>
            <span class="token keyword">break</span>
        <span class="token keyword">case</span> <span class="token string">'boss'</span><span class="token operator">:</span>
            work <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'喝茶'</span><span class="token punctuation">,</span> <span class="token string">'看报'</span><span class="token punctuation">,</span> <span class="token string">'见客户'</span><span class="token punctuation">]</span>
        <span class="token keyword">case</span> <span class="token string">'xxx'</span><span class="token operator">:</span>
            <span class="token comment">// 其它工种的职责分配</span>
            <span class="token operator">...</span>
            
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> career<span class="token punctuation">,</span> work<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>
<p id=4></p>
<h3 id="抽象工厂模式">抽象工厂模式</h3>
<blockquote>
<p>抽象工厂不干活，抽象工厂里面的具体工厂干活。遵守开放封闭原则。让代码对拓展开放，对修改封闭。例：我们创建一个手机工厂的流水线。</p>
</blockquote>
<ol>
<li class="lvl-3">
<p>定义手机抽象工厂</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MobilePhoneFactory</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 提供操作系统的接口</span>
  <span class="token function">createOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"抽象工厂方法不允许直接调用，你需要将我重写！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 提供硬件的接口</span>
  <span class="token function">createHardWare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"抽象工厂方法不允许直接调用，你需要将我重写！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ol start="2">
<li class="lvl-3">
<p>定义手机具体工厂，具体工厂继承于抽象工厂</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">FakeStarFactory</span> <span class="token keyword">extends</span> <span class="token class-name">MobilePhoneFactory</span> <span class="token punctuation">&#123;</span>
  <span class="token function">createOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 提供安卓系统实例</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AndroidOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">createHardWare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 提供高通硬件实例</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">QualcommHardWare</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ol start="3">
<li class="lvl-3">
<p>定义手机操作系统的抽象产品</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">OS</span> <span class="token punctuation">&#123;</span>
    <span class="token function">controlHardWare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'抽象产品方法不允许直接调用，你需要将我重写！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ol start="4">
<li class="lvl-3">
<p>定义手机操作系统的具体产品</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">AndroidOS</span> <span class="token keyword">extends</span> <span class="token class-name">OS</span> <span class="token punctuation">&#123;</span>
    <span class="token function">controlHardWare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会用安卓的方式去操作硬件'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ol start="5">
<li class="lvl-3">
<p>定义手机硬件的抽象产品</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">HardWare</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 手机硬件的共性方法，这里提取了“根据命令运转”这个共性</span>
  <span class="token function">operateByOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'抽象产品方法不允许直接调用，你需要将我重写！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ol start="6">
<li class="lvl-3">
<p>定义手机硬件的具体产品</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MiWare</span> <span class="token keyword">extends</span> <span class="token class-name">HardWare</span> <span class="token punctuation">&#123;</span>
  <span class="token function">operateByOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会用小米的方式去运转'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>如果我们想再创建一部新的手机，就可以直接重新创建一个类来继承不同的操作系统和硬件。这样就实遵循了开放封闭原则。</p>
<p id=5></p>
<h3 id="单例模式">单例模式</h3>
<blockquote>
<p>让一个类的实例只存在一个，不管我们尝试去创建多少次，它都只给你返回第一次所创建的那唯一的一个实例。</p>
</blockquote>
<ol>
<li class="lvl-3">
<p>使用ES6的class实现单例模式</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Requset</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token keyword">static</span> instance<span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Requset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> <span class="token literal-property property">r1</span><span class="token operator">:</span>Requset <span class="token operator">=</span> Requset<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token literal-property property">r2</span><span class="token operator">:</span>Requset <span class="token operator">=</span> Requset<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r1 <span class="token operator">===</span> r2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span></code></pre>
<ol start="2">
<li class="lvl-3">
<p>使用闭包实现单例模式</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">SingleDog<span class="token punctuation">.</span>getInstance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 定义自由变量instance，模拟私有变量</span>
    <span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 判断自由变量是否为null</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 如果为null则new出唯一实例</span>
            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> instance
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<ol start="3">
<li class="lvl-3">
<p>Vuex中的单例模式<br>
Vuex内部实现了一个install方法，这个方法再被调用时会将Store注入到Vue实例中去，Vuex就是使用单例模式让全局Store唯一。</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> Vue <span class="token comment">// 这个Vue的作用和楼上的instance作用一样</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">install</span> <span class="token punctuation">(</span><span class="token parameter">_Vue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 判断传入的Vue实例对象是否已经被install过Vuex插件（是否有了唯一的state）</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>Vue <span class="token operator">&amp;&amp;</span> _Vue <span class="token operator">===</span> Vue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>
        <span class="token string">'[vuex] already installed. Vue.use(Vuex) should be called only once.'</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 若没有，则为这个Vue实例对象install一个唯一的Vuex</span>
  Vue <span class="token operator">=</span> _Vue
  <span class="token comment">// 将Vuex的初始化逻辑写进Vue的钩子函数里</span>
  <span class="token function">applyMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>
<p id=6></p>
<h3 id="单例模式练习">单例模式练习</h3>
<ol>
<li class="lvl-3">
<p>实现Storage，使得该对象为单例，基于 localStorage 进行封装。实现方法 setItem(key,value) 和 getItem(key)。使用ES6的class实现</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Storage</span> <span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> instance<span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> Storage<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token function">getItem</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token function">setItem</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>使用闭包实现</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">StorageBase</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token class-name">StorageBase</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getItem</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token class-name">StorageBase</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">setItem</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> Storage <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">// 判断自由变量是否为null</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 如果为null则new出唯一实例</span>
            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StorageBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> instance
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<ol start="2">
<li class="lvl-3">
<p>实现一个全局的模态框</p>
</li>
</ol>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>单例模式弹框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
    <span class="token selector">#modal</span> <span class="token punctuation">&#123;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
        <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
        <span class="token property">line-height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
        <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>
        <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
        <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token property">border</span><span class="token punctuation">:</span> 1px solid black<span class="token punctuation">;</span>
        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>open<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>打开弹框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>close<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>关闭弹框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 核心逻辑，这里采用了闭包思路来实现单例模式</span>
    <span class="token keyword">const</span> Modal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    	<span class="token keyword">let</span> modal <span class="token operator">=</span> <span class="token keyword">null</span>
    	<span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>modal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            	modal <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>
            	modal<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'我是一个全局唯一的Modal'</span>
            	modal<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">'modal'</span>
            	modal<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span>
            	document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>modal<span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> modal
    	<span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token comment">// 点击打开按钮展示模态框</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 未点击则不创建modal实例，避免不必要的内存占用;此处不用 new Modal 的形式调用也可以，和 Storage 同理</span>
    	<span class="token keyword">const</span> modal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Modal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    	modal<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    
    <span class="token comment">// 点击关闭按钮隐藏模态框</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    	<span class="token keyword">const</span> modal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Modal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    	<span class="token keyword">if</span><span class="token punctuation">(</span>modal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    	    modal<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span>
    	<span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<p id=7></p>
<h3 id="原型模式">原型模式</h3>
<blockquote>
<p>在JavaScript中只存在原型模式，不存在类模式，JavaScript中的类是使用原型继承的语法糖。例如：</p>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'吃骨头'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>可以将上面的代码写成下面的形式</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">eat</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'吃骨头'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ol>
<li class="lvl-3">
<p>对象的深拷贝注意：深拷贝没有完美的方案，每一种方案都有它的边界</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-2">
<p>第一种方法使用JSON.stringify和JSON.parse的方式</p>
</li>
</ul>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'tom'</span><span class="token punctuation">,</span>
  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是一个函数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> dataStr <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> copy <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dataStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copy<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>上面的方法只拷贝了name参数，没有拷贝fn参数，应为使用JSON.stringify和JSON.parse的方式进行深拷贝不能对函数和正则进行拷贝。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>第二种使用递归的方式</p>
</li>
</ul>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token operator">!==</span><span class="token string">'object'</span><span class="token operator">||</span>obj<span class="token operator">===</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">let</span> ans<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>constructor<span class="token operator">===</span>Array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      ans<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p id=8></p>
<h3 id="装饰器模式">装饰器模式</h3>
<blockquote>
<p>装饰器模式为了不被已有的业务逻辑干扰，实现新的逻辑例：我们现在点击按钮，弹窗会打开，我们想在弹窗打开后又将按钮变成灰色，然后文字变成“快去登录”</p>
</blockquote>
<ol>
<li class="lvl-3">
<p>ES5实现方法</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//旧的逻辑</span>
<span class="token keyword">function</span> <span class="token function">openModal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> modal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Modal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    modal<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//新的逻辑</span>
<span class="token keyword">function</span> <span class="token function">changeButtonText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 按钮文案修改逻辑</span>
    <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">)</span>
    btn<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'快去登录'</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">disableButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 按钮置灰逻辑</span>
    <span class="token keyword">const</span> btn <span class="token operator">=</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">)</span>
    btn<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"disabled"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">changeButtonStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 新版本功能逻辑整合</span>
    <span class="token function">changeButtonText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">disableButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">openModal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">changeButtonStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>
<ol start="2">
<li class="lvl-3">
<p>ES6实现方法</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">OpenButton</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 点击后展示弹框（旧逻辑）</span>
    <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> modal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Modal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    	modal<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 定义按钮对应的装饰器（新逻辑）</span>
<span class="token keyword">class</span> <span class="token class-name">Decorator</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 将旧的逻辑传入</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">open_button</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>open_button <span class="token operator">=</span> open_button
    <span class="token punctuation">&#125;</span>
    
    <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>open_button<span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// “包装”了一层新逻辑</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">changeButtonStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token function">changeButtonStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">changeButtonText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">disableButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token function">disableButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> btn <span class="token operator">=</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">)</span>
        btn<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"disabled"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token function">changeButtonText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">)</span>
        btn<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'快去登录'</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// openButton.onClick()</span>
    decorator<span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>
<p id=9></p>
<h3 id="ES7中的装饰器">ES7中的装饰器</h3>
<p>下面的代码可能有的浏览器不支持，可以在<a href="https://babeljs.io/repl#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&amp;build=&amp;builtIns=false&amp;corejs=3.21&amp;spec=false&amp;loose=false&amp;code_lz=GYVwdgxgLglg9mABBANgQwM4YCIFMJwBOaURAFFGoQOa5QCUA3gFCKKU10B0AFpngWKlCiALztCIXAG5WiQnRCEkHWlFkBfZgAFUmHPiIkizPVkQAhEFFJJGW5qYQY4KXFxRxqZAORWbCID0ZoBkKoDVEYCjEYAOmYBhcj4ANJbWtrz8hkJE9NJAA&amp;debug=false&amp;forceAllTransforms=false&amp;shippedProposals=false&amp;circleciRepo=&amp;evaluate=false&amp;fileSize=false&amp;timeTravel=false&amp;sourceType=module&amp;lineWrap=true&amp;presets=env%2Creact%2Cstage-2&amp;prettier=false&amp;targets=&amp;version=7.18.12&amp;externalPlugins=&amp;assumptions=%7B%7D">babeljs</a>中转成js代码再运行。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">classDecorator</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  target<span class="token punctuation">.</span>hasDecorator <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> target<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
@classDecorator
<span class="token keyword">class</span> <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>


console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Button是否被装饰了'</span><span class="token punctuation">,</span> Button<span class="token punctuation">.</span>hasDecorator<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p id=10></p>
<h3 id="适配器模式">适配器模式</h3>
<blockquote>
<p>适配器模式就是将一个类的接口变换成所期待的另一种接口。例如：我有一个圆孔的耳机，需要插到方形耳机孔的手机上面，就需要一个适配器来让手机能够插上耳机。封装一个fetch</p>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Http</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//get方法</span>
  <span class="token keyword">static</span> <span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token operator">=></span>response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">//post方法</span>
  <span class="token keyword">static</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">Accept</span><span class="token operator">:</span> <span class="token string">'application/json'</span><span class="token punctuation">,</span>
          <span class="token string-property property">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'application/x-www-wform-urlencoded'</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">changeData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token operator">=></span>response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">//body请求体的格式化方法</span>
  <span class="token keyword">static</span> <span class="token function">changeData</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> prop<span class="token punctuation">,</span>str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>prop <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>prop<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        str <span class="token operator">+=</span> prop <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        str <span class="token operator">+=</span> <span class="token string">'&amp;'</span> <span class="token operator">+</span> prop <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">return</span> str<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ol>
<li class="lvl-3">
<p>fetch适配ajax<br>
ajax的请求写法如下</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">Ajax</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//成功的回调逻辑</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//失败的回调逻辑</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>如果我们想用上面的fetch修改ajax请求，如果一个一个修改的话十分麻烦，这时候我们就可以写一个适配器</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">AjaxAdapter</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> success<span class="token punctuation">,</span> failed</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> type <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> result<span class="token punctuation">;</span>
  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'GET'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      result <span class="token operator">=</span> <span class="token keyword">await</span> Http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'POST'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      result <span class="token operator">=</span> <span class="token keyword">await</span> Http<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//假设请求对应的状态码是200</span>
    result<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> success <span class="token operator">?</span> <span class="token function">success</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">failed</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>failed<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token function">failed</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">Ajax</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> success<span class="token punctuation">,</span> failed</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">await</span> <span class="token function">AjaxAdapter</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> success<span class="token punctuation">,</span> failed<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p id=11></p>
<h3 id="代理模式">代理模式</h3>
<blockquote>
<p>代理模式就是在某种情况下，一个对象不能直接访问另一个对象，需要一个第三者（代理）来间接达到访问目的</p>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> girl <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>girl<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">girl<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gril<span class="token punctuation">,</span> <span class="token string">'key='</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">gril<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gril<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> a <span class="token operator">=</span> girl<span class="token punctuation">.</span>a<span class="token punctuation">;</span>
proxy<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></code></pre>
<p id=12></p>
<h3 id="代理模式的实践">代理模式的实践</h3>
<ol>
<li class="lvl-3">
<p>事件代理下面的代码实现了，点击哪个a标签就弹窗显示对应a标签上的字，但是a标签多的情况下，需要给每个a标签绑定事件，那么性能的开销就会更大。</p>
</li>
</ol>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>事件代理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> aNodes <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'father'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> len <span class="token operator">=</span> aNodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      aNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>aNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>innerText<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<p>我们使用事件代理来修改js代码</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> father <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'father'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    father<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName <span class="token operator">===</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerText<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<ol start="2">
<li class="lvl-3">
<p>虚拟代理-实现图片的懒加载</p>
</li>
</ol>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>虚拟代理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>11<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">class</span> <span class="token class-name">PreLoadImage</span> <span class="token punctuation">&#123;</span>
      <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">imgNode</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//获取真实的DOM节点</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>imgNode <span class="token operator">=</span> imgNode<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token comment">//操作img节点的src属性</span>
      <span class="token function">setSrc</span><span class="token punctuation">(</span><span class="token parameter">imgUrl</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>imgNode<span class="token punctuation">.</span>src <span class="token operator">=</span> imgUrl<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">class</span> <span class="token class-name">ProxyImage</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">static</span> <span class="token constant">LOADING_URL</span> <span class="token operator">=</span> <span class="token string">'https://p6-passport.byteacctimg.com/img/user-avatar/620a16ed8f1917ba1825537525a22dce~300x300.image'</span>
      <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">targetImage</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//目标Image，即PreLoadImage实例</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>targetImage <span class="token operator">=</span> targetImage<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token function">serSrc</span><span class="token punctuation">(</span><span class="token parameter">targetUrl</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//targetUrl就是真实的图片路径</span>
        <span class="token comment">//真实img节点初始化时展示的是一个占位图</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>targetImage<span class="token punctuation">.</span><span class="token function">setSrc</span><span class="token punctuation">(</span>ProxyImage<span class="token punctuation">.</span><span class="token constant">LOADING_URL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//创建一个帮我们加载图片的虚拟Image实例</span>
        <span class="token keyword">const</span> virtualImage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//监听目标图片加载的情况，完成时再将DOM上的真实img节点的src属性设置为目标图片的url</span>
        virtualImage<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>targetImage<span class="token punctuation">.</span><span class="token function">setSrc</span><span class="token punctuation">(</span>targetUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//设置src属性，虚拟Image实例开始加载图片</span>
        virtualImage<span class="token punctuation">.</span>src <span class="token operator">=</span> targetUrl<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">const</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyImage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PreLoadImage</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    set<span class="token punctuation">.</span><span class="token function">serSrc</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置真实的图片地址</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<ol start="3">
<li class="lvl-3">
<p>缓存代理</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">addAll</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'进行一次新计算'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> len <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    result <span class="token operator">+=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 为求和方法创建代理</span>
<span class="token keyword">const</span> proxyAddAll <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token comment">// 求和结果的缓存池</span>
  <span class="token keyword">const</span> resultCache <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 将入参转化为一个唯一的入参字符串</span>
      <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
      <span class="token comment">// 检查本次入参是否有对应的计算结果</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>args <span class="token keyword">in</span> resultCache<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token comment">// 如果有，则返回缓存池里现成的结果</span>
          <span class="token keyword">return</span> resultCache<span class="token punctuation">[</span>args<span class="token punctuation">]</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">return</span> resultCache<span class="token punctuation">[</span>args<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">proxyAddAll</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">proxyAddAll</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<ol start="4">
<li class="lvl-3">
<p>保护模式保护模式就是我们之前演示的代理模式，在getter和setter中进行拦截。</p>
</li>
</ol>
<p id=13></p>
<h3 id="策略模式">策略模式</h3>
<p>例：如果输入的是a就执行a的逻辑，如果是b就执行b的逻辑，我们可以如下这样写。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ans</span><span class="token punctuation">(</span><span class="token parameter">tag</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>tag<span class="token operator">===</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//执行a的逻辑</span>
  <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>tag<span class="token operator">===</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//执行b的逻辑</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>如果逻辑再多一点，上面的代码逻辑就太胖了，而且违背了“开放闭合原则”。可以修改成一下格式。</p>
<ol>
<li class="lvl-3">
<p>使用职责分离修改代码</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token comment">//执行a的逻辑</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token comment">//执行b的逻辑</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">ans</span><span class="token punctuation">(</span><span class="token parameter">tag</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>tag<span class="token operator">===</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>tag<span class="token operator">===</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ol start="2">
<li class="lvl-3">
<p>上面的代码是经过开放封闭改造过的，如果想在ansObj里面写新的逻辑，就可以直接通过ansObj.属性，来添加</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> ansObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//执行a的逻辑</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//执行b的逻辑</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">ans</span><span class="token punctuation">(</span><span class="token parameter">tag</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> ansObj<span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p id=14></p>
<h3 id="状态模式">状态模式</h3>
<p>状态模式和策略模式十分的相识。我们还拿策略模式的例子举例。</p>
<ol>
<li class="lvl-3">
<p>使用职责分离修改代码</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">ans</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'init'</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">changeState</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>state<span class="token operator">===</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>state<span class="token operator">===</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//执行a的逻辑</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//执行b的逻辑</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ol start="2">
<li class="lvl-3">
<p>使用开放封闭修改代码</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> ansObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//执行a的逻辑</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//执行b的逻辑</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Ans</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'init'</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">changeState</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ansObj<span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    ansObj<span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
test<span class="token punctuation">.</span><span class="token function">changeState</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<ol start="3">
<li class="lvl-3">
<p>修改开放封闭的代码，让Ans于ansObj建立联系</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Ans</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'init'</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">const</span> ansObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">that</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token comment">//在对象中使用this.that指向Ans中的this</span>
    <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token comment">//执行a的逻辑</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token comment">//执行b的逻辑</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
  <span class="token function">changeState</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>ansObj<span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ansObj<span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
test<span class="token punctuation">.</span><span class="token function">changeState</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p id=15></p>
<h3 id="观察者模式-发布-订阅模式">观察者模式(发布-订阅模式)</h3>
<blockquote>
<p>观察者模式是一种一对多的依赖关系，让多个观察者同时监听一个目标对象，如果目标对象状态发生变化时，回通知所有观察者，使观察者可以自动更新。</p>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//定义发布者类</span>
<span class="token keyword">class</span> <span class="token class-name">Publisher</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>observers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'created'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">//增加订阅者</span>
  <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'add'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">//移除订阅者</span>
  <span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token operator">===</span> observer<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'remove'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">//通知所有订阅者</span>
  <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'invoked'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//定义订阅者类</span>
<span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer created'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer update'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//定义一个具体的发布类</span>
<span class="token keyword">class</span> <span class="token class-name">PrdPublicher</span> <span class="token keyword">extends</span> <span class="token class-name">Publisher</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>prdState <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'PrdPublicher created'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">//获取当前的prdState</span>
  <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'PrdPublicher get'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prdState<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">//设置prdState的值</span>
  <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>prdState <span class="token operator">=</span> state<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'PrdPublicher set'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">DeveloperObserver</span> <span class="token keyword">extends</span> <span class="token class-name">Observer</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token comment">// 需求文档一开始还不存在，prd初始为空对象</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>prdState <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'DeveloperObserver created'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  
  <span class="token comment">// 重写一个具体的update方法</span>
  <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">publisher</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'DeveloperObserver.update invoked'</span><span class="token punctuation">)</span>
      <span class="token comment">// 更新需求文档</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>prdState <span class="token operator">=</span> publisher<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token comment">// 调用工作函数</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  
  <span class="token comment">// work方法，一个专门搬砖的方法</span>
  <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 获取需求文档</span>
      <span class="token keyword">const</span> prd <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prdState
      <span class="token comment">// 开始基于需求文档提供的信息搬砖。。。</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'996 begins...'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//目标值</span>
<span class="token keyword">const</span> aim <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrdPublicher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//观察者</span>
<span class="token keyword">const</span> view1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeveloperObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> view2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeveloperObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//一对多，让一个目标值对应多个观察者</span>
aim<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>view1<span class="token punctuation">)</span><span class="token punctuation">;</span>
aim<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>view2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//当目标值中的值改变，观察者对应的值也都自动更新</span>
aim<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p id=16></p>
<h3 id="迭代器模式">迭代器模式</h3>
<blockquote>
<p>迭代器模式提供一种顺序访问一个对象中的各个元素，但是又不暴露该对象内部的表示。</p>
</blockquote>
<ol>
<li class="lvl-3">
<p>通过forEach方法遍历一个数组</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">索引为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>index<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">的元素是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>item<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>
<p>forEach不是万能的，如果用forEach遍历伪数组则会报错。<br>
2. ES6对迭代器的实现在ES6中不仅有Array(数组)和Object(对象)，还新增了Map和Set。所以ES6也推出了一套统一的接口机制——迭代器(Iterator)。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> iterator <span class="token operator">=</span> arr<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<ol start="2">
<li class="lvl-3">
<p>for…of…就是反复调用迭代器对象的next方法。</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>item <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">当前元素是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>item<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>
<ol start="3">
<li class="lvl-3">
<p>ES6实现一个迭代器生成函数</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">iteratorGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">yield</span> <span class="token string">'1'</span>
  <span class="token keyword">yield</span> <span class="token string">'2'</span>
  <span class="token keyword">yield</span> <span class="token string">'3'</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> iterator2 <span class="token operator">=</span> <span class="token function">iteratorGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<ol start="4">
<li class="lvl-3">
<p>ES5实现一个迭代器生成函数</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">iteratorGenerator2</span><span class="token punctuation">(</span><span class="token parameter">list</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token comment">//记录当前的索引</span>
  <span class="token keyword">var</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">//集合的长度</span>
  <span class="token keyword">var</span> len <span class="token operator">=</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token comment">//如果索引值没有超过集合长度，done为false</span>
      <span class="token keyword">var</span> done <span class="token operator">=</span> idx <span class="token operator">>=</span> len<span class="token punctuation">;</span>
      <span class="token comment">//如果done为false则可以继续取值</span>
      <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token operator">!</span>done <span class="token operator">?</span> list<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
      <span class="token comment">//将当前值和是否完毕(done)返回</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">done</span><span class="token operator">:</span> done<span class="token punctuation">,</span>
        <span class="token literal-property property">value</span><span class="token operator">:</span> value
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> iterator3 <span class="token operator">=</span> <span class="token function">iteratorGenerator2</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator3<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator3<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator3<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
  </entry>
  <entry>
    <title>闭包</title>
    <url>/2022/09/18/technology/%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="闭包">闭包</h2>
<h3 id="闭包是什么">闭包是什么</h3>
<p>红宝书中的定义是：闭包就是有权访问另一个函数作用域中变量的函数。</p>
<h3 id="形成闭包的原因">形成闭包的原因</h3>
<p>内部的函数存在外部作用域的引用就会导致闭包。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>这里fn2函数中就存在外部作用域的引用，所以就会产生闭包。</p>
<h3 id="闭包变量存储的位置">闭包变量存储的位置</h3>
<p>闭包中的变量存储位置是推内存。</p>
<h3 id="闭包的作用">闭包的作用</h3>
<ol>
<li class="lvl-3">
<p>保护函数的私有变量不受外部的干扰。形成不被销毁的内存。</p>
</li>
<li class="lvl-3">
<p>把一些函数内的值保存下来。闭包可以实现方法和属性私有化。</p>
</li>
</ol>
<h3 id="闭包需要注意什么">闭包需要注意什么</h3>
<p>闭包容易导致内存泄漏，闭包会携带其他函数的作用域，因此会比其他函数占用更多内存。过度使用闭包会导致内存占用过多。</p>
<h3 id="检查内存泄漏">检查内存泄漏</h3>
<p>我们先来检测没有闭包的情况</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre>
<p><img src="/images/%E9%97%AD%E5%8C%85/2.png" alt="内存无泄漏监听" loading="lazy"><br>
我们看到堆内存在上升后又释放了。我们再来检测一下闭包的情况。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><img src="/images/%E9%97%AD%E5%8C%85/2.png" alt="内存泄漏监听" loading="lazy"><br>
上图可以看出堆内存中的占用一直存在。</p>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
  </entry>
  <entry>
    <title>ts常见面试题</title>
    <url>/2020/03/10/typeScript/ts%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="什么是TypeScript？">什么是TypeScript？</h2>
<p>ts就是一个js的超集，ts不能直接在浏览器上运行，需要转译成js。他给js的变量提供了类型，让代码在编写的时候就能检测错误。让代码更加的健壮。</p>
<h2 id="ts相对于js的优势？">ts相对于js的优势？</h2>
<p>js在运行的时候才知道哪里错误，ts在编写的时候就可以检测是否有写错误的代码。避免写变量名的时候写错。<br>
ts写类型，让代码能更好的看懂，比如函数传入的每个参数都是什么类型。写ts代码的时候会提示该输入什么参数类型的值。让代码的质量更好，更加的健壮，避免传入的类型不同而引起的问题。</p>
<h2 id="ts中const和readonly的区别">ts中const和readonly的区别</h2>
<p>const使变量不能修改，readonly使将参数变成只读的，避免修改。</p>
<h2 id="keyof-和-typeof-关键字的作用？">keyof 和 typeof 关键字的作用？</h2>
<p>typeof是获取变量的类型<br>
keyof是获取索引类型的属性名，并构造成联合类型</p>
<h2 id="TypeScript-中-any-类型的作用是什么？">TypeScript 中 any 类型的作用是什么？</h2>
<p>如果你不清楚一个值是什么类型就可以设置成any，any类型可以赋值给任何类型，任何类型也可以赋值给any，any被称为顶级类型。但是any存在一些问题：</p>
<ol>
<li class="lvl-3">
<p>类型污染，any类型的对象，会将参数也全部变成any值</p>
</li>
<li class="lvl-3">
<p>完全失去类型检测功能，当我们使用不存在的方法或属性也不会报错。可以使用unknown来代替any</p>
</li>
</ol>
<h2 id="接口和类型别名">接口和类型别名</h2>
<p>接口和类型别名都可以用来定义对象，函数，类的类型，但是类型别名的话可以定义其他类型，比如，基本类型，元组，联合类型。类型别名名称一样会报错，但是接口名称一样，如果合法会产生接口合并。接口使用extends继承，类型别名使用交叉类型继承。接口继承如果有同样类型和名称的参数会报错，类型别名有同样的参数和类型会返回never。<br>
type结合泛型和extends infer可以写一下工具类型</p>
<h2 id="TypeScript-中-any、never、unknown、null-undefined-和-void-有什么区别？">TypeScript 中 any、never、unknown、null &amp; undefined 和 void 有什么区别？</h2>
<p>any：ny类型可以赋值给任何类型，任何类型也可以赋值给any，但是any类型失去了类型检测功能，可能导致使用一个不存在的方法和属性也不会报错。<br>
never：never表示不存在的类型<br>
void：没有任何类型<br>
unknown：所有类型都可以赋值给unknown类型，但是unknown类型只能赋值给unknown类型和any类型，他和any相似，但是他不会失去类型检测，一般使用unknown代替any<br>
null &amp; undefined：null和undefined是所有类型的子类型，</p>
<h2 id="TypeScript-中可以使用-String、Number、Boolean、Symbol、Object-等给类型做声明吗？">TypeScript 中可以使用 String、Number、Boolean、Symbol、Object 等给类型做声明吗？</h2>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">/* 可以 */</span>
<span class="token keyword">let</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"bob"</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> decLiteral<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> isDone<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> sym<span class="token operator">:</span> <span class="token builtin">symbol</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
 name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
 age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<h2 id="TypeScript-中的-this-和-JavaScript-中的-this-有什么差异？">TypeScript 中的 this 和 JavaScript 中的 this 有什么差异？</h2>
<ol>
<li class="lvl-3">
<p><code>noImplicitThis: true</code>的情况下，必须去声明this的类型，才能在函数或对象中使用this。</p>
</li>
<li class="lvl-3">
<p>ts中箭头函数的this和ES6中的一样。</p>
</li>
</ol>
<h2 id="TypeScript-中使用-Union-Types-（联合类型）时有哪些注意事项？">TypeScript 中使用 Union Types （联合类型）时有哪些注意事项？</h2>
<p>当不确定联合类型到底是哪个类型的时候就只能访问联合类型的所有类型。</p>
<h2 id="TypeScript-如何设计-Class-的声明？">TypeScript 如何设计 Class 的声明？</h2>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Greeter</span> <span class="token punctuation">&#123;</span>
   greeting<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
   <span class="token function">constructor</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span>greeting <span class="token operator">=</span> message<span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
   <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">&#123;</span>
       <span class="token keyword">return</span> <span class="token string">"Hello, "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>greeting<span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> greeter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Greeter</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 在声明类的时候，一般类中都会包含，构造函数、对构造函数中的属性进行类型声明、类中的方法。</span></code></pre>
<h2 id="TypeScript-中如何联合枚举类型的-Key">TypeScript 中如何联合枚举类型的 Key?</h2>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> str <span class="token punctuation">&#123;</span>
   <span class="token constant">A</span><span class="token punctuation">,</span>
   <span class="token constant">B</span><span class="token punctuation">,</span>
   <span class="token constant">C</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">type</span> <span class="token class-name">strUnion</span> <span class="token operator">=</span>  <span class="token keyword">keyof</span> <span class="token keyword">typeof</span> str<span class="token punctuation">;</span> <span class="token comment">// 'A' | 'B' | 'C'</span></code></pre>
<h2 id="TypeScript-中-、-、-、-、-、-等符号的含义？">TypeScript 中 ?.、??、!、!.、_、** 等符号的含义？</h2>
<p>?. 可链用 遇到null或undefined立即停止表达式的执行<br>
?? 空值合并运算符 当左边的值为null或undefined时就返回右边的值，否则返回左边的值<br>
_ 数字分割符 分隔符不会改变数值字面量的值，使人更容易读懂数字 1_101_324，不允许多个分隔符连用<br>
!.加载变量后面，也是排除undefined和null类型<br>
!在变量前表示取反，在变量后表示使null和undefined类型可以赋值给其他类型，并编译通过<br>
** 求幂</p>
<h2 id="简单介绍一下-TypeScript-模块的加载机制？">简单介绍一下 TypeScript 模块的加载机制？</h2>
<p>假设有一个导入语句 import { a } from “moduleA”;</p>
<ol>
<li class="lvl-4">
<p>首先，编译器会尝试定位需要导入的模块文件，通过绝对或者相对的路径查找方式；</p>
</li>
<li class="lvl-4">
<p>如果上面的解析失败了，没有查找到对应的模块，编译器会尝试定位一个外部模块声明（.d.ts）；</p>
</li>
<li class="lvl-4">
<p>最后，如果编译器还是不能解析这个模块，则会抛出一个错误 error TS2307: Cannot find module ‘moduleA’.</p>
</li>
</ol>
<h2 id="如何使-TypeScript-项目引入并识别编译为-JavaScript-的-npm-库包？">如何使 TypeScript 项目引入并识别编译为 JavaScript 的 npm 库包？</h2>
<ol>
<li class="lvl-3">
<p>安装对应的ts包，npm install @type/包名 --save</p>
</li>
<li class="lvl-3">
<p>如果没有对应的ts包，那就在编写同名的.d.ts文件</p>
</li>
</ol>
<h2 id="TypeScript-的-tsconfig-json-中有哪些配置项信息？">TypeScript 的 tsconfig.json 中有哪些配置项信息？</h2>
<h2 id="TypeScript-中如何设置模块导入的路径别名？">TypeScript 中如何设置模块导入的路径别名？</h2>
<h2 id="对-TypeScript-类中成员的-public、private、protected、readonly-修饰符的理解？">对 TypeScript 类中成员的 public、private、protected、readonly 修饰符的理解？</h2>
<p>public: 成员都默认为public，被此限定符修饰的成员是可以被外部访问；<br>
private: 被此限定符修饰的成员是只可以被类的内部访问；<br>
protected: 被此限定符修饰的成员是只可以被类的内部以及类的子类访问;<br>
readonly: 关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化。</p>
<h2 id="数组定义的两种方式">数组定义的两种方式</h2>
<ol>
<li class="lvl-3">
<p>Array<string></p>
</li>
<li class="lvl-3">
<p>string[]</p>
</li>
</ol>
<h2 id="TypeScript-的内置数据类型有哪些？">TypeScript 的内置数据类型有哪些？</h2>
<p>boolean string undefined null number void never any unknown<br>
array tuple（元组）object enum（枚举）</p>
<h2 id="any与unknown的区别">any与unknown的区别</h2>
<p>any类型可以赋值给任何类型，任何类型也可以赋值给any类型。任何类型可以赋值给unknown类型，但是unknown类型只能赋值给unknown类型和any类型。<br>
unknown类型相比any类型更加的严格。any类型完全失去了类型检测能力，但是unknown在大多数操作之前仍然会进行类型检测。设置any类型，如果这个值是undefined，调用他上面的属性也不会报错，但是unknown会报错，因为unknown类型属于未知类型，所以不允许访问属性值。</p>
<h2 id="使用ts实现一个判断入参是否是数组类型的方法？">使用ts实现一个判断入参是否是数组类型的方法？</h2>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token operator">:</span><span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">boolean</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<h2 id="如何在TypeScript中实现继承？">如何在TypeScript中实现继承？</h2>
<p>extends关键字</p>
<h2 id="Typescript中never-和-void-的区别？">Typescript中never 和 void 的区别？</h2>
<p>never表示永远不存在的类型，void表示没有任何类型。返回值为void的函数能够正常运行，返回值为never的函数会报错。<br>
void类型，只能将undefined和null赋值给他。<br>
never是所有类型的子类型，可以把never赋值给任何类型，除了never类型本身，any类型也不能赋值给他自身。<br>
never可以赋值给哪些返回错误的函数或根本无法到达终点的类型。</p>
<h2 id="类型断言">类型断言</h2>
<p>类型断言就是，如果你知道一个实体具有比现在类型更确切的类型就可以使用类型断言，通过类型断言就是告诉编译器，“相信我，我知道我在做什么”。他有两种表现方式，一种是<code>尖括号</code>方法，一种是<code>as</code>，但是在ts中使用jsx只有as这种类型断言被允许。</p>
<h2 id="重载">重载</h2>
<p>js是一个动态语言，比如一个函数可能因为出入的类型不同返回不同的类型，这就需要重载，重载的函数在调用的时候会进行正确的类型检查。它会先尝试第一个重载定义，如果能够匹配就使用这个，所以要把最精确的放到最上面。</p>
<h2 id="Typescript中泛型是什么？">Typescript中泛型是什么？</h2>
<p>我感觉泛型更像一种类型变量，泛型的值通常在使用的时候才会设置。泛型可以在interface，type，函数中使用。函数使用时比如函数的返回值类型与传入值类型有关的时候。<br>
type中使用泛型，可以来写一下工具。因为泛型没有约束造成了一些问题，比如，因为不确定泛型的具体类型，所以访问泛型类型的属性会报错。可以使用extends来对泛型进行约束。</p>
<h2 id="解释一下TypeScript中的枚举。">解释一下TypeScript中的枚举。</h2>
<p>枚举就是创建一组命名的常量，可以是字符串也可以是数组，默认是从0递增的。如果你给一个常量命名为数字，那么后面的值就会从这个数字开始递增，但是如果你设置的是字符串，那么下面的值也必须设置，否者报错。枚举在运行的时候是真实存在的对象，你可以通过枚举值向枚举名泛型映射。如果枚举只是让代码可读性更好，不需要创建对象那么就使用常量枚举。</p>
<h2 id="declare关键字">declare关键字</h2>
<p>当我们使用第三方库的时候，第三方库可能给window上添加属性，如果我们在ts中直接获取这个元素会出现错误，因为ts编译器不认识这个全局变量，所以就需要declare关键字来声明这个全局变量，从而让ts编译器可以识别这个变量。</p>
<h2 id="说说对-TypeScript-中命名空间的理解？模块与命名空间的区别？">说说对 TypeScript 中命名空间的理解？模块与命名空间的区别？</h2>
<p>在ts1.5版本中，“内部模块”被改成了“命名空间”，“外部模块”被称为“模块”。模块：在ts中，任何包含顶级<code>import</code>或<code>export</code>的文件都会被当作一个模块。如果没有顶级的<code>import</code>或<code>export</code>则会被当作一个全局可见。命名空间：命名空间的定义是使用的namespace关键字，如果想要外部可以访问命名空间中的值那么就需要使用export导出。命名空间的本质就是一个对象。</p>
<p>命名空间和模块一样都包含代码和声明，不同的是模块可以声明它的依赖。命名空间可以使用<code>import x = NameSpace.polygons</code>的方法给命名空间设置别名。相同名称的命名空间会进行合并。在ts项目开发过程中一般不使用命名空间，通常在为没有ts的js库，定义.d.ts文件的时候使用。</p>
<h2 id="装饰器">装饰器</h2>
<h2 id="简单聊聊你对-TypeScript-类型兼容性的理解？">简单聊聊你对 TypeScript 类型兼容性的理解？</h2>
<h2 id="协变、逆变、双变和抗变的理解？">协变、逆变、双变和抗变的理解？</h2>
<h2 id="类型的全局声明和局部声明">类型的全局声明和局部声明</h2>
<h2 id="说一说TypeScript中的类及其特性。">说一说TypeScript中的类及其特性。</h2>
<h2 id="TypeScript-中的类是什么？你如何定义它们？">TypeScript 中的类是什么？你如何定义它们？</h2>
<h2 id="TypeScript-中的-getter-setter-是什么？你如何使用它们？">TypeScript 中的 getter/setter 是什么？你如何使用它们？</h2>
<h2 id="TypeScript中的方法重写是什么">TypeScript中的方法重写是什么?</h2>
<h2 id="Typescript什么是方法重载？">Typescript什么是方法重载？</h2>
<h2 id="TypeScript-中-interface-可以给-Function-Array-Class（Indexable）做声明吗？">TypeScript 中 interface 可以给 Function / Array / Class（Indexable）做声明吗？</h2>
<h2 id="用过哪些工具类型">用过哪些工具类型</h2>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
  </entry>
  <entry>
    <title>TypeScript学习总结</title>
    <url>/2022/07/03/typeScript/typescript%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="TypeScript">TypeScript</h2>
<h3 id="常用类型">常用类型</h3>
<h4 id="原始类型">原始类型</h4>
<pre class="language-none"><code class="language-none">let age:number&#x3D;20;
let myName:string&#x3D;&#39;xsx&#39;
let isLoading:boolean&#x3D;false;
let a:null&#x3D;null;
let b:undefined&#x3D;undefined;
let s:symbol&#x3D;Symbol();</code></pre>
<h4 id="数组类型">数组类型</h4>
<pre class="language-none"><code class="language-none">let numbers:number[]&#x3D;[1,2,3];
let numbers2:Array&lt;number&gt;&#x3D;[1,2,3];</code></pre>
<h4 id="联合类型">联合类型</h4>
<pre class="language-none"><code class="language-none">let arr:(number|string)[]&#x3D;[&#39;1&#39;,&#39;2&#39;,1,2];</code></pre>
<h4 id="函数类型">函数类型</h4>
<pre class="language-none"><code class="language-none">function add(num1:number,num2:number):number&#123;
    return num1+num2;
&#125;
const add2&#x3D;(num1:number,num2:number):number&#x3D;&gt;&#123;
    return num1+num2;
&#125;</code></pre>
<h5 id="函数的可选参数">函数的可选参数</h5>
<pre class="language-none"><code class="language-none">function mySlice(start?:number,end?:number):void&#123;
    console.log(&#96;起始索引$&#123;start&#125;,结束索引$&#123;end&#125;&#96;);
&#125;

mySlice();
mySlice(1);
mySlice(1,2);</code></pre>
<h4 id="对象类型">对象类型</h4>
<pre class="language-none"><code class="language-none">let person:&#123;name:string;age:number;sayHi():void;greet(name:string):void&#125;&#x3D;&#123;
    name:&#39;jack&#39;,
    age:19,
    sayHi()&#123;&#125;,
    greet(name)&#123;&#125;,
&#125;
let person2:&#123;
    name:string
    age:number
    sayHi:()&#x3D;&gt;void
    greet(name:string):void
&#125;&#x3D;&#123;
    name:&#39;jack&#39;,
    age:19,
    sayHi()&#123;&#125;,
    greet(name)&#123;&#125;,
&#125;</code></pre>
<h5 id="对象的可选属性">对象的可选属性</h5>
<pre class="language-none"><code class="language-none">function myAxios(config:&#123;url:string;method?:string&#125;)&#123;
    console.log(config);
&#125;</code></pre>
<h3 id="高级类型">高级类型</h3>
<h4 id="接口">接口</h4>
<pre class="language-none"><code class="language-none">interface IPerson&#123;
    name:string
    age:number
    sayHi():void
&#125;
let person3:IPerson&#x3D;&#123;
    name:&#39;jack&#39;,
    age:19,
    sayHi()&#123;&#125;
&#125;</code></pre>
<h5 id="接口的继承">接口的继承</h5>
<pre class="language-none"><code class="language-none">interface Point2D&#123;
    x:number
    y:number
&#125;
interface Point3D extends Point2D&#123;
    z:number
&#125;
let d2:Point2D&#x3D;&#123;
    x:1,
    y:2
&#125;
let d3:Point3D&#x3D;&#123;
    x:1,
    y:2,
    z:3
&#125;</code></pre>
<h4 id="类型别名">类型别名</h4>
<pre class="language-none"><code class="language-none">type TPerson&#x3D;&#123;
    name:string
    age:number
    sayHi():void
&#125;
let person4:TPerson&#x3D;&#123;
    name:&#39;jack&#39;,
    age:19,
    sayHi()&#123;&#125;
&#125;</code></pre>
<h4 id="类型断言">类型断言</h4>
<pre class="language-none"><code class="language-none">&#x2F;&#x2F;如果不知道是什么类型的，可以在控制台选中元素，输入console.dir($0)查看。
const aLink &#x3D; &lt;HTMLAnchorElement&gt;document.getElementById(&#39;link&#39;)</code></pre>
<h4 id="接口与类型别名的对比">接口与类型别名的对比</h4>
<pre class="language-none"><code class="language-none">&#x2F;&#x2F;接口只能给对象起别名，而类型别名可以给任意类型起别名
type NumStr &#x3D; number | string;</code></pre>
<h4 id="字面量类型">字面量类型</h4>
<pre class="language-none"><code class="language-none">const str2:&#39;Hello TS&#39; &#x3D; &#39;Hello TS&#39;
let age2:18&#x3D;18
function changeDirection(direction:&#39;up&#39;|&#39;down&#39;|&#39;left&#39;|&#39;right&#39;)&#123;
    console.log(direction);
&#125;
changeDirection(&#39;up&#39;);</code></pre>
<h4 id="数字枚举">数字枚举</h4>
<pre class="language-none"><code class="language-none">&#x2F;&#x2F;对于数字枚举存在自增长行为，如果你不设置数值，则会从0依次增长。
enum Direction&#123;Up,Down,Left,Right&#125;
enum Direction2&#123;Up&#x3D;10,Down&#x3D;22,Left&#x3D;65,Right&#x3D;1025&#125;
function changeDirection2(direction:Direction)&#123;
    console.log(direction);
&#125;
changeDirection2(Direction.Up)</code></pre>
<h4 id="字符串枚举">字符串枚举</h4>
<pre class="language-none"><code class="language-none">enum Direction3&#123;
    Up&#x3D;&#39;Up&#39;,
    Down&#x3D;&#39;Down&#39;,
    Left&#x3D;&#39;Left&#39;,
    Right&#x3D;&#39;Right&#39;,
&#125;</code></pre>
<h4 id="any类型-不推荐使用">any类型(不推荐使用)</h4>
<pre class="language-none"><code class="language-none">&#x2F;*
    不推荐使用any类型，它会让TypeScript变成AnyScript，会失去TypeScript类型保护的优势。

*&#x2F;
let objans:any&#x3D;&#123;x:0&#125;;
objans();
&#x2F;&#x2F;上述代码执行错误</code></pre>
<h5 id="隐式具有any类型的情况">隐式具有any类型的情况</h5>
<ol>
<li class="lvl-3">
<p>声明变量不提供类型也不提供默认值</p>
</li>
<li class="lvl-3">
<p>函数参数不加类型</p>
</li>
</ol>
<h4 id="TypeScript中的typeof">TypeScript中的typeof</h4>
<pre class="language-none"><code class="language-none">&#x2F;&#x2F;typeof只能查询变量或属性的类型，无法查询其他形式的类型
let p&#x3D;&#123;x:1,y:2&#125;;
function formatPoint(point:&#123;x:number,y:number&#125;)&#123;&#125;
formatPoint(p);
function formatPoint2(point:typeof p)&#123;&#125;
formatPoint2(p);</code></pre>
<h4 id="class类">class类</h4>
<pre class="language-none"><code class="language-none">class Persons&#123;
    ages!:number
    gender&#x3D;&#39;男&#39;
&#125;
const per&#x3D;new Persons();</code></pre>
<h5 id="class类构造函数">class类构造函数</h5>
<pre class="language-none"><code class="language-none">class Persons&#123;
    ages!:number
    gender&#x3D;&#39;男&#39;
    constructor(ages:number,gender:string)&#123;
        this.ages&#x3D;ages;
        this.gender&#x3D;gender
    &#125;
&#125;
const per&#x3D;new Persons(18,&#39;女&#39;);</code></pre>
<h5 id="class类的实例方法">class类的实例方法</h5>
<pre class="language-none"><code class="language-none">class Point&#123;
    x&#x3D;10
    y&#x3D;10
    scale(n:number):void&#123;
        this.x*&#x3D;n;
        this.y*&#x3D;n;
    &#125;
&#125;
const poi&#x3D;new Point();
poi.scale(10);</code></pre>
<h5 id="class类继承父类">class类继承父类</h5>
<pre class="language-none"><code class="language-none">class Animal&#123;
    move()&#123;
        console.log(&#39;移动&#39;);
    &#125;
&#125;
class Dog extends Animal&#123;
    bark()&#123;
        console.log(&#39;汪&#39;);
    &#125;
&#125;
const dog&#x3D;new Dog();</code></pre>
<h5 id="class类实现接口">class类实现接口</h5>
<pre class="language-none"><code class="language-none">interface Singalbe&#123;
    sing():void
&#125;
class Persons2 implements Singalbe&#123;
    sing(): void &#123;
        console.log(&#39;sign&#39;);
    &#125;
&#125;</code></pre>
<h5 id="class类可见性修饰符">class类可见性修饰符</h5>
<ol>
<li class="lvl-3">
<p>public(公有的，默认为public)</p>
</li>
</ol>
<pre class="language-none"><code class="language-none">class Animal&#123;
    public move()&#123;
        console.log(&#39;移动&#39;);
    &#125;
&#125;</code></pre>
<ol start="2">
<li class="lvl-3">
<p>protected(受保护的)</p>
</li>
</ol>
<pre class="language-none"><code class="language-none">&#x2F;&#x2F;仅对声明的所有类和子类中（非实例对象）可见。
class Animal&#123;
    protected move()&#123;
        console.log(&#39;移动&#39;);
    &#125;
&#125;
class Dog extends Animal&#123;
    bark()&#123;
        console.log(&#39;汪&#39;);
        this.move();
    &#125;
&#125;</code></pre>
<ol start="3">
<li class="lvl-3">
<p>private(私有的)</p>
</li>
</ol>
<pre class="language-none"><code class="language-none">&#x2F;&#x2F;只在当前类中可见，对实例对象以及子类都不可见
class Animal&#123;
    private move()&#123;
        console.log(&#39;移动&#39;);
    &#125;
&#125;
class Dog extends Animal&#123;
    bark()&#123;
        console.log(&#39;汪&#39;);
        this.move();&#x2F;&#x2F;报错
    &#125;
&#125;</code></pre>
<ol start="4">
<li class="lvl-3">
<p>readonly(只读，不仅class类中可用)</p>
</li>
</ol>
<pre class="language-none"><code class="language-none">&#x2F;*
用来防止在构造函数之外对属性进行赋值，可以在声明时和constructor里面进行赋值
只可以修饰属性，不能修饰方法
下面代码中如果:number没有写，则age会变成字面量类型，如果再在constructor中改变值会报错。
接口或&#123;&#125;表示的对象类型，也可以使用readonly
*&#x2F;
class Persons3&#123;
    readonly age:number&#x3D;18
    constructor()&#123;
        this.age&#x3D;age;
    &#125;
    setAge()&#123;
        this.age&#x3D;20&#x2F;&#x2F;报错
    &#125;
&#125;
interface readi&#123;
    readonly age:18
&#125;
let obji:&#123;readonly age:number&#125;&#x3D;&#123;
    age:18
&#125;</code></pre>
<h4 id="类型兼容性">类型兼容性</h4>
<p>    TypeScript采用的是结构化类型系统，也叫做duck typing（鸭子类型），如果两个对象具有相同的形状，则认为它们属于同一类型。<br>
    在Java、c#中，它们是标明类型系统，不会根据具有相同形状来判度。</p>
<pre class="language-none"><code class="language-none">class Pointl&#123;x!:number;y!:number&#125;
class pointl2D&#123;x!:number;y!:number&#125;
const pl:Pointl&#x3D;new pointl2D();
&#x2F;&#x2F;在TypeScript看来Pointl和pointl2D是同一类型</code></pre>
<h5 id="对象之间的类型兼容性">对象之间的类型兼容性</h5>
<p>    对于对象类型来说，y的成员至少与x相同，则x兼容y（成员多的可以兼容少的）。</p>
<pre class="language-none"><code class="language-none">class pointl2D&#123;x!:number;y!:number&#125;
class pointl3D&#123;x!:number;y!:number;z!:number&#125;
const ppl:Pointl&#x3D;new pointl3D();</code></pre>
<h5 id="接口之间的类型兼容性">接口之间的类型兼容性</h5>
<pre class="language-none"><code class="language-none">interface Int1&#123;
    x:number
    y:number
&#125;
interface Int2&#123;
    x:number
    y:number
&#125;
interface Int3&#123;
    x:number
    y:number
    z:number
&#125;
let inte1:Int1&#x3D;&#123;x:1,y:2&#125;;
let inte2:Int2&#x3D;&#123;x:1,y:2&#125;;
let inte3:Int3&#x3D;&#123;x:1,y:2,z:3&#125;;
inte1&#x3D;inte2;
inte2&#x3D;inte1;
inte1&#x3D;inte3;
inte3&#x3D;inte1;&#x2F;&#x2F;报错</code></pre>
<h5 id="class与interface之间的兼容性">class与interface之间的兼容性</h5>
<pre class="language-none"><code class="language-none">interface ic1&#123;
    x:number
    y:number
&#125;
class ic2&#123;
    x!:number
    y!:number
&#125;
let ict:ic1&#x3D;new ic2();</code></pre>
<h5 id="函数之间的兼容性">函数之间的兼容性</h5>
<p>    函数之间兼容性要考虑三个方面。</p>
<ol>
<li class="lvl-3">
<p>参数个数<br>
    参数多的兼容参数少的。（参数少的可以赋值给参数多的）</p>
</li>
</ol>
<pre class="language-none"><code class="language-none">type F1&#x3D;(a:number)&#x3D;&gt;void
type F2&#x3D;(a:number,b:number)&#x3D;&gt;void
let f1:F1&#x3D;(a)&#x3D;&gt;&#123;&#125;;
let f2:F2&#x3D;(a,b)&#x3D;&gt;&#123;&#125;;
f2&#x3D;f1;
f1&#x3D;f2;&#x2F;&#x2F;报错</code></pre>
<ol start="2">
<li class="lvl-3">
<p>参数类型<br>
    相同位置的参数类型要相同（原始类型）或兼容（对象类型）</p>
</li>
</ol>
<pre class="language-none"><code class="language-none">type F1&#x3D;(a:number,b:string)&#x3D;&gt;void
type F2&#x3D;(a:number,b:number)&#x3D;&gt;void
let f1:F1&#x3D;(a,b)&#x3D;&gt;&#123;&#125;;
let f2:F2&#x3D;(a,b)&#x3D;&gt;&#123;&#125;;
f2&#x3D;f1;&#x2F;&#x2F;报错</code></pre>
<pre class="language-none"><code class="language-none">interface ic1&#123;
    x:number
    y:number
&#125;
class ic2&#123;
    x!:number
    y!:number
&#125;
type F1&#x3D;(a:number,b:ic1)&#x3D;&gt;void
type F2&#x3D;(a:number,b:ic2)&#x3D;&gt;void
let f1:F1&#x3D;(a,b)&#x3D;&gt;&#123;&#125;;
let f2:F2&#x3D;(a,b)&#x3D;&gt;&#123;&#125;;
f2&#x3D;f1;</code></pre>
<ol start="3">
<li class="lvl-3">
<p>返回值类型</p>
<ul class="lvl-2">
<li class="lvl-6">如果返回值类型是原始类型，此时两个类型要相同</li>
</ul>
</li>
</ol>
 <pre class="language-none"><code class="language-none">type F5&#x3D;()&#x3D;&gt;string;
type F6&#x3D;()&#x3D;&gt;string;
let f5:F5&#x3D;()&#x3D;&gt;&#39;1&#39;;
let f6:F6&#x3D;()&#x3D;&gt;&#39;1&#39;;
f6&#x3D;f5;</code></pre>
<pre><code>- 如果返回值类型是对象类型，此时成员多的可以赋值给成员少的（和对象类型一直）
</code></pre>
<pre class="language-none"><code class="language-none">type F7&#x3D;()&#x3D;&gt;&#123;name:string&#125;
type F8&#x3D;()&#x3D;&gt;&#123;name:string;age:number&#125;
let f7:F7&#x3D;()&#x3D;&gt;&#123;return&#123;
    name:&#39;111&#39;
&#125;&#125;;
let f8:F8&#x3D;()&#x3D;&gt;&#123;return&#123;
    name:&#39;111&#39;,
    age:10
&#125;&#125;;
f7&#x3D;f8;
f8&#x3D;f7;&#x2F;&#x2F;报错</code></pre>
<h4 id="交叉类型">交叉类型(&amp;)</h4>
<p>    交叉类型&amp;功能类似于接口的继承，用于组合多个类型为一个类型（常用于对象类型）</p>
<pre class="language-none"><code class="language-none">interface jio1&#123;name:string&#125;
interface jio2&#123;age:number&#125;
type Jio &#x3D; jio1&amp;jio2;
let obj:Jio&#x3D;&#123;
    name:&#39;111&#39;,
    age:10
&#125;</code></pre>
<h5 id="交叉类型于接口继承的对比">交叉类型于接口继承的对比</h5>
<ol>
<li class="lvl-3">
<p>相同点<br>
    都可以实现对象类型的组合。</p>
</li>
<li class="lvl-3">
<p>不同点<br>
    两种方式实现类型组合时，对于同名属性之间，处理类型冲突的方式不同。</p>
</li>
</ol>
<pre class="language-none"><code class="language-none">interface A&#123;
    fn(a:number):string
&#125;
interface B extends A&#123;&#x2F;&#x2F;报错，类型不兼容
    fn(a:string):string
&#125;</code></pre>
<pre class="language-none"><code class="language-none">interface A&#123;
    fn(a:number):string
&#125;
interface B&#123;
    fn(a:string):string
&#125;
type C &#x3D; A &amp; B</code></pre>
<p>    对于C我们可以理解为一下代码</p>
<pre class="language-none"><code class="language-none">interface A&#123;
    fn(a:number):string
&#125;
interface B&#123;
    fn(a:string):number
&#125;
type C &#x3D; A &amp; B

class cc implements C&#123;
    fn(a: number): string;
    fn(a: string): number;
    fn(a: unknown): string | number &#123;
        return &#39;&#39;
    &#125;
&#125;</code></pre>
<h4 id="泛型">泛型</h4>
<p>    泛型可以在保护类型安全的前提下，让函数等多种类型一起工作，从而实现复用。例：实现一个函数，输入什么数据就返回什么数据。</p>
<pre class="language-none"><code class="language-none">function id&lt;Type&gt;(value:Type):Type&#123;
    return value
&#125;
id&lt;number&gt;(10);
id(10);&#x2F;&#x2F;如果编译器推断的类型不准确，我们必须在括号前声明类型
id&lt;string&gt;(10);&#x2F;&#x2F;报错
&#x2F;&#x2F;Type也可以写成别的合法名称</code></pre>
<h5 id="泛型约束">泛型约束</h5>
<pre class="language-none"><code class="language-none">function id2&lt;Type&gt;(value:Type):Type&#123;
    return value.length&#x2F;&#x2F;报错
&#125;</code></pre>
<p>    添加泛型约束</p>
<ol>
<li class="lvl-3">
<p>指定更加具体的类型</p>
</li>
</ol>
<pre class="language-none"><code class="language-none">function ida&lt;type&gt;(value:type[]):type[]&#123;
    return value.length
&#125;</code></pre>
<ol start="2">
<li class="lvl-3">
<p>extends添加约束</p>
</li>
</ol>
<pre class="language-none"><code class="language-none">interface ILength&#123;length:number&#125;;
function ide&lt;type extends ILength&gt;(value:type):type&#123;
    console.log(value.length);
    return value
&#125;
ide([]);
ide(&#39;&#39;);
ide(&#123;length:0,name:&#39;0&#39;&#125;);</code></pre>
<h5 id="多个泛型变量的情况">多个泛型变量的情况</h5>
<p>    keyof关键字接收一个对象类型，生成其键名称（可能是字符串或数字）的联合类型</p>
<pre class="language-none"><code class="language-none">function getProp&lt;Type,Key extends keyof Type&gt;(obj:Type,key:Key)&#123;
    return obj[key];
&#125;
let objkey&#x3D;&#123;name:&#39;11&#39;&#125;;
getProp(objkey,&#39;name&#39;);
getProp(objkey,&#39;age&#39;);&#x2F;&#x2F;报错
getProp([],0);
getProp(0,&#39;toString&#39;);</code></pre>
<h5 id="泛型接口">泛型接口</h5>
<pre class="language-none"><code class="language-none">interface IdFunc&lt;Type&gt;&#123;
    id:(value:Type)&#x3D;&gt;Type
    ids:()&#x3D;&gt;Type[]
&#125;
let func1:IdFunc&lt;number&gt;&#x3D;&#123;
    id(value) &#123;
        return value
    &#125;,
    ids() &#123;
        return []
    &#125;,
&#125;</code></pre>
<h5 id="数组就是泛型接口">数组就是泛型接口</h5>
<p>    可以点击去数组的forEach源码来查看。</p>
<h5 id="泛型类">泛型类</h5>
<p>    在React的class组件中的基类Component就是泛型类，不同的组件有不同的props和state。</p>
<pre class="language-none"><code class="language-none">interface IState&#123;count:number&#125;
interface IProps&#123;maxLength:number&#125;
class InputCount extends React.Component&lt;IProps,IState&gt;&#123;
    state:IState&#123;
        const:0
    &#125;
    render()&#123;
        return &lt;div&gt;&#123;this.props.maxLength&#125;&lt;&#x2F;div&gt;
    &#125;
&#125;</code></pre>
<p>    创建泛型类</p>
<pre class="language-none"><code class="language-none">class Generic&lt;NumType&gt;&#123;
    defaultVlaue!:NumType
    add!:(x:NumType,y:NumType)&#x3D;&gt;NumType
&#125;
const myGen &#x3D; new Generic&lt;number&gt;()
myGen.defaultVlaue&#x3D;10</code></pre>
<h5 id="泛型工具类型">泛型工具类型</h5>
<p>    TypaScript内置了一些常用的工具类型，来简化TypeScript中的一些常见操作。</p>
<ol>
<li class="lvl-3">
<p>Partial<Type><br>
    用来构造（创建）一个类型，将Type的所有属性设置为可选。</p>
</li>
</ol>
<pre class="language-none"><code class="language-none">interface PropsP&#123;
    id:string
    children:number[]
&#125;
type PartialProps &#x3D; Partial&lt;PropsP&gt;
class classProps implements PartialProps&#123;
    id!: string;
&#125;</code></pre>
<ol start="2">
<li class="lvl-3">
<p>Readonly<Type><br>
    用来构造一个类型，将Type的所用属性都设置为readonly（只读）</p>
</li>
</ol>
<pre class="language-none"><code class="language-none">interface PropsR&#123;
    id:string
    children:number[]
&#125;
type ReadonlyProps &#x3D; Readonly&lt;PropsP&gt;
let rp:ReadonlyProps&#x3D;&#123;
    id:&#39;1&#39;,
    children:[]
&#125;
rp.id&#x3D;&#39;2&#39;&#x2F;&#x2F;报错</code></pre>
<ol start="3">
<li class="lvl-3">
<p>Pick<Type><br>
    从Type中选择一组属性来构造新类型。</p>
</li>
</ol>
<pre class="language-none"><code class="language-none">interface PropsPi&#123;
    id:string
    children:number[]
&#125;
type PickProps &#x3D; Pick&lt;PropsPi,&#39;id&#39;&gt;
let pp:PickProps&#x3D;&#123;
    id:&#39;1&#39;,
    children:[]&#x2F;&#x2F;报错
&#125;
&#x2F;&#x2F;PickProps类型中只有id，所以会报错。</code></pre>
<ol start="4">
<li class="lvl-3">
<p>Record&lt;Keys,Type&gt;<br>
    构造一个对象类型，属性键为Keys，属性类型为Type。Record传入两个类型变量，第一个表示对象有哪些属性，第二个表示对象属性的类型。</p>
</li>
</ol>
<pre class="language-none"><code class="language-none">type RecordObj&#x3D;Record&lt;&#39;a&#39;|&#39;b&#39;|&#39;c&#39;,string[]&gt;
let objRec:RecordObj&#x3D;&#123;
    a:[&#39;1&#39;],
    b:[&#39;1&#39;],
    c:[&#39;1&#39;]
&#125;</code></pre>
<h5 id="索引签名类型">索引签名类型</h5>
<p>    当无法确认对象中有哪些属性或者说对象中可以出现任意多个属性，此时就用到索引签名类型了。</p>
<pre class="language-none"><code class="language-none">interface AnyObject&#123;
    [Key:string]:number
&#125;
let anyobj:AnyObject&#x3D;&#123;
    a:1,
    &#39;b&#39;:2,
&#125;
&#x2F;&#x2F;Key只是一个占位符，可以换成任意合法的变量名称。</code></pre>
<h4 id="映射类型">映射类型</h4>
<pre class="language-none"><code class="language-none">type PropKeys&#x3D;&#39;x&#39;|&#39;y&#39;|&#39;z&#39;
type Type1&#x3D;&#123;x:number;y:number;z:number&#125;
type Type2&#x3D;&#123;[Key in PropKeys]:number&#125;&#x2F;&#x2F;映射
&#x2F;&#x2F;Key只是一个占位符，可以换成任意合法的变量名称</code></pre>
<pre class="language-none"><code class="language-none">type Props&#x3D;&#123;a:number,b:string,c:boolean&#125;
type Type3&#x3D;&#123;[Key in keyof Props]:number&#125;</code></pre>
<h5 id="分析泛型工具类型Partial的实现">分析泛型工具类型Partial的实现</h5>
<pre class="language-none"><code class="language-none">type Partials&lt;T&gt;&#x3D;&#123;
    [P in keyof T]?:T[P]
&#125;
type ParText&#x3D;&#123;a:number;b:string;c:boolean&#125;
type part&#x3D;Partials&lt;ParText&gt;</code></pre>
<h4 id="索引查询类型">索引查询类型</h4>
<ol>
<li class="lvl-3">
<p>基本使用</p>
</li>
</ol>
<pre class="language-none"><code class="language-none">type Propsi&#x3D;&#123;a:number;b:number;c:number&#125;
type Tyepi&#x3D;Propsi[&#39;a&#39;];</code></pre>
<ol start="2">
<li class="lvl-3">
<p>查询多个</p>
</li>
</ol>
<pre class="language-none"><code class="language-none">type Propsi&#x3D;&#123;a:number;b:number;c:number&#125;
type Tyepi2&#x3D;Propsi[&#39;a&#39;|&#39;b&#39;];
type Tyepi3&#x3D;Propsi[keyof Propsi];</code></pre>
<h3 id="类型声明文件">类型声明文件</h3>
<h4 id="TypeScript中的两种文件类型">TypeScript中的两种文件类型</h4>
<p>    今天几乎所有的JavaScript应用都会引入许多第三方库来完成任务需求。这些第三方库不管是否是用TS编写的，最终都要编译成JS代码,才能发布给开发者使用。我们知道是TS提供了类型，才有了代码提示和类型保护等机制。但在项目开发中使用第三方库时，你会发现它们几乎都有相应的TS类型，这些类型是怎么来的呢?类型声明文件:用来为已存在的JS库提供类型信息。这样在TS项目中使用这些库时，就像用TS-样，都会有代码提示、类型保护等机制了。</p>
<ol>
<li class="lvl-3">
<p>TS的两种文件类型</p>
<ul class="lvl-2">
<li class="lvl-6">.ts文件
<ol>
<li class="lvl-11">既包含类型信息又可执行代码</li>
<li class="lvl-11">可以被编译为.js文件，然后执行代码</li>
<li class="lvl-11">用途：编写程序代码的地方</li>
</ol>
</li>
</ul>
</li>
<li class="lvl-3">
<p>类型声明文件的使用说明</p>
<ul class="lvl-2">
<li class="lvl-6">.d.ts文件
<ol>
<li class="lvl-11">只包含类型信息的类型声明文件</li>
<li class="lvl-11">不会生成.js文件，仅用于提供类型信息</li>
<li class="lvl-11">用途：为js提供类型信息<br>
※.ts事代码实现文件；.d.ts事类型声明文件</li>
</ol>
</li>
</ul>
</li>
</ol>
<h4 id="第三方库的类型声明文件">第三方库的类型声明文件</h4>
<ol>
<li class="lvl-3">
<p>库自带的类型声明文件</p>
</li>
<li class="lvl-3">
<p><a href="https://www.typescriptlang.org/dt/search?search=">由DefinitelyTyped提供</a></p>
</li>
</ol>
<h4 id="创建自己的类型说明文件">创建自己的类型说明文件</h4>
<ol>
<li class="lvl-3">
<p>项目内共享类型<br>
    如果多个.ts文件中都用到同一个类型，此时可以创建.d.ts文件提供该类型，实现类型共享。</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-2">
<p>操作步骤</p>
<ol>
<li class="lvl-7">创建index.d.ts事类型声明文件</li>
<li class="lvl-7">创建需要共享的类型，并使用export导出（TypeScript中的类型也可以使用import/export实现模块化功能）</li>
<li class="lvl-7">在需要使用共享类型的.ts文件中，通过import导入即可（.d.ts后缀导入时，直接省略）</li>
</ol>
</li>
</ul>
<ol start="2">
<li class="lvl-3">
<p>为已有JS文件提供类型声明</p>
<ol>
<li class="lvl-7">在将JS项目迁移到TS项目时，为了让已有的js文件有类型声明。</li>
<li class="lvl-7">成为库作者， 创建库给其他人使用。</li>
</ol>
<ul class="lvl-2">
<li class="lvl-6">说明：TypeScript项目中也可以使用.js文件，在导入.js文件时，TypeScript会自动加载与.js同名的.d.ts文件，以提供类型声明。declare关键字：用于类型声明，为其他地方（比如.js文件）已存在的变量声明类型，而不是创建一个新的类型。
<ol>
<li class="lvl-11">对于type. interface 等这些明确就是TS类型的(只能在TS中使用的)，可以省略declare关键字。</li>
<li class="lvl-11">对于let. function等具有双重含义(在JS、TS中都能用)，应该使用declare关键字，明确指定此处用于类型声明。</li>
</ol>
</li>
</ul>
</li>
</ol>
<h3 id="在React中使用TypeScript">在React中使用TypeScript</h3>
<h4 id="使用CRA创建支持TypeScript的项目">使用CRA创建支持TypeScript的项目</h4>
<p>    创建支持TypeScript的项目的命令：npx create-react-app 项目名。<a href="https://create-react-app.dev/docs/adding-typescript">在已有项目中使用TypeScript</a><br>
    相对于非TypeScript项目，目录结构主要由以下三个变化。</p>
<ol>
<li class="lvl-3">
<p>项目根目录中增加了tsconfig.json 配置文件:指定TS的编译选项(比如，编译时是否移除注释)。</p>
</li>
<li class="lvl-3">
<p>React 组件的文件扩展名变为: *.tsx。</p>
</li>
<li class="lvl-3">
<p>src目录中增加了react-app-env.d.ts: React项目默认的类型声明文件。</p>
</li>
<li class="lvl-3">
<p>react-app-env.d.ts文件中三斜线指令，指定依赖的其他类型声明文件，types表示依赖的类型声明文件包的名称。</p>
</li>
</ol>
<h4 id="TypeScript配置文件tsconfig-json">TypeScript配置文件tsconfig.json</h4>
<pre class="language-none"><code class="language-none">&#123;
  &quot;compilerOptions&quot;: &#123;
    &quot;target&quot;: &quot;es6&quot;,&#x2F;&#x2F;生成代码的语言版本
    &quot;lib&quot;: [&#x2F;&#x2F;指定要包含在编译中的library
      &quot;dom&quot;,
      &quot;dom.iterable&quot;,
      &quot;esnext&quot;
    ],
    &quot;allowJs&quot;: true,&#x2F;&#x2F;允许ts编译器编译js文件
    &quot;skipLibCheck&quot;: true,&#x2F;&#x2F;跳过声明文件的类型检查
    &quot;esModuleInterop&quot;: true,&#x2F;&#x2F;es模块互操作，屏蔽ESModule和CommonJS之间的差异
    &quot;allowSyntheticDefaultImports&quot;: true,&#x2F;&#x2F;允许使用import
    &quot;strict&quot;: true,&#x2F;&#x2F;开启严格模式
    &quot;forceConsistentCasingInFileNames&quot;: true,&#x2F;&#x2F;对文件名称强制区分大小写
    &quot;noFallthroughCasesInSwitch&quot;: true,&#x2F;&#x2F;为switch语句启用报错报告
    &quot;module&quot;: &quot;esnext&quot;,&#x2F;&#x2F;生成代码的模块化标准
    &quot;moduleResolution&quot;: &quot;node&quot;,&#x2F;&#x2F;模块解析（查找）策略
    &quot;resolveJsonModule&quot;: true,&#x2F;&#x2F;允许导入扩展名为.json的模块
    &quot;isolatedModules&quot;: true,&#x2F;&#x2F;是否将没有import&#x2F;export的文件规为旧（全局而非模块化）脚本文件
    &quot;noEmit&quot;: true,&#x2F;&#x2F;编译时不生产任何文件（只进行类型检查）
    &quot;jsx&quot;: &quot;react-jsx&quot;&#x2F;&#x2F;将指定jsx编译成什么形式
  &#125;,
  &quot;include&quot;: [&#x2F;&#x2F;指定允许ts处理的目录
    &quot;src&quot;
  ]
&#125;</code></pre>
<h4 id="React中常用的类型">React中常用的类型</h4>
<p>    在不使用TypeScript时，可以使用prop-types库，为React组件提供类型检查。在TypeScript项目中，推荐使用TypeScript或Flow实现组件类型校验（代替prop-types）</p>
<h5 id="函数组件">函数组件</h5>
<ol>
<li class="lvl-3">
<p>组件和属性类型</p>
</li>
</ol>
<pre class="language-none"><code class="language-none">&#x2F;&#x2F;组件和属性类型
import React,&#123;FC&#125; from &#39;react&#39;;
type Props&#x3D;&#123;name:string;age?:number&#125;
const Hello:FC&lt;Props&gt;&#x3D;(&#123;name,age&#125;)&#x3D;&gt;(
  &lt;div&gt;你好，我叫：&#123;name&#125;，我&#123;age&#125;岁了&lt;&#x2F;div&gt;
)
const Hello2&#x3D;(&#123;name,age&#125;:Props)&#x3D;&gt;(
  &lt;div&gt;你好，我叫：&#123;name&#125;，我&#123;age&#125;岁了&lt;&#x2F;div&gt;
)</code></pre>
<ol start="2">
<li class="lvl-3">
<p>组件属性的默认值(defaultProps)</p>
</li>
</ol>
<pre class="language-none"><code class="language-none">&#x2F;&#x2F;属性默认值
import React,&#123;FC&#125; from &#39;react&#39;;
const Hello:FC&lt;Props&gt;&#x3D;(&#123;name,age&#125;)&#x3D;&gt;(
  &lt;div&gt;你好，我叫：&#123;name&#125;，我&#123;age&#125;岁了&lt;&#x2F;div&gt;
)
Hello.defaultProps&#x3D;&#123;
  age:18
&#125;
const Hello2&#x3D;(&#123;name,age&#x3D;18&#125;:Props)&#x3D;&gt;(
  &lt;div&gt;你好，我叫：&#123;name&#125;，我&#123;age&#125;岁了&lt;&#x2F;div&gt;
)</code></pre>
<ol start="3">
<li class="lvl-3">
<p>事件绑定和事件对象</p>
</li>
</ol>
<pre class="language-none"><code class="language-none">&#x2F;&#x2F;事件与事件对象
import React from &#39;react&#39;

export default function Test() &#123;
  function onclick(e:React.MouseEvent&lt;HTMLButtonElement&gt;)&#123;
    console.log(e.currentTarget);
  &#125;
  function onchange(e:React.ChangeEvent&lt;HTMLInputElement&gt;)&#123;
    console.log(e.target);
    
  &#125;
  return (
    &lt;div&gt;
      &lt;button onClick&#x3D;&#123;onclick&#125;&gt;你点我一下&lt;&#x2F;button&gt;
      &lt;input type&#x3D;&quot;text&quot; onChange&#x3D;&#123;onchange&#125; &#x2F;&gt;
    &lt;&#x2F;div&gt;
  )
&#125;</code></pre>
<h5 id="类组件">类组件</h5>
<ol>
<li class="lvl-3">
<p>组件和类型</p>
</li>
</ol>
<pre class="language-none"><code class="language-none">type State &#x3D; &#123; count: number &#125;
type Props &#x3D; &#123; message? :string &#125;
class C1 extends React.Component &#125;&#x2F;&#x2F; 无props、state
class C2 extends React.Component&lt;Props&gt; &#123;&#125;&#x2F;&#x2F;有props,无state
class C3 extends React.Component&lt;&#123;&#125;, State&gt; &#125;&#x2F;&#x2F;无props, 有state
class C4 extends React.Component&lt;Props, State&gt; 年&#125; &#x2F;&#x2F;有props、state</code></pre>
<ol start="2">
<li class="lvl-3">
<p>组件属性和默认值</p>
</li>
</ol>
<pre class="language-none"><code class="language-none">import React, &#123; Component &#125; from &#39;react&#39;
type Props &#x3D; &#123; name:string;age?:number &#125;
export default class TestClass extends Component&lt;Props&gt; &#123;
  static defaultProps:Partial&lt;Props&gt;&#x3D;&#123;
    age:14
  &#125;
  render() &#123;
    const &#123;name,age&#x3D;18&#125; &#x3D; this.props
    return (
      &lt;div&gt;
        你好，我叫：&#123;name&#125;，我&#123;age&#125;岁了
      &lt;&#x2F;div&gt;
    )
  &#125;
&#125;</code></pre>
<ol start="3">
<li class="lvl-3">
<p>状态与事件</p>
</li>
</ol>
<pre class="language-none"><code class="language-none">import React, &#123; Component &#125; from &#39;react&#39;
type State &#x3D; &#123; count:number &#125;
export default class TestClass extends Component&lt;&#123;&#125;,State&gt; &#123;
  state:State&#x3D;&#123;
    count:0
  &#125;
  add&#x3D;()&#x3D;&gt;&#123;
    this.setState(&#123;
        count:this.state.count+1
    &#125;)
  &#125;
  render() &#123;
    return (
      &lt;div&gt;
        &#123;this.state.count&#125;
        &lt;button onClick&#x3D;&#123;this.add&#125;&gt;+1&lt;&#x2F;button&gt;
      &lt;&#x2F;div&gt;
    )
  &#125;
&#125;</code></pre>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
  </entry>
  <entry>
    <title>一些特殊情况的说明</title>
    <url>/2022/10/25/typeScript/%E4%B8%80%E4%BA%9B%E7%89%B9%E6%AE%8A%E6%83%85%E5%86%B5%E7%9A%84%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="一些特殊情况的说明">一些特殊情况的说明</h2>
<h3 id="IsEqual">IsEqual</h3>
<p>我们都知道IsEqual是这样写的</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">IsEqual<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span><span class="token constant">B</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>但是这样判断any类型就有问题</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">test</span> <span class="token operator">=</span> IsEqual<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment">//返回的是true</span></code></pre>
<p>我们改进成这样写</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">IsEqual<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span><span class="token constant">B</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">test</span> <span class="token operator">=</span> IsEqual<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h3 id="extends左右类型的位置换一下就报错了">extends左右类型的位置换一下就报错了</h3>
<p>这是我们以前写的，做加法的类型。</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">BuildArray<span class="token operator">&lt;</span>
  Length <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  Ele <span class="token operator">=</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span>
  Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">></span></span> <span class="token operator">=</span> Arr<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Length</span> <span class="token operator">?</span>
    Arr <span class="token operator">:</span>
    BuildArray<span class="token operator">&lt;</span>Length<span class="token punctuation">,</span>Ele<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">...</span>Arr<span class="token punctuation">,</span>Ele<span class="token punctuation">]</span><span class="token operator">></span>
<span class="token keyword">type</span> <span class="token class-name">Add<span class="token operator">&lt;</span>Num1 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span> Num2 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>BuildArray<span class="token operator">&lt;</span>Num1<span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">...</span>BuildArray<span class="token operator">&lt;</span>Num2<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">add</span> <span class="token operator">=</span> Add<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<p>我们将其extends左右类型交换一下</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">BuildArray<span class="token operator">&lt;</span>
  Length <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  Ele <span class="token operator">=</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span>
  Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">></span></span> <span class="token operator">=</span> Length <span class="token keyword">extends</span> <span class="token class-name">Arr</span><span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token operator">?</span>
    Arr <span class="token operator">:</span>
    BuildArray<span class="token operator">&lt;</span>Length<span class="token punctuation">,</span>Ele<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">...</span>Arr<span class="token punctuation">,</span>Ele<span class="token punctuation">]</span><span class="token operator">></span>
<span class="token keyword">type</span> <span class="token class-name">Add<span class="token operator">&lt;</span>Num1 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span> Num2 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>BuildArray<span class="token operator">&lt;</span>Num1<span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">...</span>BuildArray<span class="token operator">&lt;</span>Num2<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">add</span> <span class="token operator">=</span> Add<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<p>报错：类型实例化过深，且可能无限。这是为什么呢？我们先来看这串代码</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">test</span> <span class="token operator">=</span> <span class="token builtin">number</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">unknown</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//true</span>
<span class="token keyword">type</span> <span class="token class-name">test2</span> <span class="token operator">=</span> <span class="token builtin">unknown</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//false</span></code></pre>
<p>如果我们没给Arr[‘length’]指定类型，那么它的类型就是unknown，如果把unknown写在extends左侧，那么可能一直是false，那么就会导致报错。</p>
<h3 id="几个条件类型的特殊情况">几个条件类型的特殊情况</h3>
<p>联合类型作为类型参数在条件类型左边的时候，会把每个类型单独传入做计算，并把结果合并成联合类型。</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Test<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">res</span> <span class="token operator">=</span> Test<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">|</span> <span class="token string">'a'</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment">//type res = 1 | 2</span></code></pre>
<p>boolean也是联合类型，是false | true。</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Test<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">res</span> <span class="token operator">=</span> Test<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment">//type res = false | true</span></code></pre>
<p>any类型如果在条件类型的左边，则返回trueType和falseType的联合类型。</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Test<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">res</span> <span class="token operator">=</span> Test<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment">//type res = 1 | 2</span></code></pre>
<p>当条件类型的左侧是never的时候直接返回never</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Test<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">res</span> <span class="token operator">=</span> Test<span class="token operator">&lt;</span><span class="token builtin">never</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment">//type res = never</span></code></pre>
<h3 id="参考资料">参考资料</h3>
<p>[1]<a href="https://juejin.cn/book/7047524421182947366?enter_from=course_center">TypeScript 类型体操通关秘籍</a></p>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
  </entry>
  <entry>
    <title>内置高级类型</title>
    <url>/2022/10/24/typeScript/%E5%86%85%E7%BD%AE%E9%AB%98%E7%BA%A7%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="内置高级类型">内置高级类型</h2>
<h3 id="Parameters">Parameters</h3>
<p>用来提取函数参数的类型</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Parameters<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span></span> <span class="token builtin">any</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">P</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">any</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span></code></pre>
<h3 id="ReturnType">ReturnType</h3>
<p>用来提取函数的返回值类型</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ReturnType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span></span> <span class="token builtin">any</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span></code></pre>
<h3 id="ConstructorParameters">ConstructorParameters</h3>
<p>用来提取构造器的参数类型</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ConstructorParameters<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">abstract</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span></span> <span class="token builtin">any</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">abstract</span></span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">P</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">any</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span></code></pre>
<h3 id="InstanceType">InstanceType</h3>
<p>用来提取构造器的返回值类型</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">InstanceType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">abstract</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span></span> <span class="token builtin">any</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">abstract</span></span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span></code></pre>
<h3 id="Partial">Partial</h3>
<p>用来把索引类型变成可选类型</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Partial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<h3 id="Required">Required</h3>
<p>用来将可选索引类型变成必选类型，也就是Required类型</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Required<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<h3 id="Readonly">Readonly</h3>
<p>用来将索引类型变成只读类型</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Readonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<h3 id="Pick">Pick</h3>
<p>用来对索引进行修改和过滤</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<h3 id="Record">Record</h3>
<p>用来创建索引类型</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Record<span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<h3 id="Exclude">Exclude</h3>
<p>用来删除联合类型的一部分</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Exclude<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span></code></pre>
<h3 id="Extract">Extract</h3>
<p>用来保留联合类型的一部分</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Extract<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span></code></pre>
<h3 id="Omit">Omit</h3>
<p>用来保留索引，也就是和Pick反过来</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Omit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token builtin">any</span><span class="token operator">></span></span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> Exclude<span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">>></span><span class="token punctuation">;</span></code></pre>
<h3 id="Awaited">Awaited</h3>
<p>用来获取Promise的ValueType的类型</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Awaited<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span>
    <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">null</span></span> <span class="token operator">|</span> <span class="token keyword">undefined</span>
        <span class="token operator">?</span> <span class="token constant">T</span> 
        <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span> <span class="token operator">&amp;</span> <span class="token punctuation">&#123;</span> <span class="token function">then</span><span class="token punctuation">(</span>onfulfilled<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">F</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">&#125;</span>
            <span class="token operator">?</span> <span class="token constant">F</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">V</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">any</span><span class="token punctuation">)</span>
                <span class="token operator">?</span> Awaited<span class="token operator">&lt;</span><span class="token constant">V</span><span class="token operator">></span>
                <span class="token operator">:</span> <span class="token builtin">never</span> 
            <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span></code></pre>
<h3 id="NonNullable">NonNullable</h3>
<p>用来判断是否为非空类型</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">NonNullable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">null</span></span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span></code></pre>
<h3 id="ThisParameterType">ThisParameterType</h3>
<p>用来约束this</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ThisParameterType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> 
    <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">any</span> 
        <span class="token operator">?</span> <span class="token constant">U</span> 
        <span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">;</span></code></pre>
<h3 id="OmitThisParameter">OmitThisParameter</h3>
<p>用来提取this</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">OmitThisParameter<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> 
    <span class="token builtin">unknown</span> <span class="token keyword">extends</span> <span class="token class-name">ThisParameterType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> 
        <span class="token operator">?</span> <span class="token constant">T</span> 
        <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">A</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">infer</span> <span class="token constant">R</span> 
            <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token constant">A</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">R</span> 
            <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>typescript</category>
      </categories>
  </entry>
  <entry>
    <title>匹配模式做提取</title>
    <url>/2022/10/23/typeScript/%E5%A5%97%E8%B7%AF%E4%B8%80%E3%80%81%E5%8C%B9%E9%85%8D%E6%A8%A1%E5%BC%8F%E5%81%9A%E6%8F%90%E5%8F%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="匹配模式做提取">匹配模式做提取</h2>
<h3 id="数组类型">数组类型</h3>
<h4 id="提取数组的第一个元素的类型">提取数组的第一个元素的类型</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">GetFirst<span class="token operator">&lt;</span>Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> Arr <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> First<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">?</span> First <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">arr</span> <span class="token operator">=</span> GetFirst<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h4 id="提取数组的最后一个元素的类型">提取数组的最后一个元素的类型</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">GetLast<span class="token operator">&lt;</span>Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> Arr <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">infer</span> Last<span class="token punctuation">]</span> <span class="token operator">?</span> Last <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">arr</span> <span class="token operator">=</span> GetLast<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h4 id="去掉数组最后一个元素的类型">去掉数组最后一个元素的类型</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">PopArr<span class="token operator">&lt;</span>Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> Arr <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> Arr <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">infer</span> Rest<span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token punctuation">]</span> <span class="token operator">?</span> Rest <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">arr</span> <span class="token operator">=</span> PopArr<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h4 id="去掉数组第一个元素的类型">去掉数组第一个元素的类型</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ShiftArr<span class="token operator">&lt;</span>Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> Arr <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> Arr <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">unknown</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> Rest<span class="token punctuation">]</span> <span class="token operator">?</span> Rest <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">arr</span> <span class="token operator">=</span> ShiftArr<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h3 id="字符串类型">字符串类型</h3>
<h4 id="判断字符串是否以某个前缀开始">判断字符串是否以某个前缀开始</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">StartsWith<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>Prefix <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">></span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Prefix<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token builtin">string</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">str</span> <span class="token operator">=</span> StartsWith<span class="token operator">&lt;</span><span class="token string">'111 222'</span><span class="token punctuation">,</span><span class="token string">'111'</span><span class="token operator">></span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">str2</span> <span class="token operator">=</span> StartsWith<span class="token operator">&lt;</span><span class="token string">'111 222'</span><span class="token punctuation">,</span><span class="token string">'222'</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h4 id="字符串替换">字符串替换</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ReplaceStr<span class="token operator">&lt;</span>
  Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  From <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  To <span class="token keyword">extends</span> <span class="token builtin">string</span>
<span class="token operator">></span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Prefix<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>From<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Suffix<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span>
    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Prefix<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>To<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Suffix<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> Str
<span class="token keyword">type</span> <span class="token class-name">str</span> <span class="token operator">=</span> ReplaceStr<span class="token operator">&lt;</span><span class="token string">'111 2 333'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h4 id="递归去除字符串中的右侧空格">递归去除字符串中的右侧空格</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">TrimStringRight<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">></span></span> <span class="token operator">=</span> 
Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Rest<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token string">' '</span><span class="token operator">|</span><span class="token string">'\n'</span><span class="token operator">|</span><span class="token string">'\t'</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span>
TrimStringRight<span class="token operator">&lt;</span>Rest<span class="token operator">></span> <span class="token operator">:</span> Str<span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">str</span> <span class="token operator">=</span> TrimStringRight<span class="token operator">&lt;</span><span class="token string">'   111   '</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h4 id="递归去除字符串中的左侧空格">递归去除字符串中的左侧空格</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">TrimStringLeft<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">></span></span> <span class="token operator">=</span> 
Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token string">' '</span><span class="token operator">|</span><span class="token string">'\n'</span><span class="token operator">|</span><span class="token string">'\t'</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Rest<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span>
TrimStringLeft<span class="token operator">&lt;</span>Rest<span class="token operator">></span> <span class="token operator">:</span> Str<span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">str</span> <span class="token operator">=</span> TrimStringLeft<span class="token operator">&lt;</span><span class="token string">'   111   '</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h4 id="递归去除字符串中的左右侧空格">递归去除字符串中的左右侧空格</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">TrimStr<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">></span></span> <span class="token operator">=</span> TrimStringRight<span class="token operator">&lt;</span>TrimStringLeft<span class="token operator">&lt;</span>Str<span class="token operator">>></span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">str</span> <span class="token operator">=</span> TrimStr<span class="token operator">&lt;</span><span class="token string">'   1 1 1   '</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h3 id="函数">函数</h3>
<h4 id="提取参数的类型">提取参数的类型</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">GetParameters<span class="token operator">&lt;</span>Func <span class="token keyword">extends</span> <span class="token builtin">Function</span><span class="token operator">></span></span> <span class="token operator">=</span> Func <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span><span class="token keyword">infer</span> Args<span class="token punctuation">)</span><span class="token operator">=></span><span class="token builtin">unknown</span> <span class="token operator">?</span> Args <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">func</span> <span class="token operator">=</span> GetParameters<span class="token operator">&lt;</span><span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">void</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h4 id="提取返回值">提取返回值</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">GetReturnType<span class="token operator">&lt;</span>Func <span class="token keyword">extends</span> <span class="token builtin">Function</span><span class="token operator">></span></span> <span class="token operator">=</span> Func <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">infer</span> ReturnType <span class="token operator">?</span> ReturnType <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">func</span> <span class="token operator">=</span> GetReturnType<span class="token operator">&lt;</span><span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">void</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h4 id="提取函数中的this">提取函数中的this</h4>
<p>因为如果我们new一个实例，那么它的this是不会变动的，我们使用call等函数改变this指向是错误的，所以我们要写一个改变this就报错的匹配模式。</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">GetThisParameterType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span><span class="token keyword">infer</span> ThisType<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span><span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token builtin">unknown</span> <span class="token operator">?</span> ThisType <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Dong</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"dong"</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">hello</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> Dong<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token string">'hello, I\'m '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> dong <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">func</span> <span class="token operator">=</span> GetThisParameterType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> dong<span class="token punctuation">.</span>hello<span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h3 id="构造器">构造器</h3>
<h4 id="匹配提取出实例对象">匹配提取出实例对象</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">interface</span> <span class="token class-name">PersonConstructor</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">new</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span>Person
<span class="token punctuation">&#125;</span>
<span class="token keyword">type</span> <span class="token class-name">GetInstanceType<span class="token operator">&lt;</span>ConstructorType <span class="token keyword">extends</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token operator">...</span>arg<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">=></span></span><span class="token builtin">any</span><span class="token operator">></span> <span class="token operator">=</span> 
ConstructorType <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">new</span></span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">infer</span> InstanceType <span class="token operator">?</span> InstanceType <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">person</span> <span class="token operator">=</span> GetInstanceType<span class="token operator">&lt;</span>PersonConstructor<span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h4 id="提取构造器的参数">提取构造器的参数</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">interface</span> <span class="token class-name">PersonConstructor</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">new</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span>Person
<span class="token punctuation">&#125;</span>
<span class="token keyword">type</span> <span class="token class-name">GetConstructorParameters<span class="token operator">&lt;</span>ConstructorType <span class="token keyword">extends</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">=></span></span><span class="token builtin">any</span><span class="token operator">></span> <span class="token operator">=</span> 
ConstructorType <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">new</span></span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span><span class="token keyword">infer</span> ParametersType<span class="token punctuation">)</span><span class="token operator">=></span><span class="token builtin">any</span> <span class="token operator">?</span> ParametersType <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">person</span> <span class="token operator">=</span> GetConstructorParameters<span class="token operator">&lt;</span>PersonConstructor<span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h3 id="索引类型">索引类型</h3>
<h4 id="提取ref的值的类型">提取ref的值的类型</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">GetRefProps<span class="token operator">&lt;</span>Props<span class="token operator">></span></span> <span class="token operator">=</span> <span class="token string">'ref'</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> Props <span class="token operator">?</span>
  Props <span class="token keyword">extends</span> <span class="token punctuation">&#123;</span>ref<span class="token operator">?</span><span class="token operator">:</span><span class="token keyword">infer</span> Value<span class="token operator">|</span><span class="token keyword">undefined</span><span class="token punctuation">&#125;</span> <span class="token operator">?</span> Value <span class="token operator">:</span> <span class="token builtin">never</span>
<span class="token operator">:</span> <span class="token builtin">never</span>
<span class="token keyword">type</span> <span class="token class-name">ref</span> <span class="token operator">=</span> GetRefProps<span class="token operator">&lt;</span><span class="token punctuation">&#123;</span>ref<span class="token operator">:</span> <span class="token string">'1'</span><span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h3 id="参考资料">参考资料</h3>
<p>[1]<a href="https://juejin.cn/book/7047524421182947366?enter_from=course_center">TypeScript 类型体操通关秘籍</a></p>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
  </entry>
  <entry>
    <title>递归复用做循环</title>
    <url>/2022/10/24/typeScript/%E5%A5%97%E8%B7%AF%E4%B8%89%E3%80%81%E9%80%92%E5%BD%92%E5%A4%8D%E7%94%A8%E5%81%9A%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="递归复用做循环">递归复用做循环</h2>
<h3 id="Promise的递归调用">Promise的递归调用</h3>
<h4 id="提取不确定层数的Promise中的value类型的高级类型">提取不确定层数的Promise中的value类型的高级类型</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">DeepPromiseValueType<span class="token operator">&lt;</span><span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">unknown</span><span class="token operator">>></span></span> <span class="token operator">=</span> 
<span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">infer</span> ValueType<span class="token operator">></span></span> <span class="token operator">?</span>
  ValueType <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">unknown</span><span class="token operator">></span></span> <span class="token operator">?</span>
    DeepPromiseValueType<span class="token operator">&lt;</span>ValueType<span class="token operator">></span>
  <span class="token operator">:</span> ValueType
<span class="token operator">:</span> <span class="token builtin">never</span>
<span class="token keyword">type</span> <span class="token class-name">promise</span> <span class="token operator">=</span> DeepPromiseValueType<span class="token operator">&lt;</span><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">Promise</span><span class="token operator">&lt;</span>Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">any</span><span class="token operator">>>></span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<p>上面的代码可以简化为</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">DeepPromiseValueType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> 
<span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">infer</span> ValueType<span class="token operator">></span></span> <span class="token operator">?</span>
  DeepPromiseValueType<span class="token operator">&lt;</span>ValueType<span class="token operator">></span>
<span class="token operator">:</span> <span class="token constant">T</span>
<span class="token keyword">type</span> <span class="token class-name">promise</span> <span class="token operator">=</span> DeepPromiseValueType<span class="token operator">&lt;</span><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">Promise</span><span class="token operator">&lt;</span>Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">any</span><span class="token operator">>>></span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h3 id="数组类型的递归">数组类型的递归</h3>
<h4 id="确定长度的元组反转">确定长度的元组反转</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ReverseArr<span class="token operator">&lt;</span>Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span>
Arr  <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> One<span class="token punctuation">,</span> <span class="token keyword">infer</span> Two<span class="token punctuation">,</span> <span class="token keyword">infer</span> Three<span class="token punctuation">,</span> <span class="token keyword">infer</span> Four<span class="token punctuation">,</span> <span class="token keyword">infer</span> Five<span class="token punctuation">]</span> <span class="token operator">?</span>
  <span class="token punctuation">[</span>Five<span class="token punctuation">,</span> Four<span class="token punctuation">,</span> Three<span class="token punctuation">,</span> Two<span class="token punctuation">,</span> One<span class="token punctuation">]</span>
<span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">arr</span> <span class="token operator">=</span> ReverseArr<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h4 id="不确定长度的元组反转">不确定长度的元组反转</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ReverseArr<span class="token operator">&lt;</span>Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span>
Arr  <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> First<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> Rest<span class="token punctuation">]</span> <span class="token operator">?</span>
  <span class="token punctuation">[</span><span class="token operator">...</span>ReverseArr<span class="token operator">&lt;</span>Rest<span class="token operator">></span><span class="token punctuation">,</span>First<span class="token punctuation">]</span>
<span class="token operator">:</span> Arr<span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">arr</span> <span class="token operator">=</span> ReverseArr<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h4 id="寻找元组中是否存在某个元素">寻找元组中是否存在某个元素</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Includes<span class="token operator">&lt;</span>Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>FindItem<span class="token operator">></span></span> <span class="token operator">=</span>
Arr <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> First<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> Rest<span class="token punctuation">]</span> <span class="token operator">?</span>
  IsEqual<span class="token operator">&lt;</span>First<span class="token punctuation">,</span>FindItem<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> Includes<span class="token operator">&lt;</span>Rest<span class="token punctuation">,</span> FindItem<span class="token operator">></span>
<span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token keyword">type</span> <span class="token class-name">IsEqual<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span><span class="token constant">B</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">arr</span> <span class="token operator">=</span> Includes<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h4 id="删除元组中的某个元素">删除元组中的某个元素</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">RemoveItem<span class="token operator">&lt;</span>
  Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  Item<span class="token punctuation">,</span>
  Result <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">></span></span> <span class="token operator">=</span> Arr <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> First<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> Rest<span class="token punctuation">]</span> <span class="token operator">?</span>
  IsEqual<span class="token operator">&lt;</span>First<span class="token punctuation">,</span>Item<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> RemoveItem<span class="token operator">&lt;</span>Rest<span class="token punctuation">,</span> Item<span class="token punctuation">,</span> Result<span class="token operator">></span> <span class="token operator">:</span> RemoveItem<span class="token operator">&lt;</span>Rest<span class="token punctuation">,</span> Item<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>Result<span class="token punctuation">,</span> First<span class="token punctuation">]</span><span class="token operator">></span>
<span class="token operator">:</span> Result<span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">IsEqual<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span><span class="token constant">B</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">arr</span> <span class="token operator">=</span> RemoveItem<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h4 id="构建一个自定义长度的同一类别的数组">构建一个自定义长度的同一类别的数组</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">BuildArray<span class="token operator">&lt;</span>
  Length <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  Ele <span class="token operator">=</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span>
  Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">></span></span> <span class="token operator">=</span> Arr<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Length</span> <span class="token operator">?</span>
    Arr <span class="token operator">:</span>
    BuildArray<span class="token operator">&lt;</span>Length<span class="token punctuation">,</span> Ele<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>Arr<span class="token punctuation">,</span> Ele<span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">arr</span> <span class="token operator">=</span> BuildArray<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token builtin">number</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h3 id="字符串类型的递归">字符串类型的递归</h3>
<h4 id="将字符串中的所用的指定字串替换成另一个字符串">将字符串中的所用的指定字串替换成另一个字符串</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Replace<span class="token operator">&lt;</span>
  Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  From <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  To <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
<span class="token operator">></span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Left<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>From<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Right<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span>
    Replace<span class="token operator">&lt;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Left<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>To<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Right<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>From<span class="token punctuation">,</span>To<span class="token operator">></span> <span class="token operator">:</span>
    Str<span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">str</span> <span class="token operator">=</span> Replace<span class="token operator">&lt;</span><span class="token string">'abc abc aaa abc aaa abc ab abc'</span><span class="token punctuation">,</span><span class="token string">'abc'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h4 id="将字符串的每个元素提取出来转换成联合类型">将字符串的每个元素提取出来转换成联合类型</h4>
<p>例如将<code>&quot;123&quot;</code>转换成<code>&quot;1&quot; | &quot;2&quot; | &quot;3&quot;</code></p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">StringToUnion<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">></span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Fitsr<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Rest<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span>
Fitsr <span class="token operator">|</span> StringToUnion<span class="token operator">&lt;</span>Rest<span class="token operator">></span> <span class="token operator">:</span>
<span class="token builtin">never</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">str</span> <span class="token operator">=</span> StringToUnion<span class="token operator">&lt;</span><span class="token string">'123'</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h4 id="反转字符串类型">反转字符串类型</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ReverseStr<span class="token operator">&lt;</span>
  Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  Result <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">""</span>
<span class="token operator">></span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> First<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Rest<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span>
ReverseStr<span class="token operator">&lt;</span>Rest<span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>First<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Result<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token operator">></span> <span class="token operator">:</span>
Result<span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">str</span> <span class="token operator">=</span> ReverseStr<span class="token operator">&lt;</span><span class="token string">'1234567'</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h3 id="对象类型的递归-索引类型的递归">对象类型的递归(索引类型的递归)</h3>
<h4 id="递归将所有层的索引都变成只读">递归将所有层的索引都变成只读</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">DeepReadonly<span class="token operator">&lt;</span>Obj <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">any</span><span class="token operator">>></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">readonly</span> <span class="token punctuation">[</span>Key <span class="token keyword">in</span> <span class="token keyword">keyof</span> Obj<span class="token punctuation">]</span><span class="token operator">:</span> Obj<span class="token punctuation">[</span>Key<span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span> <span class="token operator">?</span>
    Obj<span class="token punctuation">[</span>Key<span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Function</span></span> <span class="token operator">?</span>
      Obj<span class="token punctuation">[</span>Key<span class="token punctuation">]</span>
    <span class="token operator">:</span> DeepReadonly<span class="token operator">&lt;</span>Obj<span class="token punctuation">[</span>Key<span class="token punctuation">]</span><span class="token operator">></span>
  <span class="token operator">:</span> Obj<span class="token punctuation">[</span>Key<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">type</span> <span class="token class-name">obj</span> <span class="token operator">=</span> DeepReadonly<span class="token operator">&lt;</span><span class="token punctuation">&#123;</span>
  a<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    b<span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token operator">></span></code></pre>
<p>如果按照我们的想法，会写出上面的代码，但是如果测试一下我们就会发现，递归没有进行下去。因为ts的类型只有被用到的时候才会被计算。这里只是给第一次的索引加上了只读，但是没有使用。所以不会进行计算，我们可以加一个<code>Obj extends any</code>让其计算。</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">DeepReadonly<span class="token operator">&lt;</span>Obj <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">any</span><span class="token operator">>></span></span> <span class="token operator">=</span> Obj <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">any</span></span> <span class="token operator">?</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">readonly</span> <span class="token punctuation">[</span>Key <span class="token keyword">in</span> <span class="token keyword">keyof</span> Obj<span class="token punctuation">]</span><span class="token operator">:</span> Obj<span class="token punctuation">[</span>Key<span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span> <span class="token operator">?</span>
    Obj<span class="token punctuation">[</span>Key<span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Function</span></span> <span class="token operator">?</span>
      Obj<span class="token punctuation">[</span>Key<span class="token punctuation">]</span>
    <span class="token operator">:</span> DeepReadonly<span class="token operator">&lt;</span>Obj<span class="token punctuation">[</span>Key<span class="token punctuation">]</span><span class="token operator">></span>
  <span class="token operator">:</span> Obj<span class="token punctuation">[</span>Key<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">obj</span> <span class="token operator">=</span> DeepReadonly<span class="token operator">&lt;</span><span class="token punctuation">&#123;</span>
  a<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    b<span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token operator">></span></code></pre>
<h3 id="参考资料">参考资料</h3>
<p>[1]<a href="https://juejin.cn/book/7047524421182947366?enter_from=course_center">TypeScript 类型体操通关秘籍</a></p>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
  </entry>
  <entry>
    <title>重新构造做变换</title>
    <url>/2022/10/24/typeScript/%E5%A5%97%E8%B7%AF%E4%BA%8C%E3%80%81%E9%87%8D%E6%96%B0%E6%9E%84%E9%80%A0%E5%81%9A%E5%8F%98%E6%8D%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="重新构造做变换">重新构造做变换</h2>
<h3 id="数组类型的重新构造">数组类型的重新构造</h3>
<h4 id="向数组后面添加元素">向数组后面添加元素</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Push<span class="token operator">&lt;</span>Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Ele<span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>Arr<span class="token punctuation">,</span> Ele<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">arr</span> <span class="token operator">=</span> Push<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h4 id="向数组前面添加元素">向数组前面添加元素</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Shift<span class="token operator">&lt;</span>Ele<span class="token punctuation">,</span> Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">[</span>Ele<span class="token punctuation">,</span><span class="token operator">...</span>Arr<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">arr</span> <span class="token operator">=</span> Shift<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h4 id="合并只有两个元素的两个元组对应的元素">合并只有两个元素的两个元组对应的元素</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//合并前</span>
<span class="token keyword">type</span> <span class="token class-name">tuple1</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">tuple2</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'guang'</span><span class="token punctuation">,</span> <span class="token string">'dong'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//合并后</span>
<span class="token keyword">type</span> <span class="token class-name">tuple</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'guang'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'dong'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Zip<span class="token operator">&lt;</span>One <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">unknown</span><span class="token punctuation">,</span><span class="token builtin">unknown</span><span class="token punctuation">]</span><span class="token punctuation">,</span>Other <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">unknown</span><span class="token punctuation">,</span><span class="token builtin">unknown</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> 
One <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> OneFirst<span class="token punctuation">,</span> <span class="token keyword">infer</span> OneSecond<span class="token punctuation">]</span> <span class="token operator">?</span>
  Other <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> OtherFirst<span class="token punctuation">,</span> <span class="token keyword">infer</span> OthrtSecond<span class="token punctuation">]</span> <span class="token operator">?</span>
    <span class="token punctuation">[</span><span class="token punctuation">[</span>OneFirst<span class="token punctuation">,</span> OtherFirst<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>OneSecond<span class="token punctuation">,</span> OthrtSecond<span class="token punctuation">]</span><span class="token punctuation">]</span>
  <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">type</span> <span class="token class-name">zip</span> <span class="token operator">=</span> Zip<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'guang'</span><span class="token punctuation">,</span><span class="token string">'dong'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h4 id="合并只有任意个元素的两个元组对应的元素">合并只有任意个元素的两个元组对应的元素</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Zip<span class="token operator">&lt;</span>One <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>Other <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> 
One <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> OneFirst<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> OneRest<span class="token punctuation">]</span> <span class="token operator">?</span>
  Other <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> OtherFirst<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> OthrtRest<span class="token punctuation">]</span> <span class="token operator">?</span>
    <span class="token punctuation">[</span><span class="token punctuation">[</span>OneFirst<span class="token punctuation">,</span> OtherFirst<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">...</span>Zip<span class="token operator">&lt;</span>OneRest<span class="token punctuation">,</span> OthrtRest<span class="token operator">></span><span class="token punctuation">]</span>
  <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">type</span> <span class="token class-name">zip</span> <span class="token operator">=</span> Zip<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h3 id="字符串的重新构造">字符串的重新构造</h3>
<h4 id="将字符串第一个元素转换成大写">将字符串第一个元素转换成大写</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">CapitalizeStrb<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">></span></span> <span class="token operator">=</span>
Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> First<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Rest<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span>
  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Uppercase<span class="token operator">&lt;</span>First<span class="token operator">></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Rest<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>
<span class="token operator">:</span> Str
<span class="token keyword">type</span> <span class="token class-name">str</span> <span class="token operator">=</span> CapitalizeStrb<span class="token operator">&lt;</span><span class="token string">'abc'</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h4 id="删除字符串中的某个字串">删除字符串中的某个字串</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">DropSubStr<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> SubStr <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">></span></span> <span class="token operator">=</span>
Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Prefix<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>SubStr<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Suffix<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token operator">?</span>
  DropSubStr<span class="token operator">&lt;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Prefix<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Suffix<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>SubStr<span class="token operator">></span>
<span class="token operator">:</span>Str
<span class="token keyword">type</span> <span class="token class-name">str</span> <span class="token operator">=</span> DropSubStr<span class="token operator">&lt;</span><span class="token string">'12121212121'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h3 id="函数类型的重新构造">函数类型的重新构造</h3>
<h4 id="在函数类型上添加一个参数">在函数类型上添加一个参数</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">AppendArgument<span class="token operator">&lt;</span>Func <span class="token keyword">extends</span> <span class="token builtin">Function</span><span class="token punctuation">,</span> Arg<span class="token operator">></span></span> <span class="token operator">=</span> 
Func <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token keyword">infer</span> Args<span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">infer</span> ResultType <span class="token operator">?</span>
  <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>Args<span class="token punctuation">,</span> Arg<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">=></span>ResultType
<span class="token operator">:</span><span class="token builtin">never</span>
<span class="token keyword">type</span> <span class="token class-name">fu</span> <span class="token operator">=</span> AppendArgument<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">number</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h3 id="索引类型重新构造">索引类型重新构造</h3>
<h4 id="把索引类型的Key变成大写">把索引类型的Key变成大写</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">UppercaseKey<span class="token operator">&lt;</span>Obj <span class="token keyword">extends</span> Object<span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">[</span>Key <span class="token keyword">in</span> <span class="token keyword">keyof</span> Obj <span class="token keyword">as</span> Uppercase<span class="token operator">&lt;</span>Key <span class="token operator">&amp;</span> <span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">:</span>Obj<span class="token punctuation">[</span>Key<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">type</span> <span class="token class-name">obj</span> <span class="token operator">=</span> UppercaseKey<span class="token operator">&lt;</span><span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span><span class="token operator">></span></code></pre>
<h4 id="Record">Record</h4>
<p>typescript内置了Record，用来创建索引类型。</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Record<span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>我们可以使用Record修改上面将Key变成大写的代码</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">UppercaseKey<span class="token operator">&lt;</span>Obj <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">any</span><span class="token operator">>></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">[</span>Key <span class="token keyword">in</span> <span class="token keyword">keyof</span> Obj <span class="token keyword">as</span> Uppercase<span class="token operator">&lt;</span>Key <span class="token operator">&amp;</span> <span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">:</span>Obj<span class="token punctuation">[</span>Key<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">type</span> <span class="token class-name">obj</span> <span class="token operator">=</span> UppercaseKey<span class="token operator">&lt;</span><span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span><span class="token operator">></span></code></pre>
<h4 id="将索引转换成只读">将索引转换成只读</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ToReadonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">readonly</span> <span class="token punctuation">[</span>Key <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>Key<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">type</span> <span class="token class-name">obj</span> <span class="token operator">=</span> ToReadonly<span class="token operator">&lt;</span><span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">'1'</span>
<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h4 id="给索引添加可选修饰符">给索引添加可选修饰符</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ToPartial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">readonly</span> <span class="token punctuation">[</span>Key <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>Key<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">type</span> <span class="token class-name">obj</span> <span class="token operator">=</span> ToPartial<span class="token operator">&lt;</span><span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">'1'</span>
<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h4 id="去掉只读修饰符">去掉只读修饰符</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ToMutable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token operator">-</span><span class="token keyword">readonly</span> <span class="token punctuation">[</span>Key <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>Key<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">type</span> <span class="token class-name">obj</span> <span class="token operator">=</span> ToMutable<span class="token operator">&lt;</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">readonly</span> name<span class="token operator">:</span> <span class="token string">'1'</span>
<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h4 id="去掉可选修饰符">去掉可选修饰符</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ToRequired<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">[</span>Key <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>Key<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">type</span> <span class="token class-name">obj</span> <span class="token operator">=</span> ToRequired<span class="token operator">&lt;</span><span class="token punctuation">&#123;</span>
  name<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">'1'</span>
<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h4 id="对索引类型做过滤">对索引类型做过滤</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">FilterByValueType<span class="token operator">&lt;</span>Obj <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">,</span>valueType<span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">[</span>Key <span class="token keyword">in</span> <span class="token keyword">keyof</span> Obj <span class="token keyword">as</span> Obj<span class="token punctuation">[</span>Key<span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">valueType</span> <span class="token operator">?</span> Key <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">]</span> <span class="token operator">:</span> Obj<span class="token punctuation">[</span>Key<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">type</span> <span class="token class-name">obj</span> <span class="token operator">=</span> FilterByValueType<span class="token operator">&lt;</span><span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  un<span class="token operator">:</span> <span class="token keyword">undefined</span>
  nu<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">undefined</span><span class="token operator">|</span><span class="token builtin">number</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h3 id="参考资料">参考资料</h3>
<p>[1]<a href="https://juejin.cn/book/7047524421182947366?enter_from=course_center">TypeScript 类型体操通关秘籍</a></p>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
  </entry>
  <entry>
    <title>联合分散可化简</title>
    <url>/2022/10/24/typeScript/%E5%A5%97%E8%B7%AF%E4%BA%94%E3%80%81%E8%81%94%E5%90%88%E5%88%86%E6%95%A3%E5%8F%AF%E5%8C%96%E7%AE%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="联合分散可化简">联合分散可化简</h2>
<h3 id="将联合类型的字符串-去点，并将-后的第一个字母大写">将联合类型的字符串_去点，并将_后的第一个字母大写</h3>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">CamelcaseUnion<span class="token operator">&lt;</span>Item <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">></span></span> <span class="token operator">=</span> Item <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Left<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Right<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Rest<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span>
  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Left<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Uppercase<span class="token operator">&lt;</span>Right<span class="token operator">></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>CamelcaseUnion<span class="token operator">&lt;</span>Rest<span class="token operator">></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>
<span class="token operator">:</span> Item<span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">item</span> <span class="token operator">=</span> CamelcaseUnion<span class="token operator">&lt;</span><span class="token string">'aa_bb_cc_dd'</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<p>这样看来，对联合类型的操作和对单个字符串的操作一样。这就是联合分散可简化，这样看来是优点。但是再有写情况也增加了认知成本。</p>
<h3 id="判断联合类型">判断联合类型</h3>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">IsUnion<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span><span class="token constant">B</span> <span class="token operator">=</span> <span class="token constant">A</span><span class="token operator">></span></span> <span class="token operator">=</span>
<span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span>
  <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token constant">B</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token constant">A</span><span class="token punctuation">]</span>
    <span class="token operator">?</span> <span class="token boolean">false</span>
    <span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token operator">:</span> <span class="token builtin">never</span></code></pre>
<p>当输入联合类型的时候返回true，输入的不是联合类型的时候返回false。是不是看不懂？我也看不懂。我们先看下面的代码</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">TestUnion<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span> <span class="token operator">=</span> <span class="token constant">A</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">A</span>  <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">?</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token constant">A</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token constant">B</span><span class="token punctuation">&#125;</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">TestUnionResult</span> <span class="token operator">=</span> TestUnion<span class="token operator">&lt;</span><span class="token string">'a'</span> <span class="token operator">|</span> <span class="token string">'b'</span> <span class="token operator">|</span> <span class="token string">'c'</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<p>其中TestUnionResult的类型是</p>
<pre class="language-none"><code class="language-none">type TestUnionResult &#x3D; &#123;
    a: &quot;a&quot;;
    b: &quot;a&quot; | &quot;b&quot; | &quot;c&quot;;
&#125; | &#123;
    a: &quot;b&quot;;
    b: &quot;a&quot; | &quot;b&quot; | &quot;c&quot;;
&#125; | &#123;
    a: &quot;c&quot;;
    b: &quot;a&quot; | &quot;b&quot; | &quot;c&quot;;
&#125;</code></pre>
<p>因为条件类型中如果左边的类型是联合类型，会把每个元素单独传入做计算，而右边不会。所以A是’a’的时候，B是’a’|‘b’|‘c’。所以可以利用这个特点来判断是否是联合类型。所以就有了以上的代码</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">IsUnion<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span><span class="token constant">B</span> <span class="token operator">=</span> <span class="token constant">A</span><span class="token operator">></span></span> <span class="token operator">=</span>
<span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span>
  <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token constant">B</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token constant">A</span><span class="token punctuation">]</span>
    <span class="token operator">?</span> <span class="token boolean">false</span>
    <span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token operator">:</span> <span class="token builtin">never</span></code></pre>
<h3 id="BEM">BEM</h3>
<p>BEM是css命名规范</p>
<pre class="language-none"><code class="language-none">type bemResult &#x3D; BEM&lt;&#39;guang&#39;, [&#39;aaa&#39;, &#39;bbb&#39;], [&#39;warning&#39;, &#39;success&#39;]&gt;;
&#x2F;&#x2F;会转换成
guang__aaa--warning guang__bbb--success</code></pre>
<p>数组转换成联合类型可以这样写</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">union</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'aaa'</span><span class="token punctuation">,</span> <span class="token string">'bbb'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">BEM</span><span class="token operator">&lt;</span>
  Block <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  Element <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  Modifiers <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">></span></span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Block<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">__</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Element<span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Modifiers<span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">bemResult</span> <span class="token operator">=</span> <span class="token constant">BEM</span><span class="token operator">&lt;</span><span class="token string">'guang'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'aaa'</span><span class="token punctuation">,</span> <span class="token string">'bbb'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'warning'</span><span class="token punctuation">,</span> <span class="token string">'success'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h3 id="AllCombinations">AllCombinations</h3>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Combination<span class="token operator">&lt;</span><span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">></span></span> <span class="token operator">=</span>
    <span class="token operator">|</span> <span class="token constant">A</span>
    <span class="token operator">|</span> <span class="token constant">B</span>
    <span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">A</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">B</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>
    <span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">B</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">A</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">AllCombinations<span class="token operator">&lt;</span><span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token constant">A</span><span class="token operator">></span></span> <span class="token operator">=</span> 
<span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span>
    <span class="token operator">?</span> Combination<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> AllCombinations<span class="token operator">&lt;</span>Exclude<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">>>></span>
    <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">all</span> <span class="token operator">=</span> AllCombinations<span class="token operator">&lt;</span><span class="token string">'A'</span> <span class="token operator">|</span> <span class="token string">'B'</span> <span class="token operator">|</span> <span class="token string">'C'</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h3 id="参考资料">参考资料</h3>
<p>[1]<a href="https://juejin.cn/book/7047524421182947366?enter_from=course_center">TypeScript 类型体操通关秘籍</a></p>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
  </entry>
  <entry>
    <title>特殊类型要记清</title>
    <url>/2022/10/24/typeScript/%E5%A5%97%E8%B7%AF%E5%85%AD%E3%80%81%E7%89%B9%E6%AE%8A%E7%B1%BB%E5%9E%8B%E8%A6%81%E8%AE%B0%E6%B8%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="特殊类型要记清">特殊类型要记清</h2>
<h3 id="IsAny">IsAny</h3>
<p>any类型与任何类型的交叉类型都是any，也就是1&amp;any结果是any。</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">IsAny<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token keyword">undefined</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token operator">&amp;</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token keyword">is</span></span><span class="token operator">=</span> IsAny<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<p>其中的<code>string</code>与<code>undefined</code>可以换成别的任意两个不同的类型。</p>
<h3 id="IsEqual">IsEqual</h3>
<p>判断两个类型是否相同</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">IsEqual<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span><span class="token constant">B</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token keyword">is</span></span> <span class="token operator">=</span> IsEqual<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h3 id="IsUnion">IsUnion</h3>
<p>判断是否是联合类型</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">IsUnion<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span> <span class="token operator">=</span> <span class="token constant">A</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">?</span>
  <span class="token punctuation">[</span><span class="token constant">B</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token constant">A</span><span class="token punctuation">]</span> <span class="token operator">?</span>
    <span class="token boolean">false</span> <span class="token operator">:</span>
    <span class="token boolean">true</span>
<span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token keyword">is</span></span> <span class="token operator">=</span> IsUnion<span class="token operator">&lt;</span><span class="token string">'1'</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h3 id="IsNever">IsNever</h3>
<p>判断是否是never类型。如果条件左边是类型参数，并且传入的是never，那么直接返回never。</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">IsNever<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token keyword">is</span></span> <span class="token operator">=</span> IsNever<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<p>上面的代码如果判断any会返回1和2的联合类型</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">IsNever<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token keyword">is</span></span> <span class="token operator">=</span> IsNever<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<p>也可以这样写</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">IsNever<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">never</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token keyword">is</span></span> <span class="token operator">=</span> IsNever<span class="token operator">&lt;</span><span class="token builtin">never</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h3 id="IsTuple">IsTuple</h3>
<p>判断是不是元组元组是数组类型，但是每个元素都是只读的，并且length是数字字面量，而数组的length是number。</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">IsTuple<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">readonly</span></span><span class="token punctuation">[</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token keyword">infer</span> Eles<span class="token punctuation">]</span> <span class="token operator">?</span>
  NotEqual<span class="token operator">&lt;</span>Eles<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token builtin">number</span><span class="token operator">></span>
<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">NotEqual<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span><span class="token constant">B</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token keyword">is</span></span> <span class="token operator">=</span> IsTuple<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h3 id="联合类型转换成交叉类型">联合类型转换成交叉类型</h3>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">UnionToIntersection<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token constant">U</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token builtin">unknown</span><span class="token operator">:</span><span class="token builtin">never</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token builtin">unknown</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">un</span> <span class="token operator">=</span> UnionToIntersection<span class="token operator">&lt;</span><span class="token punctuation">&#123;</span>guang<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span> <span class="token operator">|</span> <span class="token punctuation">&#123;</span>dong<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h3 id="提取索引类型中的可选索引">提取索引类型中的可选索引</h3>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">GetOptional<span class="token operator">&lt;</span>Obj <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">any</span><span class="token operator">>></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">[</span>Key <span class="token keyword">in</span> <span class="token keyword">keyof</span> Obj <span class="token keyword">as</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token keyword">extends</span> <span class="token class-name">Pick<span class="token operator">&lt;</span>Obj<span class="token punctuation">,</span> Key<span class="token operator">></span></span> <span class="token operator">?</span> Key <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">]</span><span class="token operator">:</span> Obj<span class="token punctuation">[</span>Key<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">type</span> <span class="token class-name">optional</span> <span class="token operator">=</span> GetOptional<span class="token operator">&lt;</span><span class="token punctuation">&#123;</span>
  name<span class="token operator">?</span><span class="token operator">:</span> <span class="token number">1</span>
  age<span class="token operator">:</span> <span class="token number">2</span>
<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h3 id="提取索引类型中的不可选索引">提取索引类型中的不可选索引</h3>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">isRequired<span class="token operator">&lt;</span>Obj <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">any</span><span class="token operator">>></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">[</span>Key <span class="token keyword">in</span> <span class="token keyword">keyof</span> Obj <span class="token keyword">as</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token keyword">extends</span> <span class="token class-name">Pick<span class="token operator">&lt;</span>Obj<span class="token punctuation">,</span> Key<span class="token operator">></span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> Key<span class="token punctuation">]</span><span class="token operator">:</span> Obj<span class="token punctuation">[</span>Key<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">type</span> <span class="token class-name">optional</span> <span class="token operator">=</span> isRequired<span class="token operator">&lt;</span><span class="token punctuation">&#123;</span>
  name<span class="token operator">?</span><span class="token operator">:</span> <span class="token number">1</span>
  age<span class="token operator">:</span> <span class="token number">2</span>
<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h3 id="去除索引类型中的索引签名">去除索引类型中的索引签名</h3>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Test</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">[</span>Key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>上面就是索引类型中的索引签名索引类型不能构造成字符串字面量类型，因为它没有名字，而其他索引可以。</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">RemoveIndexSignature<span class="token operator">&lt;</span>Obj <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">any</span><span class="token operator">>></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">[</span>Key <span class="token keyword">in</span> <span class="token keyword">keyof</span> Obj <span class="token keyword">as</span> Key <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> Str <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">]</span><span class="token operator">:</span> Obj<span class="token punctuation">[</span>Key<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">type</span> <span class="token class-name">index</span> <span class="token operator">=</span> RemoveIndexSignature<span class="token operator">&lt;</span><span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>Key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span>
<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h3 id="过滤除class的public属性">过滤除class的public属性</h3>
<p>keyof只能拿到class的public属性，private和protected的索引会被忽略。</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ClassPublicProps<span class="token operator">&lt;</span>Obj <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">any</span><span class="token operator">>></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">[</span>Key <span class="token keyword">in</span> <span class="token keyword">keyof</span> Obj<span class="token punctuation">]</span><span class="token operator">:</span> Obj<span class="token punctuation">[</span>Key<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Dong</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token keyword">protected</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> hobbies<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'dong'</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>hobbies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'sleep'</span><span class="token punctuation">,</span> <span class="token string">'eat'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token keyword">public</span></span> <span class="token operator">=</span> ClassPublicProps<span class="token operator">&lt;</span>Dong<span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h3 id="as-const">as const</h3>
<p>用const定义的类型，typescript默认推导出来的类型不是字面量类型。例如：</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">type</span> <span class="token class-name">objType</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">;</span></code></pre>
<p>我们可以使用as const来处理。</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">objType</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">;</span></code></pre>
<h3 id="参考资料">参考资料</h3>
<p>[1]<a href="https://juejin.cn/book/7047524421182947366?enter_from=course_center">TypeScript 类型体操通关秘籍</a></p>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
  </entry>
  <entry>
    <title>数组长度做计算</title>
    <url>/2022/10/24/typeScript/%E5%A5%97%E8%B7%AF%E5%9B%9B%E3%80%81%E6%95%B0%E7%BB%84%E9%95%BF%E5%BA%A6%E5%81%9A%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="数组长度做计算">数组长度做计算</h2>
<h3 id="数组长度实现加减乘除">数组长度实现加减乘除</h3>
<h4 id="加">加</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">BuildArray<span class="token operator">&lt;</span>
  Length <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  Ele <span class="token operator">=</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span>
  Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">></span></span> <span class="token operator">=</span> Arr<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Length</span> <span class="token operator">?</span>
    Arr <span class="token operator">:</span>
    BuildArray<span class="token operator">&lt;</span>Length<span class="token punctuation">,</span>Ele<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">...</span>Arr<span class="token punctuation">,</span>Ele<span class="token punctuation">]</span><span class="token operator">></span>
<span class="token keyword">type</span> <span class="token class-name">Add<span class="token operator">&lt;</span>Num1 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span> Num2 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>BuildArray<span class="token operator">&lt;</span>Num1<span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">...</span>BuildArray<span class="token operator">&lt;</span>Num2<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">add</span> <span class="token operator">=</span> Add<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h4 id="减">减</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">BuildArray<span class="token operator">&lt;</span>
  Length <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  Ele <span class="token operator">=</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span>
  Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">></span></span> <span class="token operator">=</span> Arr<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Length</span> <span class="token operator">?</span>
    Arr <span class="token operator">:</span>
    BuildArray<span class="token operator">&lt;</span>Length<span class="token punctuation">,</span>Ele<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">...</span>Arr<span class="token punctuation">,</span>Ele<span class="token punctuation">]</span><span class="token operator">></span>
<span class="token keyword">type</span> <span class="token class-name">Subtract<span class="token operator">&lt;</span>Num1 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span> Num2 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token operator">></span></span> <span class="token operator">=</span> BuildArray<span class="token operator">&lt;</span>Num1<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token operator">:</span> BuildArray<span class="token operator">&lt;</span>Num2<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">...</span>arr2<span class="token operator">:</span> <span class="token keyword">infer</span> Rest<span class="token punctuation">]</span> <span class="token operator">?</span>
Rest<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token builtin">never</span></code></pre>
<h4 id="乘">乘</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">BuildArray<span class="token operator">&lt;</span>
  Length <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  Ele <span class="token operator">=</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span>
  Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">></span></span> <span class="token operator">=</span> Arr<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Length</span> <span class="token operator">?</span>
    Arr <span class="token operator">:</span>
    BuildArray<span class="token operator">&lt;</span>Length<span class="token punctuation">,</span>Ele<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">...</span>Arr<span class="token punctuation">,</span>Ele<span class="token punctuation">]</span><span class="token operator">></span>
<span class="token keyword">type</span> <span class="token class-name">Subtract<span class="token operator">&lt;</span>Num1 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span> Num2 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token operator">></span></span> <span class="token operator">=</span> BuildArray<span class="token operator">&lt;</span>Num1<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token operator">:</span> BuildArray<span class="token operator">&lt;</span>Num2<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">...</span>arr2<span class="token operator">:</span> <span class="token keyword">infer</span> Rest<span class="token punctuation">]</span> <span class="token operator">?</span>
Rest<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token builtin">never</span>
<span class="token keyword">type</span> <span class="token class-name">Mutiply<span class="token operator">&lt;</span>
  Num1 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  Num2 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  ResultArr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">></span></span> <span class="token operator">=</span> Num2 <span class="token keyword">extends</span> <span class="token number">0</span> <span class="token operator">?</span>
    ResultArr<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token operator">:</span>
    Mutiply<span class="token operator">&lt;</span>Num1<span class="token punctuation">,</span>Subtract<span class="token operator">&lt;</span>Num2<span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">...</span>BuildArray<span class="token operator">&lt;</span>Num1<span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">...</span>ResultArr<span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">mutiply</span> <span class="token operator">=</span> Mutiply<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h4 id="除">除</h4>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">BuildArray<span class="token operator">&lt;</span>
  Length <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  Ele <span class="token operator">=</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span>
  Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">></span></span> <span class="token operator">=</span> Arr<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Length</span> <span class="token operator">?</span>
    Arr <span class="token operator">:</span>
    BuildArray<span class="token operator">&lt;</span>Length<span class="token punctuation">,</span>Ele<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">...</span>Arr<span class="token punctuation">,</span>Ele<span class="token punctuation">]</span><span class="token operator">></span>
<span class="token keyword">type</span> <span class="token class-name">Subtract<span class="token operator">&lt;</span>Num1 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span> Num2 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token operator">></span></span> <span class="token operator">=</span> BuildArray<span class="token operator">&lt;</span>Num1<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token operator">:</span> BuildArray<span class="token operator">&lt;</span>Num2<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">...</span>arr2<span class="token operator">:</span> <span class="token keyword">infer</span> Rest<span class="token punctuation">]</span> <span class="token operator">?</span>
Rest<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token builtin">never</span>
<span class="token keyword">type</span> <span class="token class-name">Divide<span class="token operator">&lt;</span>
  Num1 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  Num2 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  ResultArr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">></span></span> <span class="token operator">=</span> Num1 <span class="token keyword">extends</span> <span class="token number">0</span> <span class="token operator">?</span>
    ResultArr<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token operator">:</span>
    Divide<span class="token operator">&lt;</span>Subtract<span class="token operator">&lt;</span>Num1<span class="token punctuation">,</span>Num2<span class="token operator">></span><span class="token punctuation">,</span>Num2<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token builtin">unknown</span><span class="token punctuation">,</span> <span class="token operator">...</span>ResultArr<span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">divide</span> <span class="token operator">=</span> Divide<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h3 id="求字符串的长度的类型">求字符串的长度的类型</h3>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">StrLen<span class="token operator">&lt;</span>
  Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  ResultArr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">></span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token builtin">string</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Rest<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token operator">?</span> 
  StrLen<span class="token operator">&lt;</span>Rest<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">...</span>ResultArr<span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token punctuation">]</span><span class="token operator">></span>
<span class="token operator">:</span> ResultArr<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">str</span> <span class="token operator">=</span> StrLen<span class="token operator">&lt;</span><span class="token string">'123'</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h3 id="比较两个值的大小">比较两个值的大小</h3>
<p>A与B比较，如果A大于B则返回true，如果A小于B则返回false。</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">GreaterThan<span class="token operator">&lt;</span>
  Num1 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  Num2 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  CountArr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">></span></span> <span class="token operator">=</span> Num1 <span class="token keyword">extends</span> <span class="token class-name">Num2</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span>
  CountArr<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Num2</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span>
    CountArr<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Num1</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span>
      GreaterThan<span class="token operator">&lt;</span>Num1<span class="token punctuation">,</span> Num2<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>CountArr<span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">than</span> <span class="token operator">=</span> GreaterThan<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h3 id="Fibonacci-数列的计算">Fibonacci 数列的计算</h3>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">FibonacciLoop<span class="token operator">&lt;</span>
    PrevArr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
    CurrentArr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
    IndexArr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
    Num <span class="token keyword">extends</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token operator">></span></span> <span class="token operator">=</span> IndexArr<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Num</span>
    <span class="token operator">?</span> CurrentArr<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span>
    <span class="token operator">:</span> FibonacciLoop<span class="token operator">&lt;</span>CurrentArr<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>PrevArr<span class="token punctuation">,</span> <span class="token operator">...</span>CurrentArr<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>IndexArr<span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Num<span class="token operator">></span>

<span class="token keyword">type</span> <span class="token class-name">Fibonacci<span class="token operator">&lt;</span>Num <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token operator">></span></span> <span class="token operator">=</span> FibonacciLoop<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Num<span class="token operator">></span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">num</span> <span class="token operator">=</span> Fibonacci<span class="token operator">&lt;</span><span class="token number">6</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h3 id="参考资料">参考资料</h3>
<p>[1]<a href="https://juejin.cn/book/7047524421182947366?enter_from=course_center">TypeScript 类型体操通关秘籍</a></p>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
  </entry>
  <entry>
    <title>逆变、协变、双向协变、不变</title>
    <url>/2022/10/24/typeScript/%E9%80%86%E5%8F%98%E3%80%81%E5%8D%8F%E5%8F%98%E3%80%81%E5%8F%8C%E5%90%91%E5%8D%8F%E5%8F%98%E3%80%81%E4%B8%8D%E5%8F%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="逆变、协变、双向协变、不变">逆变、协变、双向协变、不变</h2>
<h3 id="类型安全和型变">类型安全和型变</h3>
<p>我们都知道在ts中，我们可以给变量定义为不同的类型，例如<code>number</code>类型和<code>string</code>类型。但是，除了这种死板的类型限制，还有一些灵活的类型限制。比如子类型是可以赋值给父类型的。这就是型变(类型改变)。这种型变分为两种。一种是<code>子类型赋值给父类型叫做协变</code>。一种是<code>父类型赋值给子类型叫做逆变</code>。</p>
<h3 id="协变">协变</h3>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">interface</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  certificate<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> person<span class="token operator">:</span>Person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">'name'</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> student<span class="token operator">:</span>Student <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">'name2'</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  certificate<span class="token operator">:</span> <span class="token number">2</span>
<span class="token punctuation">&#125;</span>
person <span class="token operator">=</span> student<span class="token punctuation">;</span></code></pre>
<h3 id="逆变">逆变</h3>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">interface</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  certificate<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> <span class="token function-variable function">printHobbies</span><span class="token operator">:</span><span class="token punctuation">(</span>student<span class="token operator">:</span> Student<span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token function-variable function">printName</span><span class="token operator">:</span><span class="token punctuation">(</span>person<span class="token operator">:</span> Person<span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token function-variable function">printHobbies</span> <span class="token operator">=</span> <span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function-variable function">printName</span> <span class="token operator">=</span> <span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
printHobbies <span class="token operator">=</span> printName<span class="token punctuation">;</span>
<span class="token comment">// printName = printHobbies;//不能将类型“(student: Student) => void”分配给类型“(person: Person) => void”。</span></code></pre>
<p>为什么父类型可以赋值给子类型呢？因为这个函数用的是Student来约束类型的，但实际上函数如果只用了父类型Person的属性和方法，也不会有问题，依然是安全的类型。函数的参数是逆变，返回值是协变。</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Func</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> func<span class="token operator">:</span> Func <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token string">'hello'</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">undefined</span><span class="token comment">//报错</span>
<span class="token comment">//因为string不是'hello'的子类型，所以报错</span></code></pre>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Func</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> func<span class="token operator">:</span> <span class="token function-variable function">Func</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">undefined</span>
<span class="token comment">//因为undefined是void的子类型，所以不报错</span></code></pre>
<h3 id="双向协变">双向协变</h3>
<p>在ts2.x之前支持这种赋值，也就是父类型可以赋值给子类型，子类型也可以赋值给父类型。既逆变又协变。叫做<code>双向协变</code>。<code>双向协变</code>不能保证类型安全，所以，之后ts加了一个编译选项，strictFunctionTypes，设置为true就支持函数的逆变，设置为false就支持双向协变。</p>
<h3 id="不变">不变</h3>
<p>非父子类型之间不会发生型变，只要类型不一样就会报错。</p>
<h3 id="类型父子关系的判断">类型父子关系的判断</h3>
<p>在java中，如果A extends B，那么A就是B的子类型。（名义系统类型）在ts中，只要结构上是一致的，那么就可以确定父子关系。（结构类型系统）</p>
<h3 id="参考资料">参考资料</h3>
<p>[1]<a href="https://juejin.cn/book/7047524421182947366?enter_from=course_center">TypeScript 类型体操通关秘籍</a></p>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
  </entry>
  <entry>
    <title>重拾ts类型体操</title>
    <url>/2023/03/10/typeScript/%E9%87%8D%E6%8B%BEts%E7%B1%BB%E5%9E%8B%E4%BD%93%E6%93%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="重拾ts类型体操">重拾ts类型体操</h2>
<h3 id="匹配模式做提取">匹配模式做提取</h3>
<ol>
<li class="lvl-3">
<p>数组类型</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-2">
<p>提取数组第一个元素的类型</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">GetFirst<span class="token operator">&lt;</span>Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> Arr <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> First<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">?</span> First <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span></code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>提取数组的最后一个元素的类型</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">GetLast<span class="token operator">&lt;</span>Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> Arr <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">infer</span> Last<span class="token punctuation">]</span> <span class="token operator">?</span> Last <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span></code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>去掉数组最后一个元素的类型</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">PopArr<span class="token operator">&lt;</span>Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> Arr <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> Arr <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">infer</span> Result<span class="token punctuation">,</span><span class="token builtin">unknown</span><span class="token punctuation">]</span> <span class="token operator">?</span> Result <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span></code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>去掉数组第一个元素的类型</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ShiftArr<span class="token operator">&lt;</span>Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> Arr <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> Arr <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">unknown</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token keyword">infer</span> Result<span class="token punctuation">]</span> <span class="token operator">?</span> Result <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span></code></pre>
<ol start="2">
<li class="lvl-3">
<p>字符串类型</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-2">
<p>判断字符串是否以某个前缀开始</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">StartWith<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> Start <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">></span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Start<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token builtin">string</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span></code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>字符串替换</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ReplaceStr<span class="token operator">&lt;</span>
  Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  From <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  To <span class="token keyword">extends</span> <span class="token builtin">string</span>
<span class="token operator">></span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Prefix<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>From<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Suffix<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span>
    ReplaceStr<span class="token operator">&lt;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Prefix<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>To<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Suffix<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>From<span class="token punctuation">,</span>To<span class="token operator">></span> <span class="token operator">:</span> Str</code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>递归去除字符串中的右侧空格</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">TrimStringRight<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">></span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Result<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token string">' '</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> TrimStringRight<span class="token operator">&lt;</span>Result<span class="token operator">></span> <span class="token operator">:</span> Str<span class="token punctuation">;</span></code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>递归去除字符串中的左侧空格</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">TrimStringLeft<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">></span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token string">' '</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Result<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> TrimStringLeft<span class="token operator">&lt;</span>Result<span class="token operator">></span> <span class="token operator">:</span> Str<span class="token punctuation">;</span></code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>递归去除字符串中的左右侧空格</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">TrimString<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">></span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token string">' '</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Result<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token string">' '</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> TrimString<span class="token operator">&lt;</span>Result<span class="token operator">></span> <span class="token operator">:</span> Str<span class="token punctuation">;</span></code></pre>
<ol start="3">
<li class="lvl-3">
<p>函数</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-2">
<p>提取参数的类型</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">FunctionArgs<span class="token operator">&lt;</span>Fn <span class="token keyword">extends</span> <span class="token builtin">Function</span><span class="token operator">></span></span> <span class="token operator">=</span> Fn <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span><span class="token keyword">infer</span> Args<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">unknown</span> <span class="token operator">?</span> Args <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span></code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>提取返回值</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">FunctionResult<span class="token operator">&lt;</span>Fn <span class="token keyword">extends</span> <span class="token builtin">Function</span><span class="token operator">></span></span> <span class="token operator">=</span> Fn <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">infer</span> Result <span class="token operator">?</span> Result <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span></code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>提取函数中的this</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">FunctionThis<span class="token operator">&lt;</span>Fn <span class="token keyword">extends</span> <span class="token builtin">Function</span><span class="token operator">></span></span> <span class="token operator">=</span> Fn <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span><span class="token keyword">infer</span> This<span class="token punctuation">,</span><span class="token operator">...</span>args<span class="token operator">:</span><span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token builtin">unknown</span> <span class="token operator">?</span> This <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span></code></pre>
<ol start="4">
<li class="lvl-3">
<p>构造器</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-2">
<p>匹配提取出实例对象</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">GetInstanceType<span class="token operator">&lt;</span>Type <span class="token keyword">extends</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">=></span></span><span class="token builtin">any</span><span class="token operator">></span> <span class="token operator">=</span> Type <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">new</span></span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">infer</span> Result <span class="token operator">?</span> Result <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
<span class="token comment">// 测试案例</span>
<span class="token keyword">interface</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">interface</span> <span class="token class-name">PersonConstructor</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">new</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span>Person
<span class="token punctuation">&#125;</span>
<span class="token keyword">type</span> <span class="token class-name">person</span> <span class="token operator">=</span> GetInstanceType<span class="token operator">&lt;</span>PersonConstructor<span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>提取构造器的参数</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">GetInstanceParam<span class="token operator">&lt;</span>Type <span class="token keyword">extends</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">=></span></span><span class="token builtin">any</span><span class="token operator">></span> <span class="token operator">=</span> Type <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">new</span></span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span><span class="token keyword">infer</span> Result<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">unknown</span> <span class="token operator">?</span> Result <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
<span class="token comment">// 测试案例</span>
<span class="token keyword">interface</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">interface</span> <span class="token class-name">PersonConstructor</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">new</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span>Person
<span class="token punctuation">&#125;</span>
<span class="token keyword">type</span> <span class="token class-name">person</span> <span class="token operator">=</span> GetInstanceParam<span class="token operator">&lt;</span>PersonConstructor<span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<ol start="5">
<li class="lvl-3">
<p>索引类型</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-2">
<p>提取ref的值的类型<br>
ts类型体操，提取ref的值的类型。</p>
</li>
</ul>
<h3 id="重新构造做变换">重新构造做变换</h3>
<ol>
<li class="lvl-3">
<p>数组类型的重新构造</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-2">
<p>向数组后面添加元素</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Push<span class="token operator">&lt;</span>Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>Ele<span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>Arr<span class="token punctuation">,</span>Ele<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>向数组前面添加元素</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Shift<span class="token operator">&lt;</span>Ele<span class="token punctuation">,</span> Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">[</span>Ele<span class="token punctuation">,</span><span class="token operator">...</span>Arr<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>合并只有两个元素的两个元组对应的元素</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Concat<span class="token operator">&lt;</span>One <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">unknown</span><span class="token punctuation">,</span><span class="token builtin">unknown</span><span class="token punctuation">]</span><span class="token punctuation">,</span>Two <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">unknown</span><span class="token punctuation">,</span><span class="token builtin">unknown</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> 
One <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> OneFirst<span class="token punctuation">,</span> <span class="token keyword">infer</span> OneSecond<span class="token punctuation">]</span> <span class="token operator">?</span>
  Two <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> TwoFirst<span class="token punctuation">,</span> <span class="token keyword">infer</span> TwoSecond<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>OneFirst<span class="token punctuation">,</span>OneSecond<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>TwoFirst<span class="token punctuation">,</span>TwoSecond<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>合并只有任意个元素的两个元组对应的元素</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Concat<span class="token operator">&lt;</span>One <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>Two <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> 
One <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> OneFirst<span class="token punctuation">,</span><span class="token operator">...</span><span class="token keyword">infer</span> OneOther<span class="token punctuation">]</span> <span class="token operator">?</span>
  Two <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> TwoFirst<span class="token punctuation">,</span><span class="token operator">...</span><span class="token keyword">infer</span> TwoOther<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>OneFirst<span class="token punctuation">,</span>TwoFirst<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">...</span>Concat<span class="token operator">&lt;</span>OneOther<span class="token punctuation">,</span>TwoOther<span class="token operator">></span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
<ol start="2">
<li class="lvl-3">
<p>字符串的重新构造</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-2">
<p>将字符串第一个元素转换成大写</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">StringFistToUp<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">></span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> First<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Other<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Uppercase<span class="token operator">&lt;</span>First<span class="token operator">></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Other<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token builtin">never</span></code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>删除字符串中的某个字串</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">DeleteString<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>Ele <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">></span></span> <span class="token operator">=</span> 
Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Start<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Ele<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> End<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> DeleteString<span class="token operator">&lt;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Start<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>End<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>Ele<span class="token operator">></span> <span class="token operator">:</span> Str</code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>函数类型的重新构造</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">FunAddParam<span class="token operator">&lt;</span>Fn <span class="token keyword">extends</span> <span class="token builtin">Function</span><span class="token punctuation">,</span>Arg <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token operator">></span></span> <span class="token operator">=</span>
Fn <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span><span class="token keyword">infer</span> Args<span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">infer</span> Result <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span><span class="token punctuation">[</span><span class="token operator">...</span>Args<span class="token punctuation">,</span>Arg<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">=></span>Result <span class="token operator">:</span> <span class="token builtin">never</span></code></pre>
<ol start="3">
<li class="lvl-3">
<p>索引类型重新构造</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-2">
<p>把索引类型的Key变成大写</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">KeyUp<span class="token operator">&lt;</span>Obj <span class="token keyword">extends</span> Object<span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">[</span>Key <span class="token keyword">in</span> <span class="token keyword">keyof</span> Obj <span class="token keyword">as</span> Uppercase<span class="token operator">&lt;</span>Key <span class="token operator">&amp;</span> <span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">:</span>Obj<span class="token punctuation">[</span>Key<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>Record，typescript内置了Record，用来创建索引类型。</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">_Record<span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span>
<span class="token punctuation">&#125;</span></code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>将索引转换成只读</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ReadonlyParam<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">readonly</span>  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>给索引添加可选修饰符</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">toSelector<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>去掉只读修饰符</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">RemoveReadonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token operator">-</span><span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>去掉可选修饰符</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ClearSelector<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>对索引类型做过滤</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">FilterValue<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">,</span>valueType <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">[</span>Key <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token constant">T</span><span class="token punctuation">[</span>Key<span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">valueType</span> <span class="token operator">?</span> Key <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>Key<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code></pre>
<h3 id="递归复用做循环">递归复用做循环</h3>
<ol>
<li class="lvl-3">
<p>Promise的递归调用</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-2">
<p>提取不确定层数的Promise中的value类型的高级类型</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">PromiseValue<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> 
<span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">infer</span> Value<span class="token operator">></span></span><span class="token operator">?</span>
  PromiseValue<span class="token operator">&lt;</span>Value<span class="token operator">></span>
<span class="token operator">:</span> <span class="token constant">T</span>
<span class="token keyword">type</span> <span class="token class-name">promise</span> <span class="token operator">=</span> PromiseValue<span class="token operator">&lt;</span><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">Promise</span><span class="token operator">&lt;</span>Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">any</span><span class="token operator">>>></span><span class="token operator">></span></code></pre>
<ol start="2">
<li class="lvl-3">
<p>数组类型的递归</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-2">
<p>不确定长度的元组反转</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ReverseArr<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">unknown</span><span class="token operator">>></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> First<span class="token punctuation">,</span><span class="token operator">...</span><span class="token keyword">infer</span> Other<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">...</span>ReverseArr<span class="token operator">&lt;</span>Other<span class="token operator">></span><span class="token punctuation">,</span>First<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span></code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>寻找元组中是否存在某个元素</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">IsEqual<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span><span class="token constant">B</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">Include<span class="token operator">&lt;</span>Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>Ele<span class="token operator">></span></span> <span class="token operator">=</span> 
Arr <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> First<span class="token punctuation">,</span><span class="token operator">...</span><span class="token keyword">infer</span> Other<span class="token punctuation">]</span> <span class="token operator">?</span>
  IsEqual<span class="token operator">&lt;</span>First<span class="token punctuation">,</span>Ele<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> Include<span class="token operator">&lt;</span>Other<span class="token punctuation">,</span>Ele<span class="token operator">></span>
<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span></code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>删除元组中的某个元素</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">RemoveArrItem<span class="token operator">&lt;</span>
  Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  Item<span class="token punctuation">,</span>
  Result <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">></span></span> <span class="token operator">=</span> Arr <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> First<span class="token punctuation">,</span><span class="token operator">...</span><span class="token keyword">infer</span> Other<span class="token punctuation">]</span> <span class="token operator">?</span>
  IsEqual<span class="token operator">&lt;</span>Item<span class="token punctuation">,</span>First<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> RemoveArrItem<span class="token operator">&lt;</span>Other<span class="token punctuation">,</span>Item<span class="token punctuation">,</span>Result<span class="token operator">></span> <span class="token operator">:</span> RemoveArrItem<span class="token operator">&lt;</span>Other<span class="token punctuation">,</span>Item<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">...</span>Result<span class="token punctuation">,</span>First<span class="token punctuation">]</span><span class="token operator">></span>
<span class="token operator">:</span> Result
<span class="token keyword">type</span> <span class="token class-name">IsEqual<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span><span class="token constant">B</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span></code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>构建一个自定义长度的同一类别的数组</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">BuildArr<span class="token operator">&lt;</span>
  Length <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  Ele<span class="token punctuation">,</span>
  Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">></span></span> <span class="token operator">=</span> Arr<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Length</span> <span class="token operator">?</span> Arr <span class="token operator">:</span> BuildArr<span class="token operator">&lt;</span>Length<span class="token punctuation">,</span>Ele<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">...</span>Arr<span class="token punctuation">,</span>Ele<span class="token punctuation">]</span><span class="token operator">></span></code></pre>
<ol start="3">
<li class="lvl-3">
<p>字符串类型的递归</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-2">
<p>将字符串中的所用的指定字串替换成另一个字符串</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Replace<span class="token operator">&lt;</span>
  Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  From <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  To <span class="token keyword">extends</span> <span class="token builtin">string</span>
<span class="token operator">></span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Start<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>From<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> End<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> Replace<span class="token operator">&lt;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Start<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>To<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>End<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>From<span class="token punctuation">,</span>To<span class="token operator">></span> <span class="token operator">:</span> Str</code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>将字符串的每个元素提取出来转换成联合类型</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">StrType<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>Result <span class="token operator">=</span> <span class="token builtin">never</span><span class="token operator">></span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> First<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Other<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> StrType<span class="token operator">&lt;</span>Other<span class="token punctuation">,</span>Result<span class="token operator">|</span>First<span class="token operator">></span> <span class="token operator">:</span> Result</code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>反转字符串类型</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ReverseString<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>Result <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token operator">></span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> First<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Other<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> ReverseString<span class="token operator">&lt;</span>Other<span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Result<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>First<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token operator">></span> <span class="token operator">:</span> Result</code></pre>
<ol start="4">
<li class="lvl-3">
<p>对象类型的递归(索引类型的递归)</p>
</li>
</ol>
<p>-递归将所有层的索引都变成只读错误代码，如果测试一下我们就会发现，递归没有进行下去。因为ts的类型只有被用到的时候才会被计算。这里只是给第一次的索引加上了只读，但是没有使用。所以不会进行计算，我们可以加一个Obj extends any让其计算。</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">DeepReadonly<span class="token operator">&lt;</span>Obj <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">any</span><span class="token operator">>></span></span> <span class="token operator">=</span> Obj <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">any</span></span> <span class="token operator">?</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">readonly</span> <span class="token punctuation">[</span>Key <span class="token keyword">in</span> <span class="token keyword">keyof</span> Obj<span class="token punctuation">]</span><span class="token operator">:</span> Obj<span class="token punctuation">[</span>Key<span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">any</span><span class="token operator">></span></span> <span class="token operator">?</span> 
    Obj<span class="token punctuation">[</span>Key<span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Function</span></span> <span class="token operator">?</span> Obj<span class="token punctuation">[</span>Key<span class="token punctuation">]</span> <span class="token operator">:</span> DeepReadonly<span class="token operator">&lt;</span>Obj<span class="token punctuation">[</span>Key<span class="token punctuation">]</span><span class="token operator">></span>
  <span class="token operator">:</span> Obj<span class="token punctuation">[</span>Key<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span> <span class="token operator">:</span> <span class="token builtin">never</span></code></pre>
<h3 id="数组长度做计算">数组长度做计算</h3>
<ol>
<li class="lvl-3">
<p>数组长度实现加减乘除</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-2">
<p>加</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">BuildArray<span class="token operator">&lt;</span>
  Length <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  Ele <span class="token operator">=</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span>
  Result <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">></span></span> <span class="token operator">=</span> Result<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Length</span> <span class="token operator">?</span> Result <span class="token operator">:</span> BuildArray<span class="token operator">&lt;</span>Length<span class="token punctuation">,</span>Ele<span class="token punctuation">,</span><span class="token punctuation">[</span>Ele<span class="token punctuation">,</span><span class="token operator">...</span>Result<span class="token punctuation">]</span><span class="token operator">></span>
<span class="token keyword">type</span> <span class="token class-name">Add<span class="token operator">&lt;</span>Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>Result <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> Arr <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> Start <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token keyword">infer</span> Other<span class="token punctuation">]</span>
                                                          <span class="token operator">?</span> Add<span class="token operator">&lt;</span>Other<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">...</span>BuildArray<span class="token operator">&lt;</span>Start<span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">...</span>Result<span class="token punctuation">]</span><span class="token operator">></span> <span class="token operator">:</span> 
                                                          Result<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span>
<span class="token keyword">type</span> <span class="token class-name">s</span> <span class="token operator">=</span> Add<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">></span></code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>减</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">BuildArray<span class="token operator">&lt;</span>
  Length <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  Ele <span class="token operator">=</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span>
  Result <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">></span></span> <span class="token operator">=</span> Result<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Length</span> <span class="token operator">?</span> Result <span class="token operator">:</span> BuildArray<span class="token operator">&lt;</span>Length<span class="token punctuation">,</span>Ele<span class="token punctuation">,</span><span class="token punctuation">[</span>Ele<span class="token punctuation">,</span><span class="token operator">...</span>Result<span class="token punctuation">]</span><span class="token operator">></span>
<span class="token keyword">type</span> <span class="token class-name">SubTract<span class="token operator">&lt;</span>Num1 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>Num2 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token operator">></span></span> <span class="token operator">=</span> BuildArray<span class="token operator">&lt;</span>Num1<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token operator">...</span>BuildArray<span class="token operator">&lt;</span>Num2<span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token keyword">infer</span> Result<span class="token punctuation">]</span> <span class="token operator">?</span> Result<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token builtin">never</span></code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>乘</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">BuildArray<span class="token operator">&lt;</span>
  Length <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  Ele <span class="token operator">=</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span>
  Result <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">></span></span> <span class="token operator">=</span> Result<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Length</span> <span class="token operator">?</span> Result <span class="token operator">:</span> BuildArray<span class="token operator">&lt;</span>Length<span class="token punctuation">,</span>Ele<span class="token punctuation">,</span><span class="token punctuation">[</span>Ele<span class="token punctuation">,</span><span class="token operator">...</span>Result<span class="token punctuation">]</span><span class="token operator">></span>
<span class="token keyword">type</span> <span class="token class-name">SubTract<span class="token operator">&lt;</span>Num1 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>Num2 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token operator">></span></span> <span class="token operator">=</span> BuildArray<span class="token operator">&lt;</span>Num1<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token operator">...</span>BuildArray<span class="token operator">&lt;</span>Num2<span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token keyword">infer</span> Result<span class="token punctuation">]</span> <span class="token operator">?</span> Result<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token builtin">never</span>

<span class="token keyword">type</span> <span class="token class-name">Multiply<span class="token operator">&lt;</span>
  Num1 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  Num2 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  Result <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">></span></span> <span class="token operator">=</span> Num1 <span class="token keyword">extends</span> <span class="token number">0</span> <span class="token operator">?</span> Result<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token operator">:</span> Multiply<span class="token operator">&lt;</span>SubTract<span class="token operator">&lt;</span>Num1<span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">></span><span class="token punctuation">,</span>Num2<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">...</span>Result<span class="token punctuation">,</span><span class="token operator">...</span>BuildArray<span class="token operator">&lt;</span>Num2<span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">></span></code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>除</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">BuildArray<span class="token operator">&lt;</span>
  Length <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  Ele <span class="token operator">=</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span>
  Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">></span></span> <span class="token operator">=</span> Arr<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Length</span> <span class="token operator">?</span>
    Arr <span class="token operator">:</span>
    BuildArray<span class="token operator">&lt;</span>Length<span class="token punctuation">,</span>Ele<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">...</span>Arr<span class="token punctuation">,</span>Ele<span class="token punctuation">]</span><span class="token operator">></span>
<span class="token keyword">type</span> <span class="token class-name">Subtract<span class="token operator">&lt;</span>Num1 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span> Num2 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token operator">></span></span> <span class="token operator">=</span> BuildArray<span class="token operator">&lt;</span>Num1<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token operator">:</span> BuildArray<span class="token operator">&lt;</span>Num2<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">...</span>arr2<span class="token operator">:</span> <span class="token keyword">infer</span> Rest<span class="token punctuation">]</span> <span class="token operator">?</span>
Rest<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token builtin">never</span>

<span class="token keyword">type</span> <span class="token class-name">Divide<span class="token operator">&lt;</span>
  Num1 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  Num2 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  ResultArr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">></span></span> <span class="token operator">=</span> Num1 <span class="token keyword">extends</span> <span class="token number">0</span> <span class="token operator">?</span>
    ResultArr<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token operator">:</span>
    Divide<span class="token operator">&lt;</span>Subtract<span class="token operator">&lt;</span>Num1<span class="token punctuation">,</span>Num2<span class="token operator">></span><span class="token punctuation">,</span>Num2<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token builtin">unknown</span><span class="token punctuation">,</span> <span class="token operator">...</span>ResultArr<span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">divide</span> <span class="token operator">=</span> Divide<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>求字符串的长度的类型</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">StrLen<span class="token operator">&lt;</span>
  Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  ResultArr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">></span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token builtin">string</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Rest<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token operator">?</span> 
  StrLen<span class="token operator">&lt;</span>Rest<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">...</span>ResultArr<span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token punctuation">]</span><span class="token operator">></span>
<span class="token operator">:</span> ResultArr<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">str</span> <span class="token operator">=</span> StrLen<span class="token operator">&lt;</span><span class="token string">'123'</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>比较两个值的大小</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Than<span class="token operator">&lt;</span>
  Num1 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  Num2 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  Count <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">></span></span> <span class="token operator">=</span> Num1 <span class="token keyword">extends</span> <span class="token class-name">Num2</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span>
  Count<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Num2</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span>
  Count<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Num1</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span>
  Than<span class="token operator">&lt;</span>Num1<span class="token punctuation">,</span>Num2<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token builtin">unknown</span><span class="token punctuation">,</span><span class="token operator">...</span>Count<span class="token punctuation">]</span><span class="token operator">></span></code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>Fibonacci 数列的计算</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Fi<span class="token operator">&lt;</span>
  Left <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  Right <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  Num <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  Idx <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token operator">></span></span> <span class="token operator">=</span> Idx<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Num</span> <span class="token operator">?</span> Right<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token operator">:</span> Fi<span class="token operator">&lt;</span>Right<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">...</span>Left<span class="token punctuation">,</span><span class="token operator">...</span>Right<span class="token punctuation">]</span><span class="token punctuation">,</span>Num<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">...</span>Idx<span class="token punctuation">,</span><span class="token builtin">unknown</span><span class="token punctuation">]</span><span class="token operator">></span>

<span class="token keyword">type</span> <span class="token class-name">Fib<span class="token operator">&lt;</span>Num <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token operator">></span></span> <span class="token operator">=</span> Fi<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>Num<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span></code></pre>
<h3 id="联合分散可化简">联合分散可化简</h3>
<ol>
<li class="lvl-3">
<p>将联合类型的字符串_去点，并将_后的第一个字母大写</p>
</li>
</ol>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Tool<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">></span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> First<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Start<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> End<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> Tool<span class="token operator">&lt;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>First<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Uppercase<span class="token operator">&lt;</span>Start<span class="token operator">></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>End<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token operator">></span> <span class="token operator">:</span> Str
<span class="token keyword">type</span> <span class="token class-name">item</span> <span class="token operator">=</span> Tool<span class="token operator">&lt;</span><span class="token string">'aa_bb_cc_dd'</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<ol start="2">
<li class="lvl-3">
<p>判断联合类型</p>
</li>
</ol>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Tool<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span> <span class="token operator">=</span> <span class="token constant">A</span><span class="token operator">></span></span> <span class="token operator">=</span>
<span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span><span class="token operator">?</span>
  <span class="token punctuation">[</span><span class="token constant">B</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token constant">A</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token operator">:</span> <span class="token builtin">never</span></code></pre>
<ol start="3">
<li class="lvl-3">
<p>BEM<br>
BEM是css命名规范</p>
</li>
</ol>
<pre class="language-yarm" data-language="yarm"><code class="language-yarm">type bemResult &#x3D; BEM&lt;&#39;guang&#39;, [&#39;aaa&#39;, &#39;bbb&#39;], [&#39;warning&#39;, &#39;success&#39;]&gt;;
&#x2F;&#x2F;会转换成
guang__aaa--warning guang__bbb--success</code></pre>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">BEM</span><span class="token operator">&lt;</span>Ele1 <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>Ele2 <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>Ele3 <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Ele1<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">__</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Ele2<span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Ele3<span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span></code></pre>
<ol start="4">
<li class="lvl-3">
<p>AllCombinations</p>
</li>
</ol>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Combination<span class="token operator">&lt;</span><span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">></span></span> <span class="token operator">=</span>
    <span class="token operator">|</span> <span class="token constant">A</span>
    <span class="token operator">|</span> <span class="token constant">B</span>
    <span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">A</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">B</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>
    <span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">B</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">A</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">AllCombinations<span class="token operator">&lt;</span><span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token constant">A</span><span class="token operator">></span></span> <span class="token operator">=</span> 
<span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span>
    <span class="token operator">?</span> Combination<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> AllCombinations<span class="token operator">&lt;</span>Exclude<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">>>></span>
    <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">all</span> <span class="token operator">=</span> AllCombinations<span class="token operator">&lt;</span><span class="token string">'A'</span> <span class="token operator">|</span> <span class="token string">'B'</span> <span class="token operator">|</span> <span class="token string">'C'</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>
<h3 id="特殊类型要记清">特殊类型要记清</h3>
<ol>
<li class="lvl-3">
<p>IsEqual</p>
</li>
</ol>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">IsEqual<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span><span class="token constant">B</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span></code></pre>
<ol start="2">
<li class="lvl-3">
<p>几个条件类型的特殊情况</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-2">
<p>联合类型作为类型参数在条件类型左边的时候，会把每个类型单独传入做计算，并把结果合并成联合类型。</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Test<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">res</span> <span class="token operator">=</span> Test<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">|</span> <span class="token string">'a'</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment">//type res = 1 | 2</span></code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>boolean也是联合类型，是false | true。</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Test<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">res</span> <span class="token operator">=</span> Test<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment">//type res = false | true</span></code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>any类型如果在条件类型的左边，则返回trueType和falseType的联合类型。</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Test<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">res</span> <span class="token operator">=</span> Test<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment">//type res = 1 | 2</span></code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>当条件类型的左侧是never的时候直接返回never。</p>
</li>
</ul>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Test<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">res</span> <span class="token operator">=</span> Test<span class="token operator">&lt;</span><span class="token builtin">never</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment">//type res = never</span></code></pre>
<h3 id="内置高级类型">内置高级类型</h3>
<ol>
<li class="lvl-3">
<p>Parameters-用来提取函数参数的类型</p>
</li>
</ol>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Parameters<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span></span> <span class="token builtin">any</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">P</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">any</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span></code></pre>
<ol start="2">
<li class="lvl-3">
<p>ResultType-用来提取函数的返回值类型</p>
</li>
</ol>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ReturnType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span></span> <span class="token builtin">any</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span></code></pre>
<ol start="3">
<li class="lvl-3">
<p>ConstructorParameters-用来提取构造器的参数类型</p>
</li>
</ol>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ConstructorParameters<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">abstract</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span></span> <span class="token builtin">any</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">abstract</span></span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">P</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">any</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span></code></pre>
<ol start="4">
<li class="lvl-3">
<p>InstanceType-用来提取构造器的返回值类型</p>
</li>
</ol>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">InstanceType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">abstract</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span></span> <span class="token builtin">any</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">abstract</span></span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span></code></pre>
<ol start="5">
<li class="lvl-3">
<p>Partial-把索引类型变成可选类型</p>
</li>
</ol>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Partial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<ol start="6">
<li class="lvl-3">
<p>Required-把可选的索引类型变成必选类型</p>
</li>
</ol>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Required<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<ol start="7">
<li class="lvl-3">
<p>Readonly-把索引类型变成只读类型</p>
</li>
</ol>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Readonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<ol start="8">
<li class="lvl-3">
<p>Pick-对索引进行修改和过滤,保留对应的索引</p>
</li>
</ol>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<ol start="9">
<li class="lvl-3">
<p>Record-用来创建索引类型</p>
</li>
</ol>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Record<span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<ol start="10">
<li class="lvl-4">
<p>Exclude-用来删除联合类型的一部分</p>
</li>
</ol>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Exclude<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span></code></pre>
<ol start="11">
<li class="lvl-4">
<p>Extract-用来保留联合类型的一部分</p>
</li>
</ol>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Extract<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span></code></pre>
<ol start="12">
<li class="lvl-4">
<p>Omit-和Pick相反，去掉对应的索引</p>
</li>
</ol>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Omit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token builtin">any</span><span class="token operator">></span></span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> Exclude<span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">>></span><span class="token punctuation">;</span></code></pre>
<ol start="13">
<li class="lvl-4">
<p>Awaited-用来获取Promise的ValueType的类型</p>
</li>
</ol>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Awaited<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span>
    <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">null</span></span> <span class="token operator">|</span> <span class="token keyword">undefined</span>
        <span class="token operator">?</span> <span class="token constant">T</span> 
        <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span> <span class="token operator">&amp;</span> <span class="token punctuation">&#123;</span> <span class="token function">then</span><span class="token punctuation">(</span>onfulfilled<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">F</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">&#125;</span>
            <span class="token operator">?</span> <span class="token constant">F</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">V</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">any</span><span class="token punctuation">)</span>
                <span class="token operator">?</span> Awaited<span class="token operator">&lt;</span><span class="token constant">V</span><span class="token operator">></span>
                <span class="token operator">:</span> <span class="token builtin">never</span> 
            <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span></code></pre>
<ol start="14">
<li class="lvl-4">
<p>NonNullable-用来判断是否为非空类型</p>
</li>
</ol>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">NonNullable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">null</span></span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span></code></pre>
<ol start="15">
<li class="lvl-4">
<p>ThisParameterType-函数里可以调用 this，这个 this 的类型也可以约束。</p>
</li>
</ol>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ThisParameterType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> 
    <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">any</span> 
        <span class="token operator">?</span> <span class="token constant">U</span> 
        <span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">;</span></code></pre>
<ol start="16">
<li class="lvl-4">
<p>OmitThisParameter-用来提取this</p>
</li>
</ol>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">OmitThisParameter<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> 
    <span class="token builtin">unknown</span> <span class="token keyword">extends</span> <span class="token class-name">ThisParameterType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> 
        <span class="token operator">?</span> <span class="token constant">T</span> 
        <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">A</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">infer</span> <span class="token constant">R</span> 
            <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token constant">A</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">R</span> 
            <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>typescript</category>
      </categories>
  </entry>
  <entry>
    <title>webpack loader</title>
    <url>/2023/04/15/webpack/loader/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="webpack-loader">webpack loader</h2>
<p><a href="https://github.com/guLinga/webpack-practice">代码仓库</a></p>
<h3 id="定义">定义</h3>
<p>简单来说loader就是把webpack不能直接处理的资源变成可以直接处理。<br>
loader本质上是一个js模块，导出的是一个函数。</p>
<h3 id="loader函数的结构">loader函数的结构</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * 
 * @param &#123;string|Buffer&#125; context 
 * @param &#123;object&#125; map 可以被 https://github.com/mozilla/source-map 使用的 SourceMap 数据
 * @param &#123;any&#125; meta meta 数据，可以是任何内容
 * @returns context
 */</span>
<span class="token comment">// 其中 map 和 meta 是可选参</span>
<span class="token keyword">function</span> <span class="token function">Demo</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span>map<span class="token punctuation">,</span>meta</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"context"</span><span class="token punctuation">,</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"map"</span><span class="token punctuation">,</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"meta"</span><span class="token punctuation">,</span>meta<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> context<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Demo<span class="token punctuation">;</span></code></pre>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// webpack.config.js</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'build.js'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'dist'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./webpack-loader/demo.js'</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<h3 id="loader优先级及其执行顺序">loader优先级及其执行顺序</h3>
<p>loader中有四类：</p>
<ol>
<li class="lvl-3">
<p>pre 前置loader</p>
</li>
<li class="lvl-3">
<p>normal 普通loader</p>
</li>
<li class="lvl-3">
<p>inline 内联loader</p>
</li>
<li class="lvl-3">
<p>post后置loader</p>
</li>
</ol>
<p>默认的执行优先级为 pre，normal，inline，post<br>
相同优先级的loader执行顺序为 从右往左，从下往上</p>
<p>通过下面的代码输出顺序为<code>Three</code>、<code>Second</code>、<code>First</code>，可以验证相同优先级的loader执行顺序为<code>从右往左，从下往上</code>。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// webpack.config.js</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'build.js'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'dist'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./webpack-loader/first.js'</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">&#123;</span><span class="token literal-property property">loader</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./webpack-loader/second.js'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token punctuation">&#123;</span><span class="token literal-property property">loader</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./webpack-loader/three.js'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
        <span class="token punctuation">]</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>给loader加上不同的优先级来改变执行顺序。输出顺序为<code>First</code>、<code>Three</code>、<code>Second</code>。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'build.js'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'dist'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./webpack-loader/first.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">enforce</span><span class="token operator">:</span> <span class="token string">'pre'</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">&#123;</span><span class="token literal-property property">loader</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./webpack-loader/second.js'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token punctuation">&#123;</span><span class="token literal-property property">loader</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./webpack-loader/three.js'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">enforce</span><span class="token operator">:</span> <span class="token string">'post'</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<h3 id="限制loader在哪些位置查找">限制loader在哪些位置查找</h3>
<p>可以使用<code>resolveLoader.modules</code>来限制loader的查找位置。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// webpack.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'build.js'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'dist'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./webpack-loader/first.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">enforce</span><span class="token operator">:</span> <span class="token string">'pre'</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">&#123;</span><span class="token literal-property property">loader</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./webpack-loader/second.js'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token punctuation">&#123;</span><span class="token literal-property property">loader</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./webpack-loader/three.js'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">enforce</span><span class="token operator">:</span> <span class="token string">'post'</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">resolveLoader</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'node_modules'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'webpack-loader'</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<h3 id="loader的使用方式分类">loader的使用方式分类</h3>
<p>loader在使用方式上分为<code>同步loader</code>、<code>异步loader</code>、<code>raw loader</code>、<code>pitch loader</code>四类。</p>
<ol>
<li class="lvl-3">
<p>同步loader</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Sync</span><span class="token punctuation">(</span><span class="token parameter">content<span class="token punctuation">,</span>map<span class="token punctuation">,</span>meta</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'同步loader'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>content<span class="token punctuation">,</span>map<span class="token punctuation">,</span>meta<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Sync<span class="token punctuation">;</span></code></pre>
<ol start="2">
<li class="lvl-3">
<p>异步loader<br>
异步loader并不是让出当前loader的执行权力让下一个的loader先执行，而是卡住当前执行进程，方便你再异步的时间里进行一些额外的操作。等到操作完成后任务进程交给下一个loader。</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Async</span><span class="token punctuation">(</span><span class="token parameter">content<span class="token punctuation">,</span>map<span class="token punctuation">,</span>mate</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> 
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'异步 loader 外'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// this.async 告诉 loader-runner 这个 loader 将会异步地回调。返回 this.callback。</span>
  <span class="token keyword">const</span> callback <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'异步 loader 内'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 调用 callback 后，才会执行下一个 loader</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>content<span class="token punctuation">,</span>map<span class="token punctuation">,</span>mate<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Async<span class="token punctuation">;</span></code></pre>
<p>下面代码输出<code>Second</code>、<code>异步 loader 外</code>、<code>异步 loader 内</code>、<code>First</code>，<code>Second</code>、<code>异步 loader 外</code>输出后等到0.5s后再输出后面的，说明异步的loader类似于async中的await机制，等到结果返回后再继续执行后面的代码。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'build.js'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'dist'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./webpack-loader/first.js'</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./webpack-loader/async.js'</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">&#123;</span><span class="token literal-property property">loader</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./webpack-loader/second.js'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
        <span class="token punctuation">]</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">resolveLoader</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'node_modules'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'webpack-loader'</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ol start="3">
<li class="lvl-3">
<p>raw loader<br>
raw loader一半用于处理 Buffer 数据流文件，在处理图片，字体图标经常用到。</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Raw</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> content<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
Raw<span class="token punctuation">.</span>raw <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Raw<span class="token punctuation">;</span></code></pre>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'build.js'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'dist'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'raw'</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">resolveLoader</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'node_modules'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'webpack-loader'</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>上面代码输出内容为：</p>
<pre class="language-text" data-language="text"><code class="language-text">&lt;Buffer 2f 2f 20 69 6d 70 6f 72 74 20 42 75 74 74 6f 6e 20 66 72 6f 6d 20 27 2e 2f 63 6f 6d 70 6f 6e 65 6e 74 73 2f 42 75 74 74 6f 6e 27 0d 0a 0d 0a 2f 2f 20 ... 113 more bytes></code></pre>
<ol start="4">
<li class="lvl-3">
<p>pitch loader</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// loader1.js</span>
<span class="token keyword">function</span> <span class="token function">loader1</span><span class="token punctuation">(</span><span class="token parameter">content<span class="token punctuation">,</span>map<span class="token punctuation">,</span>mate</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'同步 loader1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>content<span class="token punctuation">,</span>map<span class="token punctuation">,</span>mate<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">pitch1</span><span class="token punctuation">(</span><span class="token parameter">remainingRequest<span class="token punctuation">,</span> precedingRequest<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'pitch loader1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> loader1<span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>pitch <span class="token operator">=</span> pitch1<span class="token punctuation">;</span></code></pre>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// loader2.js</span>
<span class="token keyword">function</span> <span class="token function">loader2</span><span class="token punctuation">(</span><span class="token parameter">content<span class="token punctuation">,</span> map<span class="token punctuation">,</span> meta</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'异步 loader2 外'</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> callback <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'异步 loader2 内'</span><span class="token punctuation">)</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> content<span class="token punctuation">,</span> map<span class="token punctuation">,</span> meta<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">pitch2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'pitch loader2'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> loader2
module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>pitch <span class="token operator">=</span> pitch2</code></pre>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// loader3.js</span>
<span class="token keyword">function</span> <span class="token function">loader3</span><span class="token punctuation">(</span><span class="token parameter">content<span class="token punctuation">,</span> map<span class="token punctuation">,</span> meta</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'loader3'</span><span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> content<span class="token punctuation">,</span> map<span class="token punctuation">,</span> meta<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">pitch3</span><span class="token punctuation">(</span><span class="token parameter">remainingRequest<span class="token punctuation">,</span> precedingRequest<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'pitch loader3'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> loader3
module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>pitch <span class="token operator">=</span> pitch3</code></pre>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// webpack.config.js</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'build.js'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'dist'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'loader1'</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'loader2'</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'loader3'</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">resolveLoader</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'node_modules'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'webpack-loader'</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>上面代码的执行顺序是<code>pitch loader1</code>、<code>pitch loader2</code>、<code>pitch loader3</code>、<code>loader3</code>、<code>异步 loader2 外</code>、<code>异步 loader2 内</code>、<code>同步 loader1</code>。由此可见，pitch的执行顺序是<code>从上到下，从左到右</code>。</p>
<p>上面的pitch loader都是无返回值的情况，如果有返回值执行顺序又会发生改变。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">pitch2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'pitch loader2'</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token string">'console.log("pitch2 return")'</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>讲pitch2改成上面的代码，运行程序后输出<code>pitch loader1</code>、<code>pitch loader2</code>、<code>同步 loader1</code>，如果pitch有返回值会阻断后面的执行，直接执行前一个loader的normal loader（没有enforce属性默认是normal loader）。</p>
<p><strong>熔断时要注意，如果pitch中return一个不可执行字符串，例如&quot;pitch loader&quot;，在normal loader中return需要做处理，处理成可执行字符串，例如console.log(“pitch loader”)，否则会报错<code>You may need an additional loader to handle the result of these loaders.</code>，还要注意的是如果pitch中return的是一个连贯的字符串，也不会报错，例如return “123”。</strong></p>
<p><strong>我费劲心思的想在pitch中获取对应loader的content参数，还尝试在loader中获取原本的content，但是都失败了，所以如果想pitch想要想loader传参还是推荐使用data的方式。</strong></p>
<ol start="5">
<li class="lvl-3">
<p>pitch传参</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// loader1.js</span>
<span class="token keyword">function</span> <span class="token function">loader1</span><span class="token punctuation">(</span><span class="token parameter">content<span class="token punctuation">,</span>map<span class="token punctuation">,</span>meta</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'同步 loader1'</span><span class="token punctuation">,</span>content<span class="token punctuation">,</span>map<span class="token punctuation">,</span>meta<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>content<span class="token punctuation">,</span>map<span class="token punctuation">,</span>meta<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">pitch1</span><span class="token punctuation">(</span><span class="token parameter">remainingRequest<span class="token punctuation">,</span> precedingRequest<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'pitch loader1'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> loader1<span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>pitch <span class="token operator">=</span> pitch1<span class="token punctuation">;</span></code></pre>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// loader2.js</span>
<span class="token keyword">function</span> <span class="token function">loader2</span><span class="token punctuation">(</span><span class="token parameter">content<span class="token punctuation">,</span> map<span class="token punctuation">,</span> meta</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'异步 loader2 外'</span><span class="token punctuation">,</span>content<span class="token punctuation">,</span> map<span class="token punctuation">,</span> meta<span class="token punctuation">)</span>
  <span class="token keyword">const</span> callback <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'异步 loader2 内'</span><span class="token punctuation">)</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> content<span class="token punctuation">,</span> map<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">pitch2</span><span class="token punctuation">(</span><span class="token parameter">remainingRequest<span class="token punctuation">,</span> precedingRequest<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  data<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'pitch loader2'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> loader2
module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>pitch <span class="token operator">=</span> pitch2</code></pre>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// loader3.js</span>
<span class="token keyword">function</span> <span class="token function">loader3</span><span class="token punctuation">(</span><span class="token parameter">content<span class="token punctuation">,</span> map<span class="token punctuation">,</span> meta</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'loader3'</span><span class="token punctuation">,</span>content<span class="token punctuation">,</span> map<span class="token punctuation">,</span> meta<span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> content<span class="token punctuation">,</span> map<span class="token punctuation">,</span> meta<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">pitch3</span><span class="token punctuation">(</span><span class="token parameter">remainingRequest<span class="token punctuation">,</span> precedingRequest<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'pitch loader3'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> loader3
module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>pitch <span class="token operator">=</span> pitch3</code></pre>
<p>运行webpack进行打包，输出为:</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">pitch loader1 <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
pitch loader2 <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span>
pitch loader3 <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
loader3 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'index入口'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">undefined</span> <span class="token keyword">undefined</span>
异步 loader2 外 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'index入口'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">undefined</span> <span class="token keyword">undefined</span>
异步 loader2 内
同步 loader1 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'index入口'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">undefined</span> <span class="token number">1</span></code></pre>
<p>我们可以看到，我们在pitch2中给data添加了value属性，在loader2中可以通过this.data.value来获取。在loader2中callback让后面的loader可以通过meta获取到该参数。</p>
<h3 id="手写loader练习">手写loader练习</h3>
<ol>
<li class="lvl-3">
<p>clean-log-loader 清除所有的console.log语句</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">CleanLogLoader</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> content<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">console\.log\(.*\);?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> CleanLogLoader<span class="token punctuation">;</span></code></pre>
<ol start="2">
<li class="lvl-3">
<p>banner-loader 用于给代码添加注释信息</p>
</li>
</ol>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token comment">// banner-loader.json</span>
<span class="token punctuation">&#123;</span>
  <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"object"</span><span class="token punctuation">,</span>
  <span class="token property">"properties"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
    <span class="token property">"author"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"additionalProperties"</span> <span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">&#125;</span></code></pre>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// banner-loader.js</span>
<span class="token keyword">const</span> schema <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./banner-loader.json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">BannerLoader</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span>schema<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> prefix <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    /**
     * author: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>options<span class="token punctuation">.</span>author<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">
     */ 
  </span><span class="token template-punctuation string">`</span></span>
  <span class="token keyword">return</span> prefix <span class="token operator">+</span> content<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> BannerLoader<span class="token punctuation">;</span></code></pre>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// webpack.config.js</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'build.js'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'dist'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span><span class="token literal-property property">test</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span><span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'banner-loader'</span><span class="token punctuation">,</span><span class="token literal-property property">options</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
          <span class="token literal-property property">author</span><span class="token operator">:</span> <span class="token string">'test'</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
      <span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">resolveLoader</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'node_module'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./webpack-loader/write'</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<h3 id="loader执行原理">loader执行原理</h3>
<p>小结： normal loader 从下往上，从右往左；pitch loader 与之相反。优先级权重为 pre，normal，inline，post。熔断时 pitch loader 返回上一个loader的 normal loader。</p>
<ol>
<li class="lvl-3">
<p>loader执行栈</p>
</li>
</ol>
<p>loader执行栈分为<code>loader分类</code>和<code>生成执行栈</code>，loader分类主要是webpack将获取到的loader按照pre、normal、inline、post分类。</p>
<p>webpack会将匹配到的loader按照post、inline、normal、pre的顺序压入执行栈。这与上面说的按照pre、normal、inline、post顺序执行正好相反，这是因为loader运行的时候顺序是反向的。</p>
<ol start="2">
<li class="lvl-3">
<p>loader runner的运行<br>
loader runner运行loader，主要包括pitch和normal两个阶段。分别对应loader runner的iteratePitchingLoader和iterateNormalLoader两个方法。<br>
interatePitchingLoader递归执行，同时记录loader的pitch状态，与当前的loaderIndex，当到达最大值时也就是执行栈的长度，所有的loader pitch已经执行完毕。开始处理module，调用processResource方法处理模块，loaderIndex–，并递归调用interateNormalLoader。</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// abort after last loader</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>loaderContext<span class="token punctuation">.</span>loaderIndex <span class="token operator">>=</span> loaderContext<span class="token punctuation">.</span>loaders<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
   <span class="token keyword">return</span> <span class="token function">processResource</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> loaderContext<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// iterate</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>currentLoaderObject<span class="token punctuation">.</span>pitchExecuted<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  loaderContext<span class="token punctuation">.</span>loaderIndex<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">iteratePitchingLoaders</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> loaderContext<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">loaderContext<span class="token punctuation">.</span>loaderIndex<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token function">iterateNormalLoaders</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> loaderContext<span class="token punctuation">,</span> args<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<ol start="3">
<li class="lvl-3">
<p>熔断原理在 loader runner 中，当 loaderIndex 达不到 loader 本身的长度时（有 pitch loader 提前 return 发生了熔断）时， processResource 这个方法是不会触发的，这就导致 addDependency 这个方法也不会触发，因此不会将该模块资源添加进依赖，无法读取模块的内容。继而熔断后续操作。</p>
</li>
<li class="lvl-3">
<p>loader异步处理在loader中调用 this.async 时，实际是将 loaderContext 上的 async 属性赋值为一个函数。isSync 变量默认为 true，当 loader 中使用 this.async 时，它被置为 false，并返回一个 innerCallback 作为异步回调完成的通知。</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">context<span class="token punctuation">.</span><span class="token function-variable function">async</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>isDone<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>reportedError<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// ignore</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"async(): The callback was already called."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  isSync <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> innerCallback<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>当 isSync 为 true 时，会在 loader function 执行完毕后同步回调 callback 继续 loader runner 的执行流程。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>isSync<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  isDone <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> result <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> result<span class="token punctuation">.</span>then <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ol start="5">
<li class="lvl-3">
<p>loader中的this<br>
webpack官方对于loader的定义中有这样一段，函数中的 this 作为上下文会被 webpack 填充。那这个this到底是什么呢？是webpack的实例吗，其实不是，这个this是 loader runner 中的 loaderContext，我们熟悉的 async，callback 等都来自于这个对象。</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// prepare loader objects</span>
loaders <span class="token operator">=</span> loaders<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>createLoaderObject<span class="token punctuation">)</span><span class="token punctuation">;</span>

loaderContext<span class="token punctuation">.</span>context <span class="token operator">=</span> contextDirectory<span class="token punctuation">;</span>
loaderContext<span class="token punctuation">.</span>loaderIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
loaderContext<span class="token punctuation">.</span>loaders <span class="token operator">=</span> loaders<span class="token punctuation">;</span>
loaderContext<span class="token punctuation">.</span>resourcePath <span class="token operator">=</span> resourcePath<span class="token punctuation">;</span>
loaderContext<span class="token punctuation">.</span>resourceQuery <span class="token operator">=</span> resourceQuery<span class="token punctuation">;</span>
loaderContext<span class="token punctuation">.</span>resourceFragment <span class="token operator">=</span> resourceFragment<span class="token punctuation">;</span>
loaderContext<span class="token punctuation">.</span>async <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
loaderContext<span class="token punctuation">.</span>callback <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span></code></pre>
<p>你可以在这上面查看this的参数<a href="https://webpack.docschina.org/api/loaders/#the-loader-context">官网Loader Context</a></p>
<h3 id="小结">小结</h3>
<ol>
<li class="lvl-3">
<p>loader的优先级顺序为pre、normal、inline、post。</p>
</li>
<li class="lvl-3">
<p>loader在normal中的执行顺序为<code>从下到上，从右到左</code>。</p>
</li>
<li class="lvl-3">
<p>loader中pitch的执行顺序正好和normal相反，为<code>从上到下，从左到右</code>。loader的熔断机制可以改变执行顺序。</p>
</li>
<li class="lvl-3">
<p>介绍了loader的四种类型，同步loader、异步loader、raw loader、pitch loader。</p>
</li>
<li class="lvl-3">
<p>手写练习了两个loader。</p>
</li>
<li class="lvl-3">
<p>了解了loader runner运行的机制和熔断机制。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
  </entry>
  <entry>
    <title>webpack compiler 钩子</title>
    <url>/2023/04/15/webpack/webpack%20compiler%20%E9%92%A9%E5%AD%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="webpack-compiler-钩子">webpack compiler 钩子</h2>
<h3 id="compiler">compiler</h3>
<p>compiler的hooks属性上面携带了插件执行的生命周期钩子。你可以调用不同的钩子来控制不同时刻的执行。</p>
<h3 id="compilation">compilation</h3>
<p>compilation对象记录模块的信息，只要项目文件改动，就会重新生成compilation，compilation上面有很多方法可以供我们使用。<br>
<a href="https://webpack.docschina.org/api/compilation-object/">webpack官网compilation对象</a></p>
<h3 id="compiler-钩子">compiler 钩子</h3>
<p><a href="https://webpack.docschina.org/api/compiler-hooks/">官网compiler钩子地址</a></p>
<p>常用生命周期钩子</p>
<ol>
<li class="lvl-3">
<p>beforeRun 编译器执行前</p>
</li>
<li class="lvl-3">
<p>run 编译器开始读取记录前</p>
</li>
<li class="lvl-3">
<p>beforeCompile 开始编译之前</p>
</li>
<li class="lvl-3">
<p>compile 新的compilation创建之前</p>
</li>
<li class="lvl-3">
<p>compilation compilation 创建之后执行</p>
</li>
<li class="lvl-3">
<p>emit 文件提交到dist目录前</p>
</li>
<li class="lvl-3">
<p>afterEmit 输出 asset 到 output 目录之后执行</p>
</li>
<li class="lvl-3">
<p>make compilation 结束之前执行</p>
</li>
<li class="lvl-3">
<p>done 在 compilation 完成时执行</p>
</li>
</ol>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
  </entry>
  <entry>
    <title>Promise/A+</title>
    <url>/2022/10/16/write/PromiseA+/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="Promise-A">Promise/A+</h2>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">myPromise</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">static</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">'pending'</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">'fulfilled'</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">'rejected'</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">=</span> myPromise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>onFulfilledCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
          <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">===</span> myPromise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">=</span> myPromise<span class="token punctuation">.</span><span class="token constant">FULFILLED</span><span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult <span class="token operator">=</span> result<span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>onFulfilledCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">callback</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
              <span class="token function">callback</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">===</span> myPromise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">=</span> myPromise<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult <span class="token operator">=</span> reason<span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">callback</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
              <span class="token function">callback</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">myPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">===</span> myPromise<span class="token punctuation">.</span><span class="token constant">FULFILLED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
              <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> onFulfilled <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
                      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                          <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
                          <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
                      <span class="token punctuation">&#125;</span>
                  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                      <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token punctuation">&#125;</span>
              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">===</span> myPromise<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
              <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> onRejected <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                          <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
                      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                          <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
                          <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
                      <span class="token punctuation">&#125;</span>
                  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                      <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
                  <span class="token punctuation">&#125;</span>
              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">===</span> myPromise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
              <span class="token keyword">this</span><span class="token punctuation">.</span>onFulfilledCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> onFulfilled <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                              <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
                          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                              <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
                              <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
                          <span class="token punctuation">&#125;</span>
                      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                          <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                      <span class="token punctuation">&#125;</span>
                  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> onRejected <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                              <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
                          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                              <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
                              <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
                          <span class="token punctuation">&#125;</span>
                      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                          <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                      <span class="token punctuation">&#125;</span>
                  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

      <span class="token keyword">return</span> promise2
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">resolvePromise</span><span class="token punctuation">(</span><span class="token parameter">promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> promise2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'Chaining cycle detected for promise'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token keyword">instanceof</span> <span class="token class-name">myPromise</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      x<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">y</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> y<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">var</span> then <span class="token operator">=</span> x<span class="token punctuation">.</span>then<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> then <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">let</span> called <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
              <span class="token function">then</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>
                  x<span class="token punctuation">,</span>
                  <span class="token parameter">y</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                      <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
                      called <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                      <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> y<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                  <span class="token parameter">r</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                      <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
                      called <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                      <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token punctuation">&#125;</span>
              <span class="token punctuation">)</span>
          <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
              called <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

              <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

myPromise<span class="token punctuation">.</span><span class="token function-variable function">deferred</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  result<span class="token punctuation">.</span>promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">myPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    result<span class="token punctuation">.</span>resolve <span class="token operator">=</span> resolve<span class="token punctuation">;</span>
    result<span class="token punctuation">.</span>reject <span class="token operator">=</span> reject<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> myPromise<span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>write</category>
      </categories>
  </entry>
  <entry>
    <title>手写ahooks的useEventEmitter</title>
    <url>/2023/03/22/write/%E6%89%8B%E5%86%99ahooks%E7%9A%84useEventEmitter/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="手写ahooks的useEventEmitter">手写ahooks的useEventEmitter</h2>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useRef<span class="token punctuation">,</span> useEffect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Subscription<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">EventEmitter<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">private</span> subscriptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set<span class="token operator">&lt;</span>Subscription<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">>></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function-variable function">emit</span> <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> subscription <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subscriptions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">subscription</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token function-variable function">useSubscription</span> <span class="token operator">=</span> <span class="token punctuation">(</span>callback<span class="token operator">:</span> Subscription<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// eslint-disable-next-line react-hooks/rules-of-hooks</span>
    <span class="token keyword">const</span> callbackRef <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useRef</span><span class="token generic class-name"><span class="token operator">&lt;</span>Subscription<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">>></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    callbackRef<span class="token punctuation">.</span>current <span class="token operator">=</span> callback<span class="token punctuation">;</span>
    <span class="token comment">// eslint-disable-next-line react-hooks/rules-of-hooks</span>
    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">function</span> <span class="token function">subscription</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>callbackRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          callbackRef<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>subscriptions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>subscription<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>subscriptions<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>subscription<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useEventEmitter</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token keyword">void</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> ref <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useRef</span><span class="token generic class-name"><span class="token operator">&lt;</span>EventEmitter<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">>></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ref<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ref<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> ref<span class="token punctuation">.</span>current<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>]]></content>
      <categories>
        <category>write</category>
      </categories>
  </entry>
  <entry>
    <title>手写apply</title>
    <url>/2022/09/29/write/%E6%89%8B%E5%86%99apply/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="#1">手写apply</a></p>
<ul class="lvl-0">
<li class="lvl-4"><a href="#2">方法一：ES6</a></li>
<li class="lvl-4"><a href="#3">方法二：ES5</a></li>
<li class="lvl-4"><a href="#4">参考文献</a></li>
</ul>
<p id=1></p>
<h2 id="手写apply">手写apply</h2>
<p id=2></p>
<h3 id="方法一：ES6">方法一：ES6</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">apply2</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  context <span class="token operator">=</span> context <span class="token operator">||</span> globalThis<span class="token punctuation">;</span>
  <span class="token keyword">const</span> _symbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  context<span class="token punctuation">[</span>_symbol<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> context<span class="token punctuation">[</span>_symbol<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">delete</span> context<span class="token punctuation">[</span>_symbol<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p id=3></p>
<h3 id="方法二：ES5">方法二：ES5</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">apply3</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  context <span class="token operator">=</span> context <span class="token operator">||</span> globalThis<span class="token punctuation">;</span>
  context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> result<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    retult <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      args<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'arr['</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    result <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'context.fn('</span> <span class="token operator">+</span> args <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p id=4></p>
<h3 id="参考文献">参考文献</h3>
<p>[1]<a href="https://www.zhangbaolin.cn/docs/js/%E6%89%8B%E5%86%99/%E5%A6%82%E4%BD%95%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0call%E3%80%81apply%E5%87%BD%E6%95%B0">如何模拟实现call、apply函数</a></p>
]]></content>
      <categories>
        <category>write</category>
      </categories>
  </entry>
  <entry>
    <title>手写bind</title>
    <url>/2022/09/29/write/%E6%89%8B%E5%86%99bind/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="#1">手写bind</a></p>
<ul class="lvl-0">
<li class="lvl-4"><a href="#2">参考文献</a></li>
</ul>
<p id=1></p>
<h2 id="手写bind">手写bind</h2>
<p id=2></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">bind2</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  context <span class="token operator">=</span> context <span class="token operator">||</span> globalThis<span class="token punctuation">;</span>
  <span class="token keyword">const</span> argsTemp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">;</span>
  argsTemp<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> _symbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  context<span class="token punctuation">[</span>_symbol<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> context<span class="token punctuation">[</span>_symbol<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>argsTemp<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">delete</span> context<span class="token punctuation">[</span>_symbol<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p id=2></p>
<h3 id="参考文献">参考文献</h3>
<p>[1]<a href="https://www.wolai.com/serendipityape/6yn9QDJFn6Cp2UjPM9LDis">高阶组件手写实现篇</a></p>
]]></content>
      <categories>
        <category>write</category>
      </categories>
  </entry>
  <entry>
    <title>手写call</title>
    <url>/2022/09/29/write/%E6%89%8B%E5%86%99call/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="#1">手写call</a></p>
<ul class="lvl-0">
<li class="lvl-4"><a href="#2">方法一：ES6</a></li>
<li class="lvl-4"><a href="#3">方法二：ES5</a></li>
<li class="lvl-4"><a href="#4">参考文献</a></li>
</ul>
<p id=1></p>
<h2 id="手写call">手写call</h2>
<p id=2></p>
<h3 id="方法一：ES6">方法一：ES6</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">call2</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  context <span class="token operator">=</span> context <span class="token operator">||</span> globalThis<span class="token punctuation">;</span>
  <span class="token keyword">const</span> _symbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  context<span class="token punctuation">[</span>_symbol<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> context<span class="token punctuation">[</span>_symbol<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">delete</span> context<span class="token punctuation">[</span>_symbol<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p id=3></p>
<h3 id="方法二：ES5">方法二：ES5</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">call3</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  context <span class="token operator">=</span> context <span class="token operator">||</span> globalThis<span class="token punctuation">;</span>
  <span class="token keyword">const</span> _symbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  context<span class="token punctuation">[</span>_symbol<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    args<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'arguments['</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">//使用eval，args会直接调用toString()</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'context[_symbol]('</span> <span class="token operator">+</span> args <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">delete</span> context<span class="token punctuation">[</span>_symbol<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p id=4></p>
<h3 id="参考文献">参考文献</h3>
<p>[1]<a href="https://www.zhangbaolin.cn/docs/js/%E6%89%8B%E5%86%99/%E5%A6%82%E4%BD%95%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0call%E3%80%81apply%E5%87%BD%E6%95%B0">如何模拟实现call、apply函数</a></p>
]]></content>
      <categories>
        <category>write</category>
      </categories>
  </entry>
  <entry>
    <title>手写curry</title>
    <url>/2022/10/31/write/%E6%89%8B%E5%86%99curry/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="手写curry">手写curry</h2>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>args</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token comment">//获取函数的参数长度</span>
  <span class="token keyword">let</span> length <span class="token operator">=</span> fn<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  args <span class="token operator">=</span> args <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//获取上层函数调用的参数数组</span>
    <span class="token keyword">let</span> subArgs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//将本层的参数添加和上层参数合并到一起</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      subArgs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//判断如果参数的长度是否满足函数所有参数的长度</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>subArgs<span class="token punctuation">.</span>length <span class="token operator">>=</span> length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> subArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token function">curry</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> fn<span class="token punctuation">,</span> subArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>]]></content>
      <categories>
        <category>write</category>
      </categories>
  </entry>
  <entry>
    <title>手写instanceof</title>
    <url>/2022/09/29/write/%E6%89%8B%E5%86%99instanceof/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="#1">手写instanceof</a></p>
<p id=1></p>
<h2 id="手写instanceof">手写instanceof</h2>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">_instanceof</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token class-name">B</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
  <span class="token keyword">let</span> __proto__ <span class="token operator">=</span> <span class="token constant">A</span><span class="token punctuation">.</span>__proto__<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>__proto__<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>__proto__ <span class="token operator">===</span> temp<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    __proto__ <span class="token operator">=</span> __proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>]]></content>
      <categories>
        <category>write</category>
      </categories>
  </entry>
  <entry>
    <title>手写new</title>
    <url>/2022/09/29/write/%E6%89%8B%E5%86%99new/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="手写new">手写new</h2>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> Con <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shift<span class="token punctuation">)</span><span class="token punctuation">;</span>
  obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">Con</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">Con</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> result <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token operator">?</span> result <span class="token operator">:</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>]]></content>
      <categories>
        <category>write</category>
      </categories>
  </entry>
  <entry>
    <title>手写节流</title>
    <url>/2022/10/31/write/%E6%89%8B%E5%86%99%E8%8A%82%E6%B5%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="手写节流">手写节流</h2>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> curTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span>
        args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
        nowTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nowTime <span class="token operator">-</span> curTime <span class="token operator">>=</span> delay<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      curTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>]]></content>
      <categories>
        <category>write</category>
      </categories>
  </entry>
  <entry>
    <title>手写防抖</title>
    <url>/2022/10/31/write/%E6%89%8B%E5%86%99%E9%98%B2%E6%8A%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="手写防抖">手写防抖</h2>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
      timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>]]></content>
      <categories>
        <category>write</category>
      </categories>
  </entry>
  <entry>
    <title>1</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/two-sum">题目</a></p>
<p>方法一：暴力破解</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> ans <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">!=</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token punctuation">[</span>ans<span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>方法二：Map</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">===</span>target<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>101</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/101/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/symmetric-tree/">题目</a></p>
<p>方法一：遍历每一层</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">isSymmetric</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token operator">!==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> height <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">let</span> tempArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>height<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> shift <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>shift<span class="token punctuation">.</span>left<span class="token operator">!==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>shift<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        tempArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>shift<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        tempArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'null'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>shift<span class="token punctuation">.</span>right<span class="token operator">!==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>shift<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        tempArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>shift<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        tempArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'null'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">reverse</span><span class="token punctuation">(</span>tempArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token operator">===</span>arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>方法二：递归</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">isSymmetric</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">function</span> <span class="token function">jude</span><span class="token punctuation">(</span><span class="token parameter">l1<span class="token punctuation">,</span>l2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">===</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>l2<span class="token operator">===</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">===</span><span class="token keyword">null</span><span class="token operator">||</span>l2<span class="token operator">===</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> l1<span class="token punctuation">.</span>val<span class="token operator">===</span>l2<span class="token punctuation">.</span>val<span class="token operator">&amp;&amp;</span><span class="token function">jude</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>left<span class="token punctuation">,</span>l2<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">jude</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>right<span class="token punctuation">,</span>l2<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token function">jude</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>102</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/102/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">题目</a></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">levelOrder</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>root<span class="token punctuation">.</span>val<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token operator">!==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">const</span> temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> shift <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>shift<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>shift<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>shift<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>shift<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>shift<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>shift<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>length<span class="token operator">!==</span><span class="token number">0</span><span class="token punctuation">)</span>ans<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>力扣第105题- 从前序与中序遍历序列构造二叉树</title>
    <url>/2022/11/11/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/105/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">题目</a></p>
<p>这一题思路不算难，就是过程是挺麻烦，要判断好每个指针都在那里。这一题就写一种方法吧，实在是想了半天了。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">buildTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">preorder<span class="token punctuation">,</span> inorder</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">refaction</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>preorder<span class="token punctuation">.</span>length<span class="token punctuation">,</span>inorder<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>inorder<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">refaction</span><span class="token punctuation">(</span><span class="token parameter">preorder<span class="token punctuation">,</span>pstart<span class="token punctuation">,</span>pend<span class="token punctuation">,</span>inorder<span class="token punctuation">,</span>istart<span class="token punctuation">,</span>iend</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>pstart<span class="token operator">===</span>pend<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> rootVal <span class="token operator">=</span> preorder<span class="token punctuation">[</span>pstart<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>rootVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> iRoot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">//寻找根节点</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span>istart<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>iend<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> rootVal<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      iRoot <span class="token operator">=</span> i<span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">let</span> leftLen <span class="token operator">=</span> iRoot <span class="token operator">-</span> istart<span class="token punctuation">;</span>
  root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">refaction</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span>pstart<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>pstart<span class="token operator">+</span>leftLen<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>inorder<span class="token punctuation">,</span>istart<span class="token punctuation">,</span>iRoot<span class="token punctuation">)</span><span class="token punctuation">;</span>
  root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">refaction</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span>pstart<span class="token operator">+</span>leftLen<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>pend<span class="token punctuation">,</span>inorder<span class="token punctuation">,</span>iRoot<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>iend<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>104</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/104/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/">题目</a></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">maxDepth</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>11</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/11/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/container-with-most-water/">题目</a></p>
<p>使用双指针，下标靠近内部的时候，只有高度更高才能装更多的水。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">maxArea</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">height</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> right<span class="token operator">=</span>height<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> max<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> area <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span>height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">&lt;</span>height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      left<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
      right<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> max<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>力扣第114题-二叉树展开为链表</title>
    <url>/2022/11/11/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/114/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/flatten-binary-tree-to-linked-list/">题目</a></p>
<p>LeetCode热题HOT100的软柿子捏的差不多了，还剩30道硬茬了。二叉树比例很大，我二叉树还是不太行，要多练练了。</p>
<p>看到这题我们第一想法就是先把二叉树遍历一遍放到数组里面然后再转换成链表。然后很快我就写出来了代码。但是这明显不是最优解。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">flatten</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> header <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token operator">!==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> shift <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        head<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>shift<span class="token punctuation">)</span><span class="token punctuation">;</span>
        head<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        head <span class="token operator">=</span> head<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    root<span class="token punctuation">.</span>right <span class="token operator">=</span> result<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>另一种解法</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">flatten</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      root <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> temp <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
      <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      temp<span class="token punctuation">.</span>right <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
      root<span class="token punctuation">.</span>right <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
      root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      root <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>121</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/121/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/">题目</a></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">maxProfit</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">prices</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> idx<span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>idx<span class="token operator">&lt;</span>prices<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> temp <span class="token operator">=</span> prices<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
      left <span class="token operator">=</span> idx<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    idx<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>124</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/124/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/binary-tree-maximum-path-sum/">题目</a></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">maxPathSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> num <span class="token operator">=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span>left<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> root<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token punctuation">(</span>right<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span>left<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span>right<span class="token punctuation">)</span><span class="token operator">+</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>right<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">maxPathSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> max <span class="token operator">=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> num <span class="token operator">=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> ans <span class="token operator">=</span> left <span class="token operator">+</span> right <span class="token operator">+</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
    max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> temp <span class="token operator">=</span> root<span class="token punctuation">.</span>val <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> temp<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span>temp<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> max<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>128</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/128/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/longest-consecutive-sequence/">题目</a></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">longestConsecutive</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">//去重</span>
  nums <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//排序</span>
  nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token operator">=></span>x<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> i<span class="token operator">-</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
      idx <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length<span class="token operator">-</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>136</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/136/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="">题目</a></p>
<p>使用shift函数好像时间就上去了</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">singleNumber</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token operator">=></span>x<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> shift1 <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> shift2 <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>shift1<span class="token operator">!==</span>shift2<span class="token punctuation">)</span><span class="token keyword">return</span> shift1<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">singleNumber</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token operator">=></span>x<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!==</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>141</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/141/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/linked-list-cycle/">题目</a></p>
<p>双指针，一个走得快一个走得慢。如果是环形链表一定能相遇。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">hasCycle</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> quike <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">let</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>quike<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>quike<span class="token punctuation">.</span>next<span class="token operator">===</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      quike <span class="token operator">=</span> quike<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
      slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>quike<span class="token operator">===</span>slow<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>Set</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">hasCycle</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> temp <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>temp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>142</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/142/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="">题目</a></p>
<p>Set</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">detectCycle</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> cur <span class="token operator">=</span> head<span class="token punctuation">,</span>idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> ans <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> cur<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    map<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    idx<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>快慢指针</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">detectCycle</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> quike <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">let</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>quike<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>quike<span class="token punctuation">.</span>next<span class="token operator">===</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      quike <span class="token operator">=</span> quike<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
      slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>quike<span class="token operator">===</span>slow<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> temp <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token operator">!=</span>slow<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
          temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
          slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> temp<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>力扣第146题-LRU 缓存</title>
    <url>/2022/11/17/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/146/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/lru-cache/">题目</a></p>
<p>暴力破解</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">LRUCache</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">capacity</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> capacity<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token class-name">LRUCache</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token operator">===</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> idx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> map<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token class-name">LRUCache</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">put</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token operator">===</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> shift <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>shift<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> idx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>128</title>
    <url>/2022/11/07/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/148/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/sort-list/">题目</a></p>
<p>分治算法+合并有序链表</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">sortList</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">tosortList</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">tosortList</span><span class="token punctuation">(</span><span class="token parameter">head<span class="token punctuation">,</span> tail</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">return</span> head<span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">===</span> tail<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> head<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">let</span> slow <span class="token operator">=</span> head<span class="token punctuation">,</span>fast <span class="token operator">=</span> head<span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">!==</span> tail<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>fast<span class="token operator">!==</span>tail<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">let</span> mid <span class="token operator">=</span> slow<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">tosortList</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">tosortList</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span> tail<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token parameter">l1<span class="token punctuation">,</span>l2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>l1<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>l2<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>l1<span class="token punctuation">)</span><span class="token keyword">return</span> l2<span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>l2<span class="token punctuation">)</span><span class="token keyword">return</span> l1<span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    l1<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">,</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> l1<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    l2<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span>l2<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> l2<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>15</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/15/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/3sum/">题目</a></p>
<p>使用双指针，并在遍历的时候去重。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">threeSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token operator">=></span>x<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> left <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> right <span class="token operator">=</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">let</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                ans<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">===</span>nums<span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>left<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">===</span>nums<span class="token punctuation">[</span>right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>right<span class="token operator">--</span><span class="token punctuation">;</span>
                left<span class="token operator">++</span><span class="token punctuation">;</span>
                right<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                left<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                right<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>155</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/155/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/min-stack/">题目</a></p>
<p>使用Math.min()</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @lc code=start</span>

<span class="token keyword">var</span> <span class="token function-variable function">MinStack</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">/** 
 * @param &#123;number&#125; val
 * @return &#123;void&#125;
 */</span>
<span class="token class-name">MinStack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @return &#123;void&#125;
 */</span>
<span class="token class-name">MinStack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">pop</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @return &#123;number&#125;
 */</span>
<span class="token class-name">MinStack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">top</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @return &#123;number&#125;
 */</span>
<span class="token class-name">MinStack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getMin</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>最小栈</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @lc code=start</span>

<span class="token keyword">var</span> <span class="token function-variable function">MinStack</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>min_stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">Infinity</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">/** 
 * @param &#123;number&#125; val
 * @return &#123;void&#125;
 */</span>
<span class="token class-name">MinStack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>min_stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>min_stack<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>min_stack<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @return &#123;void&#125;
 */</span>
<span class="token class-name">MinStack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">pop</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>min_stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @return &#123;number&#125;
 */</span>
<span class="token class-name">MinStack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">top</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @return &#123;number&#125;
 */</span>
<span class="token class-name">MinStack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getMin</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>min_stack<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>min_stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>160</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/160/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists/">题目</a></p>
<p>遍历第一个链表，使用Set保存每个节点的值，再遍历第二遍链表，看Set中是否有相同的值。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">getIntersectionNode</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">headA<span class="token punctuation">,</span> headB</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>headA<span class="token operator">||</span><span class="token operator">!</span>headB<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> cur1 <span class="token operator">=</span> headA<span class="token punctuation">,</span>cur2 <span class="token operator">=</span> headB<span class="token punctuation">;</span>
  <span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>cur1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cur1 <span class="token operator">=</span> cur1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>cur2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>cur2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      ans <span class="token operator">=</span> cur2<span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    cur2 <span class="token operator">=</span> cur2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>双指针</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">getIntersectionNode</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">headA<span class="token punctuation">,</span> headB</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>headA<span class="token operator">||</span><span class="token operator">!</span>headB<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> cur1 <span class="token operator">=</span> headA<span class="token punctuation">,</span>cur2 <span class="token operator">=</span> headB<span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>cur1<span class="token operator">!==</span>cur2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    cur1 <span class="token operator">=</span> cur1 <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> headB <span class="token operator">:</span> cur1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    cur2 <span class="token operator">=</span> cur2 <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> headA <span class="token operator">:</span> cur2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> cur2<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>169</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/169/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/majority-element/">题目</a></p>
<p>使用Map遍历一遍链表，找到大于长度一半的元素。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">majorityElement</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> half <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> ele <span class="token keyword">of</span> nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> temp <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">===</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">+</span><span class="token number">1</span><span class="token operator">></span>half<span class="token punctuation">)</span><span class="token keyword">return</span> ele<span class="token punctuation">;</span>
      map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span>temp<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>排序数组后，数组中间的元素出现的次数一定大于数组长度的一半。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">majorityElement</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token operator">=></span>x<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> nums<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>17</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/17/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/">题目</a></p>
<p>方法一：暴力破解使用for循环一直遍历</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">letterCombinations</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">digits</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>digits<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">'g'</span><span class="token punctuation">,</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token string">'i'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'j'</span><span class="token punctuation">,</span><span class="token string">'k'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'m'</span><span class="token punctuation">,</span><span class="token string">'n'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">'p'</span><span class="token punctuation">,</span><span class="token string">'q'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span><span class="token string">'s'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'t'</span><span class="token punctuation">,</span><span class="token string">'u'</span><span class="token punctuation">,</span><span class="token string">'v'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'w'</span><span class="token punctuation">,</span><span class="token string">'x'</span><span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">,</span><span class="token string">'z'</span><span class="token punctuation">]</span>
  <span class="token punctuation">]</span>
  <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>digits<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        ans<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> len <span class="token operator">=</span> ans<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> shift <span class="token operator">=</span> ans<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> g<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>g<span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>g<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
          ans<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>shift<span class="token operator">+</span>arr<span class="token punctuation">[</span>digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>g<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>方法二：回溯</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">letterCombinations</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">digits</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>digits<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>digits<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">'g'</span><span class="token punctuation">,</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token string">'i'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'j'</span><span class="token punctuation">,</span><span class="token string">'k'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'m'</span><span class="token punctuation">,</span><span class="token string">'n'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">'p'</span><span class="token punctuation">,</span><span class="token string">'q'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span><span class="token string">'s'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'t'</span><span class="token punctuation">,</span><span class="token string">'u'</span><span class="token punctuation">,</span><span class="token string">'v'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'w'</span><span class="token punctuation">,</span><span class="token string">'x'</span><span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">,</span><span class="token string">'z'</span><span class="token punctuation">]</span>
  <span class="token punctuation">]</span>
  <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token parameter">idx<span class="token punctuation">,</span>str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>idx<span class="token operator">===</span>digits<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      ans<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>digits<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>temp<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">backtrack</span><span class="token punctuation">(</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arr<span class="token punctuation">[</span>digits<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>19</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/19/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">题目</a></p>
<p>方法一：两次while循环，第一次查询链表的长度，第二次将倒数第n个节点删除。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">removeNthFromEnd</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>
  <span class="token keyword">let</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    idx<span class="token operator">++</span><span class="token punctuation">;</span>
    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>idx<span class="token operator">===</span>n<span class="token punctuation">)</span><span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  idx<span class="token operator">-=</span>n<span class="token punctuation">;</span>
  <span class="token keyword">let</span> idx2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  cur <span class="token operator">=</span> head<span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>idx2<span class="token operator">!==</span>idx<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    idx2<span class="token operator">++</span><span class="token punctuation">;</span>
    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  cur<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  <span class="token keyword">return</span> head<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>方法二：使用栈，将所有节点添加到栈中，然后找到第n+1个离栈的节点，让该节点后面的节点删除。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">removeNthFromEnd</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>
  <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">===</span> n<span class="token punctuation">)</span><span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  <span class="token keyword">let</span> pop <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    pop <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  pop<span class="token punctuation">.</span>next <span class="token operator">=</span> pop<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  <span class="token keyword">return</span> head<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>力扣第198题-打家劫舍</title>
    <url>/2022/11/10/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/198/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/house-robber/">题目</a></p>
<p>看到题目，应该是动态规划的题，但是我不想动脑子，就直接回溯吧，估计没有错，但是超时了，代码放这里。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">rob</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">maxNum</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">maxNum</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">maxNum</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span>i<span class="token punctuation">,</span>all</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">>=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token keyword">return</span> all<span class="token punctuation">;</span>
    all <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">>=</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> all<span class="token punctuation">;</span>
    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token function">maxNum</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span>all<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token function">maxNum</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">,</span>all<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>我又想了想，感觉这和<code>斐波那契数列</code>有一点像呀，然后很快我就想到了另一种方法，代码如下，通过是通过了但是击败的人有点少。这种解法也算是动态规划。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">rob</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">||</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> max<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>另一种动态规划写法，这一种明显快了不少，就是分析偷该屋子和不偷该屋子的两种情况。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">rob</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>dp<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>然后我忽然看到，LeetCode热题HOT100里面还有一道<code>打家劫舍3</code>，<a href="../337">立马去写一下</a>。</p>
]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
      <tags>
        <tag>打家劫舍</tag>
      </tags>
  </entry>
  <entry>
    <title>2</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/add-two-numbers/">题目</a></p>
<p>这一道题还是很有迷惑性的，其实我们只要遍历两个节点的值相加，然后如果大于等于10则进一位加到下一个节点。要注意的点是最后可能会有余数，别忘记在连接上去。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">addTwoNumbers</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">l1<span class="token punctuation">,</span> l2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> head<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">,</span>tail<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> carry<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>l1<span class="token operator">||</span>l2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> n1<span class="token operator">=</span>l1<span class="token operator">?</span>l1<span class="token punctuation">.</span>val<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> n2<span class="token operator">=</span>l2<span class="token operator">?</span>l2<span class="token punctuation">.</span>val<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> sum<span class="token operator">=</span>n1<span class="token operator">+</span>n2<span class="token operator">+</span>carry<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            head<span class="token operator">=</span>tail<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            tail<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            tail<span class="token operator">=</span>tail<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        carry<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>sum<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            l1<span class="token operator">=</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            l2<span class="token operator">=</span>l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>carry<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        tail<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>carry<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> head<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>20</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/20/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/valid-parentheses/">题目</a></p>
<p>使用Map保存左右括号，遍历字符串，遇到左括号入栈，遇到右括号出栈进行比较，如果不匹配则返回false。最后看栈里面是否还有元素，如果有返回false否则饭返回true。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">isValid</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length<span class="token operator">%</span><span class="token number">2</span><span class="token operator">!==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">')'</span><span class="token punctuation">,</span><span class="token string">'('</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">']'</span><span class="token punctuation">,</span><span class="token string">'['</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'&#125;'</span><span class="token punctuation">,</span><span class="token string">'&#123;'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> temp <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">===</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> pop <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">!==</span>pop<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token operator">!==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>由力扣第200题-岛屿数量-引出一些力扣上的岛屿问题</title>
    <url>/2022/11/09/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/200/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/number-of-islands/">题目</a></p>
<p>遍历一遍数组，当找到数组元素是1的话，就将这个封闭空间的数全部变成2，岛屿数加1，直到遍历完数组。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">numIslands</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">grid</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>grid<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">modifyGridItemToTwo</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
        num<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> num<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">modifyGridItemToTwo</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>i<span class="token operator">>=</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>j<span class="token operator">>=</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
  arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'2'</span><span class="token punctuation">;</span>
  <span class="token function">modifyGridItemToTwo</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">modifyGridItemToTwo</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">modifyGridItemToTwo</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">modifyGridItemToTwo</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>还有几道十分类似的题目，我们来趁热打铁写一下。</p>
<p><a href="https://leetcode.cn/problems/island-perimeter/">岛屿的周长</a></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">islandPerimeter</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">grid</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>grid<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token function">getGridIslandPerimeter</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">getGridIslandPerimeter</span><span class="token punctuation">(</span><span class="token parameter">grid<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>i<span class="token operator">>=</span>grid<span class="token punctuation">.</span>length<span class="token operator">||</span>j<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>j<span class="token operator">>=</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">||</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> length <span class="token operator">=</span> <span class="token function">judgeIsZero</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">judgeIsZero</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span>
                    <span class="token operator">+</span> <span class="token function">judgeIsZero</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">judgeIsZero</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    
    <span class="token keyword">return</span> length <span class="token operator">+</span> <span class="token function">getGridIslandPerimeter</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span>
            <span class="token operator">+</span> <span class="token function">getGridIslandPerimeter</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span>
            <span class="token operator">+</span> <span class="token function">getGridIslandPerimeter</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token operator">+</span> <span class="token function">getGridIslandPerimeter</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">judgeIsZero</span><span class="token punctuation">(</span><span class="token parameter">grid<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>i<span class="token operator">>=</span>grid<span class="token punctuation">.</span>length<span class="token operator">||</span>j<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>j<span class="token operator">>=</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p><a href="https://leetcode.cn/problems/max-area-of-island/">岛屿的最大面积</a></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">maxAreaOfIsland</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">grid</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>grid<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token function">maxIsland</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">maxIsland</span><span class="token punctuation">(</span><span class="token parameter">grid<span class="token punctuation">,</span> i<span class="token punctuation">,</span>j</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>i<span class="token operator">>=</span>grid<span class="token punctuation">.</span>length<span class="token operator">||</span>j<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>j<span class="token operator">></span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">||</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> 
    <span class="token function">maxIsland</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span> <span class="token operator">+</span>
    <span class="token function">maxIsland</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span> <span class="token operator">+</span>
    <span class="token function">maxIsland</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span>
    <span class="token function">maxIsland</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
      <tags>
        <tag>岛屿</tag>
      </tags>
  </entry>
  <entry>
    <title>206</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/206/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/reverse-linked-list/">题目</a></p>
<p>迭代</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">reverseList</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> list <span class="token operator">=</span> head<span class="token punctuation">;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> next <span class="token operator">=</span> list<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    list<span class="token punctuation">.</span>next <span class="token operator">=</span> result<span class="token punctuation">;</span>
    result <span class="token operator">=</span> list<span class="token punctuation">;</span>
    list <span class="token operator">=</span> next<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>递归，这个方法我看了半天。写出这个方法要知道一点，在js中函数传参，如果参数是对象，则传递的是地址值，如果在函数中改变对象中的属性，那么函数外面对应的对象值也会变。例：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  obj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">&#125;</span>
<span class="token function">test</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123; a: 2 &#125;</span></code></pre>
<p>答案：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">reverseList</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">===</span><span class="token keyword">null</span><span class="token operator">||</span>head<span class="token punctuation">.</span>next<span class="token operator">===</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">return</span> head<span class="token punctuation">;</span>
  <span class="token keyword">const</span> temp <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
  head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
  head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>215</title>
    <url>/2022/11/07/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/208/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/implement-trie-prefix-tree/">题目</a></p>
<p>暴力破解法</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">Trie</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token class-name">Trie</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">insert</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token class-name">Trie</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">search</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token operator">!==</span><span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token class-name">Trie</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">startsWith</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">prefix</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>前缀树</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">Trie</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token class-name">Trie</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">insert</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> ch <span class="token keyword">of</span> word<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      node<span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    node <span class="token operator">=</span> node<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  node<span class="token punctuation">.</span>isEnd <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token class-name">Trie</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">search</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">searchPrefix</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> node<span class="token operator">!==</span><span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>isEnd <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token class-name">Trie</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">startsWith</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">prefix</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">searchPrefix</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span>
  <span class="token keyword">return</span> node <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token class-name">Trie</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">searchPrefix</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">prefix</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> ch <span class="token keyword">of</span> prefix<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    node <span class="token operator">=</span> node<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> node<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>21</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/21/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/merge-two-sorted-lists/">题目</a></p>
<p>使用递归</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">mergeTwoLists</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">list1<span class="token punctuation">,</span> list2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>list1<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>list2<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>list1<span class="token punctuation">)</span><span class="token keyword">return</span> list2<span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>list2<span class="token punctuation">)</span><span class="token keyword">return</span> list1<span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>list2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    list1<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span>next<span class="token punctuation">,</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> list1<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    list2<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>list2<span class="token punctuation">.</span>next<span class="token punctuation">,</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> list2<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>215</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/215/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="">题目</a></p>
<p>使用sort()</p>
<pre><code class="language-js">var findKthLargest = function(nums, k) &#123;
  nums.sort((x,y)=&gt;x-y);
  return nums[nums.length-k];
&#125;;
</code></pre>
]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>22</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/22/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/generate-parentheses/">题目</a></p>
<p>方法一：暴力破解，遍历所有的结果，对所有结果进行判断。数据量大的话可能会超时。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">generateParenthesis</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span>idx<span class="token punctuation">,</span>str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>idx<span class="token operator">===</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">juge</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">(</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">juge</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>str<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token operator">!==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>方法二：回溯，其实方法一也算是回溯，但是方法一回溯了所有情况，而且每次返回的结果还要用栈来判断是否合法，但是方法二的回溯只回溯有效值。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">generateParenthesis</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span>right<span class="token punctuation">,</span>str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">===</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>right<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token function">dp</span><span class="token punctuation">(</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">(</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>right<span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token function">dp</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>力扣第221题-最大正方形</title>
    <url>/2022/11/14/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/221/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/maximal-square/">题目</a></p>
<p>直接暴力破解</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">maximalSquare</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">matrix</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> zero <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                zero<span class="token operator">++</span><span class="token punctuation">;</span>
                max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">maxSquare</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>zero<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>max<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">maxSquare</span><span class="token punctuation">(</span><span class="token parameter">matrix<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>x</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">+</span>x <span class="token operator">>=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">+</span>x <span class="token operator">>=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> h<span class="token operator">=</span>i<span class="token punctuation">;</span>h<span class="token operator">&lt;=</span>i<span class="token operator">+</span>x<span class="token punctuation">;</span>h<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span>x<span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> h<span class="token operator">=</span>j<span class="token punctuation">;</span>h<span class="token operator">&lt;=</span>j<span class="token operator">+</span>x<span class="token punctuation">;</span>h<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token operator">+</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token function">maxSquare</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>226</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/226/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/invert-binary-tree/">题目</a></p>
<p>递归</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">invertTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span><span class="token keyword">return</span> root<span class="token punctuation">;</span>
  <span class="token keyword">const</span> left <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
  <span class="token keyword">const</span> right <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
  root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
  root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>23</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/23/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/merge-k-sorted-lists/">题目</a></p>
<p>方法一：暴力解法，使用循环遍历每一个链表，然后两个两个的合并。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">mergeKLists</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">lists</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>lists<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> ans <span class="token operator">=</span> lists<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>lists<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    ans <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">function</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token parameter">l1<span class="token punctuation">,</span>l2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">===</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>l2<span class="token operator">===</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">===</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">return</span> l2<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l2<span class="token operator">===</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">return</span> l1<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      l1<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">,</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> l1<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
      l2<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span>l2<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> l2<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>方法二：分治算法</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">mergeKLists</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">lists</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>lists<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> len <span class="token operator">=</span> lists<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">let</span> init <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>init<span class="token operator">&lt;</span>len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">+=</span>init<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">+</span>init<span class="token operator">&lt;</span>len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>lists<span class="token punctuation">[</span>i<span class="token operator">+</span>init<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    init<span class="token operator">*=</span><span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">function</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token parameter">l1<span class="token punctuation">,</span>l2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">===</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>l2<span class="token operator">===</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">===</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">return</span> l2<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l2<span class="token operator">===</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">return</span> l1<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      l1<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">,</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> l1<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
      l2<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span>l2<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> l2<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> lists<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>234</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/234/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/palindrome-linked-list/">题目</a></p>
<p>reverse()和join()，使用数组保存链表每个节点的值，然后判断原数组和反转数组是否相同。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">isPalindrome</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token operator">===</span>arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>双指针，使用数组保存链表每个节点的值，使用双指针判断是否是回文数组。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">isPalindrome</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>236</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/236/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/">题目</a></p>
<p>递归</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">lowestCommonAncestor</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> right <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token operator">===</span>p<span class="token punctuation">.</span>val<span class="token operator">||</span>root<span class="token punctuation">.</span>val<span class="token operator">===</span>q<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>left <span class="token operator">||</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        ans <span class="token operator">=</span> root<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">return</span> left <span class="token operator">||</span> right <span class="token operator">||</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">===</span> p<span class="token punctuation">.</span>val <span class="token operator">||</span> root<span class="token punctuation">.</span>val <span class="token operator">===</span> q<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>238</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/238/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/product-of-array-except-self/">题目</a></p>
<p>暴力破解</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">productExceptSelf</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> zeroNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> mutily <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  nums<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      mutily<span class="token operator">*=</span>item<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
      zeroNum<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>zeroNum<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">Array</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  nums<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>zeroNum<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>mutily <span class="token operator">/</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>mutily<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>左右乘积</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">productExceptSelf</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> front <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> before <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    front<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>front<span class="token punctuation">[</span>front<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    before<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>before<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>len<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> front<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> before<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>力扣第240题-搜索二维矩阵 II</title>
    <url>/2022/11/12/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/240/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/search-a-2d-matrix-ii/?favorite=2cktkvj">题目</a></p>
<p>看到题目我准备用最暴力的方法破解的，结果129个案例通过了127个，代码放下面，看来是不能暴力破解了。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">searchMatrix</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">matrix<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>然后我想到了以前做过一道题，和这一道差不多，估计是<code>搜索二维矩阵</code>。很快我就写出来了代码。但是感觉效率还是不太行。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">searchMatrix</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">matrix<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">isTarget</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">isTarget</span><span class="token punctuation">(</span><span class="token parameter">matrix<span class="token punctuation">,</span>target<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>x<span class="token operator">>=</span>matrix<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">===</span> target<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">></span>matrix<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">isTarget</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> target<span class="token punctuation">,</span> x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">&lt;</span>matrix<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">isTarget</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> target<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>我又试了试最简单的方法，遍历整个二维数组，没想到竟然过了。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">searchMatrix</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">matrix<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">===</span>target<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>力扣第279题-完全平方数</title>
    <url>/2022/11/18/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/279/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/perfect-squares/">题目</a></p>
<p>动态规划</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">numSquares</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> minn <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">*</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            minn <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>minn<span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span>j<span class="token operator">*</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> minn <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>283</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/283/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/move-zeroes/">题目</a></p>
<p>双指针</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">moveZeroes</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">&lt;</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
      left<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    right<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> nums<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>力扣287题-寻找重复数</title>
    <url>/2022/11/08/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/287/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/find-the-duplicate-number/?favorite=2cktkvj">题目</a></p>
<p>暴力破解</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">findDuplicate</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> temp <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token keyword">return</span> temp<span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>暴力破解</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">findDuplicate</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">===</span>y<span class="token punctuation">)</span>result <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token keyword">return</span> x<span class="token operator">-</span>y<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>暴力破解</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">findDuplicate</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> props <span class="token keyword">in</span> nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>props<span class="token punctuation">]</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token keyword">return</span> temp<span class="token punctuation">;</span>
    arr<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>props<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>props<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>环形链表解法建议去看看关于环形链表的题。<a href="https://leetcode.cn/problems/linked-list-cycle/">环形链表</a></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">hasCycle</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> slow <span class="token operator">=</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">do</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fast <span class="token operator">||</span> <span class="token operator">!</span>fast<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>slow<span class="token operator">!==</span>fast<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">环形链表2</a></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">detectCycle</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> slow <span class="token operator">=</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">do</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fast <span class="token operator">||</span> <span class="token operator">!</span>fast<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>slow <span class="token operator">!==</span> fast<span class="token punctuation">)</span><span class="token punctuation">;</span>
    slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>slow<span class="token operator">!==</span>fast<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> slow<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>本题的答案</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">findDuplicate</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> slow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> fast <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">do</span><span class="token punctuation">&#123;</span>
    slow <span class="token operator">=</span> nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span><span class="token punctuation">;</span>
    fast <span class="token operator">=</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>slow<span class="token operator">!==</span>fast<span class="token punctuation">)</span><span class="token punctuation">;</span>
  slow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>slow <span class="token operator">!=</span> fast<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    slow <span class="token operator">=</span> nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span><span class="token punctuation">;</span>
    fast <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> slow<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>3</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">题目</a></p>
<p>使用滑动窗口来结合Set来解决。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">lengthOfLongestSubstring</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> set<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> len<span class="token operator">=</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">let</span> rk<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>max<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//如果i不是0，就删除指针i的上一个节点在set中保存的值</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      set<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>rk<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>len<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>rk<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>rk<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      rk<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    max<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>rk<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> max<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>力扣300题-最长递增子序列</title>
    <url>/2022/11/12/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/300/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/longest-increasing-subsequence/">题目</a></p>
<p>看到题目，我想的就是用dfs，回溯，但是真的离谱，一半多都超时了，代码如下。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">lengthOfLIS</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> all<span class="token punctuation">,</span> last<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>idx<span class="token operator">>=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token keyword">return</span> all<span class="token punctuation">;</span>
    <span class="token keyword">const</span> right <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> all<span class="token punctuation">,</span> last<span class="token punctuation">,</span> idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">&lt;=</span>last<span class="token punctuation">)</span><span class="token keyword">return</span> right<span class="token punctuation">;</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>all<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>实在想不出来别的方法了，看了看题解</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">lengthOfLIS</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> max<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>31</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/31/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/next-permutation/">题目</a></p>
<p>使用一个while循环找到第一个<code>nums[i]&lt;nums[i+1]</code>的数，如果i为-1的话说明为逆序，则正序后返回。再用一个while循环从后遍历找到第一个大于nums[i]的值，然后交换，之后排序i后面的数组。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">    <span class="token keyword">let</span> len<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">let</span> i<span class="token operator">=</span>len<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        i<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> j<span class="token operator">=</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">></span>i<span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            j<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> queen<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        queen<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token operator">=></span>x<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>queen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token operator">=></span>x<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>32</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/32/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/longest-valid-parentheses/">题目</a></p>
<p>暴力破解法试了半天，没破解出来，估计破解出来也会超时。这一题真的难</p>
<p>方法一：使用动态规划来解决，具体怎么解决还是看leetcode官方视频吧。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">longestValidParentheses</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//为右括号，判断前一个值是否存在，如果存在判断数值</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span>arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">-</span>arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>arr<span class="token punctuation">[</span>i<span class="token operator">-</span>arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> max<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>方法二：栈</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">longestValidParentheses</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
      stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        length <span class="token operator">=</span> i<span class="token operator">-</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> max<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>33</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/33/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/search-in-rotated-sorted-array/">题目</a></p>
<p>方法一：暴力解法</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">search</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span>target<span class="token punctuation">)</span><span class="token keyword">return</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>方法二：暴力解法</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">search</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> nums<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>方法三：二分法</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">search</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">===</span>target<span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> leftTemp <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> rightTemp <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> midTemp <span class="token operator">=</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>midTemp<span class="token operator">===</span>target<span class="token punctuation">)</span><span class="token keyword">return</span> mid<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>leftTemp<span class="token operator">===</span>target<span class="token punctuation">)</span><span class="token keyword">return</span> left<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>rightTemp<span class="token operator">===</span>target<span class="token punctuation">)</span><span class="token keyword">return</span> right<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>midTemp<span class="token operator">></span>leftTemp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token comment">//左边有序</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">></span>leftTemp<span class="token operator">&amp;&amp;</span>target<span class="token operator">&lt;</span>midTemp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
      <span class="token comment">//右边有序</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">></span>midTemp<span class="token operator">&amp;&amp;</span>target<span class="token operator">&lt;</span>rightTemp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>力扣第337题-打家劫舍3</title>
    <url>/2022/11/10/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/337/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/house-robber-iii/?favorite=2cktkvj">题目</a></p>
<p>我们想起来刚才我们写的<a href="../198">打家劫舍</a>的题目，和这道题的思想差不多，只不过一个是数组一个是二叉树。我们很快就能写出来下面的代码。和<code>打家劫舍</code>的思路一样。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">rob</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> l <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> selected <span class="token operator">=</span> root<span class="token punctuation">.</span>val <span class="token operator">+</span> l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> noSelected <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>selected<span class="token punctuation">,</span>noSelected<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
      <tags>
        <tag>打家劫舍</tag>
      </tags>
  </entry>
  <entry>
    <title>34</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/34/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/">题目</a></p>
<p>方法一：暴力解法</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">searchRange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">let</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">===</span>target<span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">===</span>target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      stack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">;</span>
      stack<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token punctuation">;</span>
      <span class="token keyword">return</span> stack<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">===</span>target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      stack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!==</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token keyword">return</span> stack<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
      left<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">===</span>target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      stack<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!==</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token keyword">return</span> stack<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
      right<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token keyword">undefined</span><span class="token punctuation">)</span>stack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token keyword">undefined</span><span class="token punctuation">)</span>stack<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> stack<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>方法二：二分查找，分别查找左边和右边</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">searchRange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token function">jude</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>target<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> end <span class="token operator">=</span> <span class="token function">jude</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>target<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>start<span class="token operator">&lt;=</span>end<span class="token operator">&amp;&amp;</span>end<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token operator">===</span>target<span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token operator">===</span>target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>start<span class="token punctuation">,</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">jude</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span>target<span class="token punctuation">,</span>ifTrue</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> ans <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>target<span class="token operator">||</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">>=</span>target<span class="token operator">&amp;&amp;</span>ifTrue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
      ans <span class="token operator">=</span> mid<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
      left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>力扣347题-前 K 个高频元素</title>
    <url>/2022/11/08/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/347/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/top-k-frequent-elements/">题目</a></p>
<p>十分暴力的方法，没想到竟然没超时</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">topKFrequent</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> props <span class="token keyword">of</span> nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> temp <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> <span class="token operator">!</span>temp<span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span>temp<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">const</span> map2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    arr2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">[</span>arr2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>arr2<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr2<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> arr2<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>本来想优化一下嘞，结果时间更长了。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">topKFrequent</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> map2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> props <span class="token keyword">of</span> nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> temp <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token operator">!</span>temp <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> temp<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>temp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
      map2<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> result<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> idx <span class="token operator">=</span> map2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span><span class="token punctuation">(</span>idx<span class="token operator">!==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>num<span class="token operator">></span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span>idx<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token punctuation">[</span>result<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span> result<span class="token punctuation">[</span>idx<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>result<span class="token punctuation">[</span>idx<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> result<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        map2<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        idx<span class="token operator">--</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      map2<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>优化了一下，思路和第一种差不多，我以前一直想排序map来着，可以不太会，今天终于会了。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">topKFrequent</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> num <span class="token keyword">of</span> nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">?</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">===</span> map<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>map<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=></span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=></span> n<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>39</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/39/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/combination-sum/">题目</a></p>
<p>方法一：回溯</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">combinationSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">candidates<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span>arr<span class="token punctuation">,</span>idx<span class="token punctuation">,</span>num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">></span>target<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">===</span>target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            ans<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>idx<span class="token operator">>=</span>candidates<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>arr<span class="token punctuation">,</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">,</span>candidates<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>idx<span class="token punctuation">,</span>num<span class="token operator">+</span>candidates<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>方法二：回溯</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">combinationSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">candidates<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span>comb<span class="token punctuation">,</span>idx</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>idx<span class="token operator">===</span>candidates<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            ans<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>comb<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>comb<span class="token punctuation">,</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">-</span>candidates<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token function">dfs</span><span class="token punctuation">(</span>target<span class="token operator">-</span>candidates<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">...</span>comb<span class="token punctuation">,</span>candidates<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>4</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/median-of-two-sorted-arrays/">题目</a></p>
<p>这个题比较简单，就是将两个数组合并并排序，然后找到中位数。合并排序的方法有很多种。</p>
<p>方法一：递归合并数组排序</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">findMedianSortedArrays</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums1<span class="token punctuation">,</span> nums2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token function-variable function">sortArr</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">nums1<span class="token punctuation">,</span>nums2</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums1<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>nums2<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums1<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">,</span><span class="token operator">...</span>nums2<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums2<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">,</span><span class="token operator">...</span>nums1<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">></span>nums2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums2<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">sortArr</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span>nums2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>nums2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums1<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">sortArr</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span>nums2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums1<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums2<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">sortArr</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span>nums2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">sortArr</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span>nums2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">%</span><span class="token number">2</span><span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> arr<span class="token punctuation">[</span><span class="token punctuation">(</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>方法二：直接sort排序</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">findMedianSortedArrays</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums1<span class="token punctuation">,</span> nums2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> arr <span class="token operator">=</span> nums1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token operator">=></span>x<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">%</span><span class="token number">2</span><span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> arr<span class="token punctuation">[</span><span class="token punctuation">(</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>力扣第416题-分割等和子集</title>
    <url>/2022/11/09/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/416/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/partition-equal-subset-sum/">题目</a></p>
<p>看到这道题，想了半天，准备用<code>回溯</code>来试试，估计写的没问题，就是超时了，尚且把代码放这里，可以看看我的思路。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">canPartition</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> odd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> numsTotal <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token operator">%</span><span class="token number">2</span><span class="token operator">!==</span><span class="token number">0</span><span class="token punctuation">)</span>odd<span class="token operator">++</span><span class="token punctuation">;</span>
        item<span class="token operator">+=</span>result<span class="token punctuation">;</span>
        max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> item<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>odd<span class="token operator">%</span><span class="token number">2</span><span class="token operator">!==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>numsTotal<span class="token operator">%</span><span class="token number">2</span><span class="token operator">!==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    numsTotal <span class="token operator">=</span> numsTotal<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>max<span class="token operator">></span>numsTotal<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>max<span class="token operator">===</span>numsTotal<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">mergeArrayChildren</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> numsTotal<span class="token punctuation">)</span>
    <span class="token operator">||</span> <span class="token function">mergeArrayChildren</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> numsTotal<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">mergeArrayChildren</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> merge<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>merge<span class="token operator">></span>target<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>merge<span class="token operator">===</span>target<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>idx<span class="token operator">>=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">mergeArrayChildren</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> merge<span class="token operator">+</span>nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span>
    <span class="token operator">||</span> <span class="token function">mergeArrayChildren</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> merge<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>当我看到评论区有人说“当我排序双指针WA，又回溯超时之后，我终于意识到这个问题没有这么简单…”后，我感觉到我不是一个人，哈哈。</p>
<p>使用背包问题解法，建议看力扣官方视频题解，你会收获很多。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token keyword">var</span> <span class="token function-variable function">canPartition</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> odd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> numsTotal <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token operator">%</span><span class="token number">2</span><span class="token operator">!==</span><span class="token number">0</span><span class="token punctuation">)</span>odd<span class="token operator">++</span><span class="token punctuation">;</span>
      item<span class="token operator">+=</span>result<span class="token punctuation">;</span>
      max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> item<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>odd<span class="token operator">%</span><span class="token number">2</span><span class="token operator">!==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>numsTotal<span class="token operator">%</span><span class="token number">2</span><span class="token operator">!==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  numsTotal <span class="token operator">=</span> numsTotal<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>max<span class="token operator">></span>numsTotal<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>max<span class="token operator">===</span>numsTotal<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  
  <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>numsTotal<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">//填写第一行背包</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>numsTotal<span class="token punctuation">)</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>numsTotal<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">||</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> dp<span class="token punctuation">[</span>dp<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>numsTotal<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
      <tags>
        <tag>背包问题</tag>
      </tags>
  </entry>
  <entry>
    <title>42</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/42/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/trapping-rain-water/">题目</a></p>
<p>方法一：集合法</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">trap</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">height</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> stack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>ans<span class="token operator">=</span><span class="token number">0</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>height<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token operator">!==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>height<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> top<span class="token operator">=</span>height<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> distance<span class="token operator">=</span>i<span class="token operator">-</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span>
      <span class="token keyword">let</span> height2<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>height<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">-</span>height<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>distance<span class="token punctuation">,</span>height2<span class="token punctuation">)</span><span class="token punctuation">;</span>
      ans<span class="token operator">+=</span>distance <span class="token operator">*</span> height2
    <span class="token punctuation">&#125;</span>
    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> ans
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>方法二：栈</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"></code></pre>
]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>力扣437题-路径总和 III</title>
    <url>/2022/11/12/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/437/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/path-sum-iii/">题目</a></p>
<p>特别简单的一道题，但是我写了大半个小时了，刚开始一直通过99个案例，开始觉得是有重复遍历的，但是怎么都改不好，最后改好了，但是超时了，因为我当时为了查看测试数据，添加了好多数组，最后我把数组去掉后就不超时了。虽然执行时间有点长，但是毕竟也是写出来了。代码如下。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">pathSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> targetSum</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span>targetSums</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>targetSums<span class="token operator">===</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            idx<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">const</span> left <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> right <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>left<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>targetSum<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>targetSum<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>targetSums<span class="token operator">-</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>targetSums<span class="token operator">-</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>targetSum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> idx<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>448</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/448/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/find-all-numbers-disappeared-in-an-array/">题目</a></p>
<p>暴力破解</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">findDisappearedNumbers</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token operator">=></span>x<span class="token operator">-</span>y<span class="token punctuation">)</span>
  <span class="token keyword">var</span> stack <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">length</span><span class="token operator">:</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span>k</span><span class="token punctuation">)</span><span class="token operator">=></span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token keyword">var</span> ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">[</span>temp<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!==</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      stack<span class="token punctuation">[</span>temp<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'*'</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!==</span><span class="token string">'*'</span><span class="token punctuation">)</span>ans<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> ans
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>46</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/46/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/permutations/">题目</a></p>
<p>回溯</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">permute</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">[</span>nums<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token parameter">aim<span class="token punctuation">,</span>nums</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>aim<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>nums<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> num <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>aim<span class="token punctuation">,</span>num<span class="token punctuation">]</span><span class="token punctuation">,</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>461</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/461/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/hamming-distance/">题目</a></p>
<p>暴力破解使用toString方法将十进制转换成二进制，再比较每个字符是否相同</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">hammingDistance</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  x <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
  y <span class="token operator">=</span> y<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token keyword">var</span> max <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span>min <span class="token operator">=</span> <span class="token string">''</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>length<span class="token operator">></span>y<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    max <span class="token operator">=</span> x
    min <span class="token operator">=</span> y
  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    max <span class="token operator">=</span> y
    min <span class="token operator">=</span> x
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">let</span> maxi <span class="token operator">=</span> max<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span>
  <span class="token keyword">let</span> mini <span class="token operator">=</span> min<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>maxi<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>mini<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>max<span class="token punctuation">[</span>maxi<span class="token punctuation">]</span><span class="token operator">!==</span>min<span class="token punctuation">[</span>mini<span class="token punctuation">]</span><span class="token punctuation">)</span>ans<span class="token operator">++</span>
    maxi<span class="token operator">--</span>
    mini<span class="token operator">--</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>maxi<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>max<span class="token punctuation">[</span>maxi<span class="token punctuation">]</span><span class="token operator">!==</span><span class="token string">'0'</span><span class="token punctuation">)</span>ans<span class="token operator">++</span>
    maxi<span class="token operator">--</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> ans
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>辗转相除法</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">hammingDistance</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> ans <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">&amp;&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> tempx <span class="token operator">=</span> x<span class="token operator">%</span><span class="token number">2</span>
    <span class="token keyword">var</span> tempy <span class="token operator">=</span> y<span class="token operator">%</span><span class="token number">2</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tempx<span class="token operator">!==</span>tempy<span class="token punctuation">)</span>ans<span class="token operator">++</span><span class="token punctuation">;</span>
    x <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>x<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>
    y <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>y<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">var</span> temp <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">%</span><span class="token number">2</span><span class="token operator">!==</span><span class="token number">0</span><span class="token punctuation">)</span>ans<span class="token operator">++</span><span class="token punctuation">;</span>
    temp <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>temp<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> ans
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>位移法</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">hammingDistance</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> s <span class="token operator">=</span> x<span class="token operator">^</span>y<span class="token punctuation">,</span>ans<span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    ans <span class="token operator">+=</span> s <span class="token operator">&amp;</span> <span class="token number">1</span>
    s <span class="token operator">>>=</span> <span class="token number">1</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> ans
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>48</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/48/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/rotate-image/">题目</a></p>
<p>方法一：先上下反转，然后再对角线反转</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">rotate</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">matrix</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> matrix<span class="token punctuation">;</span>
  <span class="token keyword">let</span> len <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">let</span> half <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>matrix<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>half<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token punctuation">[</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>matrix<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>matrix<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token punctuation">[</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// console.log(matrix);</span>
  <span class="token keyword">return</span> matrix<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>方法二：旋转图形</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">rotate</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">matrix</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> len <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> temp <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
      matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      matrix<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
      matrix<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> matrix<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>49</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/49/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/group-anagrams/">题目</a></p>
<p>暴力破解，也叫排序解法</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">groupAnagrams</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">strs</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>strs<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">[</span>strs<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> temp <span class="token operator">=</span> <span class="token function">sort</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> ans <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">===</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span>stack<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
      stack<span class="token punctuation">[</span>ans<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> stack<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>494</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/494/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/target-sum/">题目</a></p>
<p>方法一：递归</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">findTargetSumWays</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span>ans<span class="token punctuation">,</span>idx</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">===</span>target<span class="token operator">&amp;&amp;</span>idx<span class="token operator">===</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      num<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>idx<span class="token operator">></span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">get</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>ans<span class="token operator">+</span>nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">get</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>ans<span class="token operator">-</span>nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">get</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> num<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>5</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/longest-palindromic-substring/">题目</a></p>
<p>方法一：暴力解法循环两层遍历，遍历每一个字串，然后对每一个字串进行判断是否是回文字符串。时间复杂度O(n^3)，空间复杂度O(1)。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">longestPalindrome</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> s<span class="token punctuation">;</span>
  <span class="token keyword">let</span> maxLen <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">></span>maxLen<span class="token operator">&amp;&amp;</span><span class="token function">isJudge</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        maxLen <span class="token operator">=</span> j<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        begin <span class="token operator">=</span> i<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span>begin<span class="token operator">+</span>maxLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">isJudge</span><span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!==</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
    j<span class="token operator">--</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>方法二：中心扩散法遍历每一个长度为奇数或偶数的字串中心，然后向两边扩散。</p>
<pre class="language-none"><code class="language-none">var longestPalindrome &#x3D; function(s) &#123;
  let len &#x3D; s.length;
  if(len&lt;2)return s;
  let maxLen &#x3D; 1;
  let big &#x3D; 0;
  for(let i&#x3D;0;i&lt;len-1;i++)&#123;
    let ou &#x3D; findJudge(s,i,i+1,len);
    let ji &#x3D; findJudge(s,i,i,len);
    let maxTemp &#x3D; Math.max(ou,ji);
    if(maxTemp&gt;maxLen)&#123;
      maxLen &#x3D; maxTemp;
      big &#x3D; i - Math.floor((maxLen-1)&#x2F;2);
    &#125;
  &#125;
  return s.substring(big,big + maxLen);
&#125;;

function findJudge(s,left,right,len)&#123;
  while(left&gt;&#x3D;0&amp;&amp;right&lt;len)&#123;
    if(s[left]&#x3D;&#x3D;&#x3D;s[right])&#123;
      left--;
      right++;
    &#125;else&#123;
      break;
    &#125;
  &#125;
  return right - left + 1 - 2;
&#125;</code></pre>
]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>53</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/53/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/maximum-subarray/">题目</a></p>
<p>动态规划</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">maxSubArray</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> max <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> max<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>力扣第538题-把二叉搜索树转换为累加树</title>
    <url>/2022/11/18/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/538/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/convert-bst-to-greater-tree/">题目</a></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">convertBST</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">bst</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//遍历右子树</span>
            <span class="token function">bst</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//遍历顶点</span>
            root<span class="token punctuation">.</span>val <span class="token operator">=</span> root<span class="token punctuation">.</span>val <span class="token operator">+</span> num<span class="token punctuation">;</span>
            num <span class="token operator">=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
            <span class="token comment">//遍历左子树</span>
            <span class="token function">bst</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">bst</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>543</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/543/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/diameter-of-binary-tree/">题目</a></p>
<p>我本来以为只要获取root左右节点的最大深度就行了，但是最后发现题目上说的是，可以不经过root节点，最开始提交也是有四个每通过，我画了图之后才知道，我还要比较每个节点左右节点返回的最大值，再与最后的root左右节点的深度比较。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">diameterOfBinaryTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">get</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
    num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>55</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/55/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/jump-game/">题目</a></p>
<p>贪心算法</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">canJump</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>temp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      temp <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span>i<span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">>=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>56</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/56/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/merge-intervals/">题目</a></p>
<p>力解法，首先排序数组，然后判断前面的是否包含后面的。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">merge</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">intervals</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>intervals<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> intervals<span class="token punctuation">;</span>
  intervals<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token operator">=></span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span>intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>intervals<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> stack<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>560</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/560/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/subarray-sum-equals-k/">题目</a></p>
<p>方法一：暴力解法</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">subarraySum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    num<span class="token operator">+=</span><span class="token function">get</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>i<span class="token punctuation">,</span>k<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> num<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span>idx<span class="token punctuation">,</span>k<span class="token punctuation">,</span>len</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>idx<span class="token operator">&lt;</span>len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    temp<span class="token operator">+=</span>nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">===</span>k<span class="token punctuation">)</span>ans<span class="token operator">++</span><span class="token punctuation">;</span>
    idx<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>方法二：使用map优化这一题的实例真的离谱，比如<code>[0,0,0,0,0,0,0,0,0,0]\n0</code>，每个零和前面的0都还能组成符合的字串。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">subarraySum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!==</span><span class="token number">0</span><span class="token punctuation">)</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      ans<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      ans<span class="token operator">+=</span>set<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">let</span> temp <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token keyword">undefined</span><span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span>set<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>
    set<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>581</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/581/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/shortest-unsorted-continuous-subarray/">题目</a></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">findUnsortedSubarray</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">let</span> min <span class="token operator">=</span> nums<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> max <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>max<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      end <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
      max <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>len<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span>min<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      start <span class="token operator">=</span> len<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
      min <span class="token operator">=</span> nums<span class="token punctuation">[</span>len<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> end<span class="token operator">-</span>start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>617</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/617/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/merge-two-binary-trees/">题目</a></p>
<p>方法一：递归</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">mergeTrees</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root1<span class="token punctuation">,</span> root2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root1<span class="token punctuation">)</span><span class="token keyword">return</span> root2<span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root2<span class="token punctuation">)</span><span class="token keyword">return</span> root1<span class="token punctuation">;</span>
  <span class="token keyword">let</span> temp <span class="token operator">=</span> root1<span class="token punctuation">.</span>val<span class="token operator">+</span>root2<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
  root1<span class="token punctuation">.</span>val <span class="token operator">=</span> temp<span class="token punctuation">;</span>
  root1<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>root1<span class="token punctuation">.</span>left<span class="token punctuation">,</span>root2<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
  root1<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>root1<span class="token punctuation">.</span>right<span class="token punctuation">,</span>root2<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> root1<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>62</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/62/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="">题目</a></p>
<p>方法一：动态规划</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">uniquePaths</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">m<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>64</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/64/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/minimum-path-sum/">题目</a></p>
<p>动态规划</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">minPathSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">grid</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> m <span class="token operator">=</span> grid<span class="token punctuation">.</span>length<span class="token punctuation">,</span>n <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+=</span>grid<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> grid<span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>647</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/647/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/palindromic-substrings/">题目</a></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">countSubstrings</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    num <span class="token operator">+=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>i<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    num <span class="token operator">+=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>i<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> num<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span>left<span class="token punctuation">,</span>right</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>right<span class="token operator">&lt;=</span>s<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">===</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    num<span class="token operator">++</span><span class="token punctuation">;</span>
    left<span class="token operator">--</span><span class="token punctuation">;</span>
    right<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> num<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>70</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/70/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/climbing-stairs/">题目</a></p>
<p>方法一：递归该方法超时啦</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">climbStairs</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> n<span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> n<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>方法二：记忆递归使用一个数组来保存递归过的值。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">climbStairs</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">ans</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> arr<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> n<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> n<span class="token punctuation">;</span>
    arr<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">ans</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">ans</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token function">ans</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>方法三：动态规划</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">climbStairs</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> n<span class="token punctuation">;</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>temp<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>739</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/739/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/daily-temperatures/">题目</a></p>
<p>方法一：暴力破解</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">dailyTemperatures</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">temperatures</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> len <span class="token operator">=</span> temperatures<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> idx <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>idx<span class="token operator">&lt;</span>len<span class="token operator">&amp;&amp;</span>temperatures<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">&lt;=</span>temperatures<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      idx<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>idx<span class="token operator">>=</span>len<span class="token punctuation">)</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>idx <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> stack<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>75</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/75/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/sort-colors/">题目</a></p>
<p>方法一：sort()</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">sortColors</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>方法二：冒泡排序</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">sortColors</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token punctuation">[</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>nums<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> nums<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>方法三：三指针</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">sortColors</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> num0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>num1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>num2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      nums<span class="token punctuation">[</span>num2<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
      nums<span class="token punctuation">[</span>num1<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
      nums<span class="token punctuation">[</span>num0<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      nums<span class="token punctuation">[</span>num2<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
      nums<span class="token punctuation">[</span>num1<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
      nums<span class="token punctuation">[</span>num2<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> nums<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>78</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/78/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/subsets/">题目</a></p>
<p>方法一：我也不知道叫什么方法，我自己想出来的，遍历一遍nums数组的每个元素，每次遍历nums元素的时候就重新遍历一下arr数组，深拷贝一下arr数组的元素，想arr数组的元素中添加nums[i]</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">subsets</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>84</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="">题目</a></p>
<p>方法一：暴力解法暴力解法超时了</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">largestRectangleArea</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">heights</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> len <span class="token operator">=</span> heights<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> left<span class="token operator">=</span>i<span class="token punctuation">,</span>right<span class="token operator">=</span>i<span class="token punctuation">,</span>height<span class="token operator">=</span>heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>heights<span class="token punctuation">[</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>=</span>height<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      left<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>len<span class="token operator">&amp;&amp;</span>heights<span class="token punctuation">[</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>=</span>height<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      right<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> max<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>方法二：栈</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>94</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/94/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/">题目</a></p>
<p>方法一：递归</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">inorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">sort</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>力扣第96题-不同的二叉搜索树</title>
    <url>/2022/11/17/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/unique-binary-search-trees/">题目</a></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">numTrees</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token constant">G</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token constant">G</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token constant">G</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token constant">G</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token constant">G</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token constant">G</span><span class="token punctuation">[</span>i<span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token constant">G</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>98</title>
    <url>/2022/09/21/arithmetic/LeetCode%E7%83%AD%E9%A2%98HOT100/98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://leetcode.cn/problems/validate-binary-search-tree/">题目</a></p>
<p>方法一：递归</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">isValidBST</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">jude</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">,</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">jude</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span>lower<span class="token punctuation">,</span>upper</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">===</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token operator">&lt;=</span>lower<span class="token operator">||</span>root<span class="token punctuation">.</span>val<span class="token operator">>=</span>upper<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">jude</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>lower<span class="token punctuation">,</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">jude</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>root<span class="token punctuation">.</span>val<span class="token punctuation">,</span>upper<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode热题HOT100</category>
      </categories>
  </entry>
  <entry>
    <title>JSX是什么，React为什么使用JSX，babel怎么转译JSX的</title>
    <url>/2023/02/27/frame/React/JSX%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%8CReact%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8JSX%EF%BC%8Cbabel%E6%80%8E%E4%B9%88%E8%BD%AC%E8%AF%91JSX%E7%9A%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="JSX是什么，React为什么使用JSX，babel怎么转译JSX的">JSX是什么，React为什么使用JSX，babel怎么转译JSX的</h2>
<p>在前端的框架中有两种“描述UI”的方案，一种是JSX语法，一种是模板语言。</p>
<p>其中React就是选择的JSX，Vue就是选择的模板语言。</p>
<p>JSX其实就是一个语法糖，在编写React代码的时候你可以不使用JSX来进行编写。在React中，你写的JSX代码最终都会被babel编译。</p>
<pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// JSX语法</span>
<span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Hello,World!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre>
<pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// babel编译后</span>
<span class="token keyword">var</span> element <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"h1"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"Hello,world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//React17版本之前</span>
<span class="token comment">// React17版本之后</span>
<span class="token keyword">var</span> _jsxRuntime <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"react/jsx-runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> element <span class="token operator">=</span> _jsxRuntime<span class="token punctuation">.</span><span class="token function">jsx</span><span class="token punctuation">(</span><span class="token string">"h1"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">children</span><span class="token operator">:</span><span class="token string">"Hello World!"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>JSX由babel转换成React.createElement或_jsxRuntime.jsx的形式，函数执行后返回虚拟DOM，所以说你可以不使用JSX，可以直接写React.createElement或_jsxRuntime.jsx的形式。所以我们写的代码最终都会被构建成虚拟DOM树。JSX就是一种类XML语法的语法糖，让开发者来构建这个虚拟DOM树更加的方便，使代码更加的简洁。</p>
<p>那么babel是怎么样将JSX语法转换成React.createElement或_jsxRuntime.jsx的形式的呢？</p>
<p>babel编译JSX的流程分为三个部分：</p>
<ol>
<li class="lvl-3">
<p>parse：通过parse将JSX代码转换成AST。</p>
</li>
<li class="lvl-3">
<p>transform：在transform阶段使用<code>@babel/plugin-transform-react-jsx</code>插件，它的核心就是visitor函数，通过这个函数来遍历AST，根据不同的节点类型来做不同的处理，生成了JSX对应的createElement对应的AST。</p>
</li>
<li class="lvl-3">
<p>generate：最后由generate将AST转换为JS。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>框架</category>
        <category>react</category>
      </categories>
  </entry>
  <entry>
    <title>React Hooks理念</title>
    <url>/2022/10/03/frame/React/React%20Hooks%E7%90%86%E5%BF%B5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="React-Hooks理念">React Hooks理念</h2>
]]></content>
      <categories>
        <category>框架</category>
        <category>react</category>
      </categories>
  </entry>
  <entry>
    <title>React hooks简单源码实现</title>
    <url>/2022/10/03/frame/React/React%20hooks%E7%AE%80%E5%8D%95%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="React-hooks简单源码实现">React hooks简单源码实现</h2>
<p>虚拟DOM上保存了自身组件和hooks，如果有多个hooks则以链表的形式保存。当使用updateNum()等更新函数的时候，调用dispatchAction函数，在hooks.queue.pending里面储存环状链表来表示需要更新的值，然后从新调用schedule函数，再次执行组件的更新，改变hooks的状态值。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> isNount <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> workInProgressHook <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//储存所有的hooks，以链表的形式</span>

<span class="token keyword">const</span> fiber <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token comment">//表示虚拟DOM</span>
  <span class="token literal-property property">stateNode</span><span class="token operator">:</span> App<span class="token punctuation">,</span><span class="token comment">//自身</span>
  <span class="token literal-property property">memoizedState</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//useState hooks</span>
<span class="token keyword">function</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token parameter">initialState</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//initialState是useState初始化值</span>
  <span class="token keyword">let</span> hooks<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isNount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//首次渲染</span>
    hooks <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">memoizedState</span><span class="token operator">:</span> initialState<span class="token punctuation">,</span><span class="token comment">//保存初始化值</span>
      <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token comment">//保存下一个节点</span>
      <span class="token literal-property property">queue</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">pending</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token comment">//保存状态的改变，为环状链表</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fiber<span class="token punctuation">.</span>memoizedState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果是组件中的第一个hooks</span>
      fiber<span class="token punctuation">.</span>memoizedState <span class="token operator">=</span> hooks<span class="token punctuation">;</span><span class="token comment">//将hooks赋值给fiber.memoizedState</span>
      workInProgressHook <span class="token operator">=</span> hooks<span class="token punctuation">;</span><span class="token comment">//将hooks赋值给workInProgressHook</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果不是组件中的第一个hooks</span>
      workInProgressHook<span class="token punctuation">.</span>next <span class="token operator">=</span> hooks<span class="token punctuation">;</span><span class="token comment">//则将workInProgressHook连接下一个链表节点</span>
    <span class="token punctuation">&#125;</span>
    workInProgressHook <span class="token operator">=</span> hooks<span class="token punctuation">;</span><span class="token comment">//将workInProgressHook重新赋值为尾节点</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//不是首次渲染</span>
    hooks <span class="token operator">=</span> workInProgressHook<span class="token punctuation">;</span><span class="token comment">//将hooks赋值上第一次创建的useState</span>
    workInProgressHook <span class="token operator">=</span> workInProgressHook<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment">//workInProgressHook指向下一个节点</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">let</span> baseState <span class="token operator">=</span> hooks<span class="token punctuation">.</span>memoizedState<span class="token punctuation">;</span><span class="token comment">//获取hooks上一次的状态</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>hooks<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>pending<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果更新，表示有新的update</span>
    <span class="token keyword">let</span> firstUpdate <span class="token operator">=</span> hooks<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>pending<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment">//找到环状链表的第一个update</span>
    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> action <span class="token operator">=</span> firstUpdate<span class="token punctuation">.</span>action<span class="token punctuation">;</span>
      baseState <span class="token operator">=</span> <span class="token function">action</span><span class="token punctuation">(</span>baseState<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取更新函数里面的值，updateNum(num => num + 1);里面的值就是num => num + 1</span>
      firstUpdate <span class="token operator">=</span> firstUpdate<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment">//让链表指向下一个节点</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>firstUpdate <span class="token operator">!==</span> hooks<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>pending<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结束环状链表遍历</span>
    hooks<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>pending <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//更新完毕，赋值为null</span>
  <span class="token punctuation">&#125;</span>
  hooks<span class="token punctuation">.</span>memoizedState <span class="token operator">=</span> baseState<span class="token punctuation">;</span><span class="token comment">//将hooks.memoizedState赋值为新的值</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span>baseState<span class="token punctuation">,</span> <span class="token function">dispatchAction</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> hooks<span class="token punctuation">.</span>queue<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//返回值和更新函数</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">dispatchAction</span><span class="token punctuation">(</span><span class="token parameter">queue<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> update <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token comment">//环状链表</span>
    action<span class="token punctuation">,</span><span class="token comment">//调用更新函数里面的传参</span>
    <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token keyword">null</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>pending <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//没有触发更新，触发第一个更新</span>
    <span class="token comment">//u0 -> u0 -> u0</span>
    update<span class="token punctuation">.</span>next <span class="token operator">=</span> update<span class="token punctuation">;</span><span class="token comment">//让自身的下一个节点指向自身，形成环状链表</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//如果有多个更新，update保存的是最后一个更新函数，则update.next保存第一个更新函数才能形成环状链表</span>
    update<span class="token punctuation">.</span>next <span class="token operator">=</span> queue<span class="token punctuation">.</span>pending<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment">//u0 -> u1</span>
    queue<span class="token punctuation">.</span>pending<span class="token punctuation">.</span>next <span class="token operator">=</span> update<span class="token punctuation">;</span><span class="token comment">//u1 -> u0</span>
    <span class="token comment">//形成环状链表</span>
  <span class="token punctuation">&#125;</span>
  queue<span class="token punctuation">.</span>pending <span class="token operator">=</span> update<span class="token punctuation">;</span><span class="token comment">//将queue.pending赋值为环状链表的最后一个节点</span>
  <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用函数重新加载数据</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//当首次渲染和更新的时候调用schedule</span>
<span class="token keyword">function</span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  workInProgressHook <span class="token operator">=</span> fiber<span class="token punctuation">.</span>memoizedState<span class="token punctuation">;</span><span class="token comment">//workInProgressHook储存所有的hooks，以链表的形式。</span>
  <span class="token keyword">const</span> app <span class="token operator">=</span> fiber<span class="token punctuation">.</span><span class="token function">stateNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行App()。</span>
  isNount <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//将isNount设置成false，表示以后不是第一层渲染。</span>
  <span class="token keyword">return</span> app<span class="token punctuation">;</span><span class="token comment">//返回APP()执行后的结果，我们模拟APP函数只有onClick和onFocus函数。</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span> updateNum<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>num1<span class="token punctuation">,</span> updateNum1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'num:'</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'num1:'</span><span class="token punctuation">,</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">updateNum</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=></span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function">onFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">updateNum1</span><span class="token punctuation">(</span><span class="token parameter">num1</span> <span class="token operator">=></span> num1 <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

window<span class="token punctuation">.</span>app <span class="token operator">=</span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">onFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>框架</category>
        <category>react</category>
      </categories>
  </entry>
  <entry>
    <title>React render阶段</title>
    <url>/2022/10/04/frame/React/React%20render/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="#1">React render阶段</a></p>
<ul class="lvl-0">
<li class="lvl-4"><a href="#2">流程</a>
<ul class="lvl-2">
<li class="lvl-6"><a href="#3">递阶段</a></li>
<li class="lvl-6"><a href="#4">归阶段</a></li>
</ul>
</li>
<li class="lvl-4"><a href="#5">参考资料</a></li>
</ul>
<p id=1></p>
<h2 id="React-render阶段">React render阶段</h2>
<p id=2></p>
<h3 id="流程">流程</h3>
<p id=3></p>
<h4 id="递阶段">递阶段</h4>
<p>首先从<code>rootFiber</code>开始向下深度优先遍历。为遍历到的每个<code>Fiber</code>节点调用<code>beginWork</code>方法。该方法会根据传入的<code>Fiber</code>节点创建子<code>Fiber</code>节点，并将这两个<code>Fiber</code>节点连接起来。当遍历到叶子节点（即没有子组件的组件）时就会进入“归”阶段。</p>
<p id=4></p>
<h4 id="归阶段">归阶段</h4>
<p>在“归”阶段会调用<code>completeWork</code>处理<code>Fiber</code>节点。当某个Fiber节点执行完<code>completeWork</code>，如果其存在兄弟Fiber节点（即<code>fiber.sibling !== null</code>），会进入其兄弟<code>Fiber</code>的“递”阶段。如果不存在兄弟<code>Fiber</code>，会进入父级<code>Fiber</code>的“归”阶段。“递”和“归”阶段会交错执行直到“归”到<code>rootFiber</code>。至此，<code>render</code>阶段的工作就结束了。</p>
<p id=5></p>
<h3 id="参考资料">参考资料</h3>
<p>[1]<a href="https://react.iamkasong.com/">React技术揭秘</a></p>
]]></content>
      <categories>
        <category>框架</category>
        <category>react</category>
      </categories>
  </entry>
  <entry>
    <title>React导学</title>
    <url>/2022/10/03/frame/React/React%E5%AF%BC%E5%AD%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="React导学">React导学</h2>
<h3 id="React源码学习层次">React源码学习层次</h3>
<pre class="mermaid"> graph TB;
React源码-->第一层:掌握术语&基本实现思路
React源码-->第二层:掌握整体工作流程&局部细节-面试就够了
React源码-->第三层:掌握关键流程的细节-探索前端的边界
React源码-->第四层:掌握思想
React源码-->第五层:大佬的世界
第二层:掌握整体工作流程&局部细节-面试就够了-->工作流程
第二层:掌握整体工作流程&局部细节-面试就够了-->局部细节
工作流程-->schedule调度&scheduler
工作流程-->render协调&reconciler-fiber
工作流程-->commit渲染&renderer
局部细节-->diff算法
局部细节-->hooks源码</pre>
<h3 id="React-Hooks">React Hooks</h3>
]]></content>
      <categories>
        <category>框架</category>
        <category>react</category>
      </categories>
  </entry>
  <entry>
    <title>React性能优化</title>
    <url>/2022/10/03/frame/React/React%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="#1">React性能优化</a></p>
<ul class="lvl-0">
<li class="lvl-4"><a href="#2">为什么React需要性能优化API?</a></li>
<li class="lvl-4"><a href="#3">React性能优化应该遵循的法则</a>
<ul class="lvl-2">
<li class="lvl-6"><a href="#4">抽离Demo1</a></li>
<li class="lvl-6"><a href="#5">抽离Demo2</a></li>
</ul>
</li>
<li class="lvl-4"><a href="#6">性能优化背后的源码运行机制</a>
<ul class="lvl-2">
<li class="lvl-6"><a href="#7">该如何比较props?</a></li>
</ul>
</li>
</ul>
<p id=1></p>
<h2 id="React性能优化">React性能优化</h2>
<p id=2></p>
<h3 id="为什么React需要性能优化API">为什么React需要性能优化API?</h3>
<p>React中什么情况组件会重新渲染呢？</p>
<ol>
<li class="lvl-3">
<p>组件自己的state变化</p>
</li>
<li class="lvl-3">
<p>父组件传递的props变化</p>
</li>
<li class="lvl-3">
<p>父组件重新渲染</p>
</li>
</ol>
<pre class="mermaid">graph TB;
App-->Nav
App-->Body
App-->Footer
Body-->Header
Body-->Content
Body-->Comment</pre>
<p>如图我们创建了一个React组件根组件APP和他下面的子组件，当我们更新Comment组件的时候，React会从APP组件开始重新创建树，这样就导致了性能的低。我们需要在重新创建树的时候跳过没有更新的组件。</p>
<p id=3></p>
<h3 id="React性能优化应该遵循的法则">React性能优化应该遵循的法则</h3>
<p><strong>优化的原则就是将变于不变的部分分离，变的部分有三种，<code>props</code>、<code>state</code>、<code>context</code>。</strong><br>
<strong>当父组件满足性能优化条件，子组件才能可能命中性能优化。</strong></p>
<p id=4></p>
<h4 id="抽离Demo1">抽离Demo1</h4>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Apps'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span>setNum<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">setNum</span><span class="token punctuation">(</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//当父组件里面的数据改变，则每次都要加载子组件</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">&#123;</span>num<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>set<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token operator">&lt;</span>Body <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">Body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Body'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token number">222</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token punctuation">&#125;</span></code></pre>
<p>我们可以将上述组件的变于不变的部分抽离</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Apps'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>Btn <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>Body <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">Btn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span>setNum<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">setNum</span><span class="token punctuation">(</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">&#123;</span>num<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>set<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">Body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Body'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token number">222</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token punctuation">&#125;</span></code></pre>
<p id=5></p>
<h4 id="抽离Demo2">抽离Demo2</h4>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Apps'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span>setNum<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">setNum</span><span class="token punctuation">(</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div title<span class="token operator">=</span><span class="token punctuation">&#123;</span>num<span class="token punctuation">&#125;</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">&#123;</span>num<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>set<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token operator">&lt;</span>Body <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">Body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Body'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token number">222</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token punctuation">&#125;</span></code></pre>
<p>抽离变与不变的部分。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Apps'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>Btn<span class="token operator">></span>
    <span class="token operator">&lt;</span>Body <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>Btn<span class="token operator">></span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">Btn</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>children<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span>setNum<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">setNum</span><span class="token punctuation">(</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div title<span class="token operator">=</span><span class="token punctuation">&#123;</span>num<span class="token punctuation">&#125;</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">&#123;</span>num<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>set<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token punctuation">&#123;</span>children<span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">Body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Body'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token number">222</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token punctuation">&#125;</span></code></pre>
<p>将APP组件中变的部分于不变的部分分离开来，这样变的部分就不会影响到不变的部分了。</p>
<p id=6></p>
<h3 id="性能优化背后的源码运行机制">性能优化背后的源码运行机制</h3>
<p id=7></p>
<h4 id="该如何比较props">该如何比较props?</h4>
<ol>
<li class="lvl-3">
<p>全等比较–高效，但不易命中。</p>
</li>
<li class="lvl-3">
<p>浅比较–不高效，但易命中。<br>
React中旧新props的比较，默认是全等比较，所以当props没有传值的时候，是比较的两个空对象，这样比较还是显示为false，组件props改变。我们可以通过memo将全等比较改变成浅比较。</p>
</li>
</ol>
<p>memo</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Apps'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span>setNum<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">setNum</span><span class="token punctuation">(</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">&#123;</span>num<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>set<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token operator">&lt;</span>Body <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> Body <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Body'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token number">222</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>
<p>useMemo</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Apps'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span>setNum<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">setNum</span><span class="token punctuation">(</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">&#123;</span>num<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>set<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token operator">&lt;</span>Middle <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">Middle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>Body <span class="token operator">/</span><span class="token operator">></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> Body <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Body'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token number">222</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>]]></content>
      <categories>
        <category>框架</category>
        <category>react</category>
      </categories>
  </entry>
  <entry>
    <title>React数据管理</title>
    <url>/2023/03/06/frame/React/React%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="React数据管理">React数据管理</h2>
<p><a href="https://github.com/guLinga/React-data-administration">代码仓库</a></p>
<h3 id="React批量更新">React批量更新</h3>
<p>React中的批量更新就是将多次更新合并处理，最终只渲染一次，来获得更好的性能。</p>
<h4 id="React18版本之前的批量更新">React18版本之前的批量更新</h4>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// react 17 react-dom 17 react-scripts 4.0.3</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ReactDOM <span class="token keyword">from</span> <span class="token string">"react-dom"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span>useState<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>num1<span class="token punctuation">,</span> setNum1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>num2<span class="token punctuation">,</span> setNum2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">setNum1</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setNum2</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"render"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token literal-property property">num1</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>num1<span class="token punctuation">&#125;</span><span class="token operator">-</span>num2<span class="token operator">:</span><span class="token punctuation">&#123;</span>num2<span class="token punctuation">&#125;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span><span class="token operator">></span>Next<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> rootElement<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>点击一次按钮触发setNum1和setNum2，但是render只输出一次，React将多次更新合并处理，最终只渲染一次。</p>
<p>然而React18版本之前，批量更新并不是所有场景都会生效。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ReactDOM <span class="token keyword">from</span> <span class="token string">"react-dom"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span>useState<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>num1<span class="token punctuation">,</span> setNum1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>num2<span class="token punctuation">,</span> setNum2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      <span class="token function">setNum1</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">setNum2</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"render"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token literal-property property">num1</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>num1<span class="token punctuation">&#125;</span><span class="token operator">-</span>num2<span class="token operator">:</span><span class="token punctuation">&#123;</span>num2<span class="token punctuation">&#125;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span><span class="token operator">></span>Next<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> rootElement<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>点击一次按钮触发setNum1和setNum2，然后会输出两次render，这就是在React18版本之前，React的批量更新失效了。</p>
<p>总结：在React18之前，我们只能在React事件处理函数中执行过程中进行批量更新。对于promise、setTimeout、原生事件处理函数或其他任何事件中的状态更新都不会进行批量更新。</p>
<h4 id="React18自动批量更新">React18自动批量更新</h4>
<p>从React18的createRoot开始，无论在哪里，所有更新都将自动进行批量更新。这意味着 setTimeout、promises、原生事件处理函数或其他任何事件的批量更新都将与 React 事件一样，以相同的方式进行批量更新。我们希望这样可以减少渲染工作量，从而提高应用程序的性能:</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// react 18.2.0 react-dom 18.2.0 react-scripts 5.0.1</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom/client'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span>useState<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>num1<span class="token punctuation">,</span> setNum1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>num2<span class="token punctuation">,</span> setNum2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      <span class="token function">setNum1</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">setNum2</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"render"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token literal-property property">num1</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>num1<span class="token punctuation">&#125;</span><span class="token operator">-</span>num2<span class="token operator">:</span><span class="token punctuation">&#123;</span>num2<span class="token punctuation">&#125;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span><span class="token operator">></span>Next<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>点击一次按钮触发setNum1和setNum2，然后会输出一次render，这就是在React18版本，自动批量更新，所有更新都将进行批量更新。</p>
<h4 id="禁止批量更新">禁止批量更新</h4>
<p>使用flushSync来包裹更新，做到禁止批量更新</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom/client'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span>flushSync<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span>useState<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>num1<span class="token punctuation">,</span> setNum1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>num2<span class="token punctuation">,</span> setNum2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      <span class="token function">flushSync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
        <span class="token function">setNum1</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      <span class="token function">flushSync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
        <span class="token function">setNum2</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"render"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token literal-property property">num1</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>num1<span class="token punctuation">&#125;</span><span class="token operator">-</span>num2<span class="token operator">:</span><span class="token punctuation">&#123;</span>num2<span class="token punctuation">&#125;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span><span class="token operator">></span>Next<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h4 id="React18的自动批量更新对Hooks的影响">React18的自动批量更新对Hooks的影响</h4>
<p>如果你正在使用 Hooks，在绝大多数情况下批量更新都能“正常工作”。</p>
<h4 id="React18的自动批量更新对Classes的影响">React18的自动批量更新对Classes的影响</h4>
<p>如果在React17版本之前，没有在React事件处理函数中执行的代码不会批量执行，同时它也是同步执行，而在React18版本中，都是批量更新和异步执行的。所以会导致React18版本和React18版本之前的输出不一样。</p>
<p>在React18版本之前</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">num1</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token literal-property property">num2</span><span class="token operator">:</span> <span class="token number">1</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>num1<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">num1</span><span class="token operator">:</span> num1<span class="token operator">+</span><span class="token number">1</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>num2<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">num2</span><span class="token operator">:</span> num2<span class="token operator">+</span><span class="token number">1</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'render'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token literal-property property">num1</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>num1<span class="token punctuation">&#125;</span><span class="token operator">-</span>num2<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>num2<span class="token punctuation">&#125;</span>
        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">></span>Next<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> rootElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*
  上述代码点击的时候会输出一下内容：
  render
  &#123;num1: 2, num2: 1&#125;
  render
*/</span></code></pre>
<p>在React18版本</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom/client'</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">num1</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token literal-property property">num2</span><span class="token operator">:</span> <span class="token number">1</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>num1<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">num1</span><span class="token operator">:</span> num1<span class="token operator">+</span><span class="token number">1</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>num2<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">num2</span><span class="token operator">:</span> num2<span class="token operator">+</span><span class="token number">1</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'render'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token literal-property property">num1</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>num1<span class="token punctuation">&#125;</span><span class="token operator">-</span>num2<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>num2<span class="token punctuation">&#125;</span>
        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">></span>Next<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*
  上述代码点击的时候会输出一下内容：
  &#123;num1: 1, num2: 1&#125;
  render
*/</span></code></pre>
<p>如果想要在React18中按照React18版本之前的输出需要使用flushSync来进行修改</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> flushSync <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom/client'</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">num1</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token literal-property property">num2</span><span class="token operator">:</span> <span class="token number">1</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      <span class="token function">flushSync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>num1<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
          <span class="token literal-property property">num1</span><span class="token operator">:</span> num1<span class="token operator">+</span><span class="token number">1</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>num2<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">num2</span><span class="token operator">:</span> num2<span class="token operator">+</span><span class="token number">1</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'render'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token literal-property property">num1</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>num1<span class="token punctuation">&#125;</span><span class="token operator">-</span>num2<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>num2<span class="token punctuation">&#125;</span>
        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">></span>Next<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*
  上述代码点击的时候会输出一下内容：
  &#123;num1: 1, num2: 1&#125;
  render
*/</span></code></pre>
<h3 id="useState是同步还是异步">useState是同步还是异步</h3>
<p>先上结论：</p>
<ol>
<li class="lvl-3">
<p>在React18版本之前，useState在React合成事件和hooks中是异步的，其他情况都是同步的，例如，原生事件、setTimeout、promise等</p>
</li>
<li class="lvl-3">
<p>在React18版本，useState在React中都是异步的</p>
</li>
</ol>
<h4 id="React18版本之前的this-setState">React18版本之前的this.setState</h4>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ReactDOM <span class="token keyword">from</span> <span class="token string">"react-dom"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> React<span class="token punctuation">,</span><span class="token punctuation">&#123;</span>useState<span class="token punctuation">,</span>useEffect<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Count<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> rootElement<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>上述代码输出<code>0 0 2 3</code>，我们来分析一下为什么这样输出。</p>
<ol>
<li class="lvl-3">
<p>首先进入<code>componentDidMount</code>，因为this.setState是异步执行的，所以先执行同步代码，执行两次<code>console.log(this.state.count);</code>，输出两次0</p>
</li>
<li class="lvl-3">
<p>在<code>componentDidMount</code>中，this.setState导致的更新会进行合并，批量更新，只会更新最后一个，所以当还没执行<code>setTimeout</code>之前，更新<code>count</code>，这时的<code>count</code>变成了1</p>
</li>
<li class="lvl-3">
<p>进入<code>setTimeout</code>执行，在<code>setTimeout</code>中，this.setState是同步执行的，并且没有批量更新</p>
</li>
<li class="lvl-3">
<p>执行<code>this.setState(&#123;count: this.state.count + 1&#125;)</code>，这时<code>count</code>同步更新为2，执行<code>console.log(this.state.count);</code>输出2</p>
</li>
<li class="lvl-3">
<p>执行<code>this.setState(&#123;count: this.state.count + 1&#125;)</code>，这时<code>count</code>同步更新为3，执行<code>console.log(this.state.count);</code>输出4</p>
</li>
</ol>
<p>所以最终输出<code>0 0 2 3</code>。</p>
<h4 id="React18版本之前的this-setState怎么在setTimeout实现异步批量更新-unstable-batchedUpdates">React18版本之前的this.setState怎么在setTimeout实现异步批量更新(unstable_batchedUpdates)</h4>
<p>this.setState怎么在setTimeout实现异步批量更新，React提供了一种解决方案，就是从<code>react-dom</code>中暴露一个API:<code>unstable_batchedUpdates</code>，我们看一下具体的用法。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ReactDOM <span class="token keyword">from</span> <span class="token string">"react-dom"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> React<span class="token punctuation">,</span><span class="token punctuation">&#123;</span>useState<span class="token punctuation">,</span>useEffect<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          ReactDOM<span class="token punctuation">.</span><span class="token function">unstable_batchedUpdates</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span>
              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> 
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Count<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> rootElement<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>上述代码输出<code>0 0 1 1</code>，我们来分析一下为什么这样输出。</p>
<ol>
<li class="lvl-3">
<p>首先进入<code>componentDidMount</code>，因为this.setState是异步执行的，所以先执行同步代码，执行两次<code>console.log(this.state.count);</code>，输出两次0</p>
</li>
<li class="lvl-3">
<p>在<code>componentDidMount</code>中，this.setState导致的更新会进行合并，批量更新，只会更新最后一个，所以当还没执行<code>setTimeout</code>之前，更新<code>count</code>，这时的<code>count</code>变成了1</p>
</li>
<li class="lvl-3">
<p>进入<code>setTimeout</code>执行，因为<code>setTimeout</code>中的代码用了<code>unstable_batchedUpdates</code>嵌套，所以也是异步批量更新。</p>
</li>
<li class="lvl-3">
<p>先执行同步代码，执行两次<code>console.log(this.state.count)</code>，输出两次1。</p>
</li>
<li class="lvl-3">
<p>执行<code>this.setState(&#123;count: this.state.count + 1&#125;)</code>，此时<code>count</code>更新为2。</p>
</li>
<li class="lvl-3">
<p>执行<code>this.setState(&#123;count: this.state.count + 1&#125;)</code>，此时<code>count</code>更新为3。</p>
</li>
</ol>
<h4 id="React18的解决方案">React18的解决方案</h4>
<p>如果在React17版本中，想要在<code>setTimeout</code>中执行异步批量更新，需要在每个<code>setTimeout</code>中都嵌套<code>unstable_batchedUpdates</code>，React18中解决了这个痛点，无论在哪里的更新都是异步批量更新。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom/client'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span>flushSync<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>React18 Count<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>上述代码输出<code>0 0 1 1</code>，我们来分析一下为什么这样输出。</p>
<ol>
<li class="lvl-3">
<p>首先进入<code>componentDidMount</code>，因为this.setState是异步执行的，所以先执行同步代码，执行两次<code>console.log(this.state.count);</code>，输出两次0</p>
</li>
<li class="lvl-3">
<p>在<code>componentDidMount</code>中，this.setState导致的更新会进行合并，批量更新，只会更新最后一个，所以当还没执行<code>setTimeout</code>之前，更新<code>count</code>，这时的<code>count</code>变成了1</p>
</li>
<li class="lvl-3">
<p>进入<code>setTimeout</code>执行，在React18中，<code>setTimeout</code>中是异步批量更新。</p>
</li>
<li class="lvl-3">
<p>先执行同步代码，执行两次<code>console.log(this.state.count)</code>，输出两次1。</p>
</li>
<li class="lvl-3">
<p>执行<code>this.setState(&#123;count: this.state.count + 1&#125;)</code>，此时<code>count</code>更新为2。</p>
</li>
<li class="lvl-3">
<p>执行<code>this.setState(&#123;count: this.state.count + 1&#125;)</code>，此时<code>count</code>更新为3。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>框架</category>
        <category>react</category>
      </categories>
  </entry>
  <entry>
    <title>React.createElement</title>
    <url>/2022/10/03/frame/React/React.createElement/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="React-createElement">React.createElement</h2>
<h3 id="React-createElement函数的作用。">React.createElement函数的作用。</h3>
<p>React.createElement函数的作用无非就是返回虚拟DOM。</p>
<p>React.createElement(type,config,children);<br>
type：标签类型，例如div标签。<br>
config：元素上面带的属性，例如className属性。<br>
children：子元素。</p>
<p>我们看下面的代码：</p>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">/**
 * react.js
 */</span>
<span class="token comment">//createElement返回虚拟DOM</span>

<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> <span class="token constant">REACT_ELEMENT</span> <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./stants"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Component <span class="token keyword">from</span> <span class="token string">"./component"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> toObject <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./util"</span><span class="token punctuation">;</span>

<span class="token comment">//type是标签类型，config是属性，children是子元素</span>
<span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span>config<span class="token punctuation">,</span>children<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token comment">//处理key ref</span>
  <span class="token keyword">let</span> key<span class="token punctuation">,</span>ref<span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//将属性上的key和ref提取出来</span>
    key<span class="token operator">=</span>config<span class="token punctuation">.</span>key<span class="token punctuation">;</span>
    ref<span class="token operator">=</span>config<span class="token punctuation">.</span>ref<span class="token punctuation">;</span>
    <span class="token keyword">delete</span> config<span class="token punctuation">.</span>key<span class="token punctuation">;</span>
    <span class="token keyword">delete</span> config<span class="token punctuation">.</span>ref<span class="token punctuation">;</span> 
  <span class="token punctuation">&#125;</span>
  <span class="token comment">//处理children</span>
  <span class="token keyword">let</span> props<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">...</span>config<span class="token punctuation">&#125;</span>
  <span class="token comment">//1、没有children</span>
  <span class="token comment">//2、有一个children (1)文本 (2)元素</span>
  <span class="token comment">//3、多个儿子</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//多个儿子</span>
    props<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>toObject<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//只有一个儿子</span>
    props<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token function">toObject</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token comment">//vnode=>react元素 虚拟DOM</span>
    $$typeofs<span class="token operator">:</span><span class="token constant">REACT_ELEMENT</span><span class="token punctuation">,</span>
    key<span class="token punctuation">,</span><span class="token comment">//后面用于diff算法</span>
    ref<span class="token punctuation">,</span><span class="token comment">//获取真实DOM</span>
    type<span class="token punctuation">,</span><span class="token comment">//标签类型</span>
    props<span class="token comment">//子元素</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> MyReact <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  createElement
<span class="token punctuation">&#125;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> MyReact</code></pre>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">/**
 * stants.js
 */</span>
<span class="token comment">//标识是元素还是文本</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">REACT_ELEMENT</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"react.element"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">REACT_TEXT</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"react.text"</span><span class="token punctuation">)</span></code></pre>
<p><strong>注意：React中没有这一部分的转换，我们转换知识为了方便判断是文本几点还是元素节点</strong></p>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">/**
 * util.js
 */</span>
<span class="token comment">//判断节点是数字或文本，则将节点转换成对象的形式。</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> <span class="token constant">REACT_TEXT</span> <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./stants"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">toObject</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">typeof</span> element <span class="token operator">===</span> <span class="token string">"string"</span><span class="token operator">||</span><span class="token keyword">typeof</span> element <span class="token operator">===</span> <span class="token string">"number"</span><span class="token operator">?</span>
  <span class="token punctuation">&#123;</span>type<span class="token operator">:</span><span class="token constant">REACT_TEXT</span><span class="token punctuation">,</span>content<span class="token operator">:</span>element<span class="token punctuation">&#125;</span><span class="token operator">:</span>element<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>上面就是React.createElement函数的代码，还是比较简单的，就是将一些属性转换一下，然后就成了虚拟Dom，返回虚拟Dom。</p>
]]></content>
      <categories>
        <category>框架</category>
        <category>react</category>
      </categories>
  </entry>
  <entry>
    <title>React新旧框架</title>
    <url>/2023/03/04/frame/React/React%E6%96%B0%E6%97%A7%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="React新旧框架">React新旧框架</h2>
<h3 id="React快速响应的制约和解决方案">React快速响应的制约和解决方案</h3>
<p>React的关键就是“快速响应”，那么制约“快速响应”的因素是什么呢？主要有一下两点。</p>
<ol>
<li class="lvl-3">
<p>当执行大计算量的操作或设备性能不足时，页面掉帧导致卡顿。这就是CPU的瓶颈。</p>
</li>
<li class="lvl-3">
<p>进行I/O操作后，需要等待数据返回才能继续操作。等待的过程导致不能快速响应。这就是I/O的瓶颈。</p>
</li>
</ol>
<p>CPU瓶颈：在React中，最有可能造成CPU瓶颈的部分是“虚拟DOM相关工作”。解决的方法就是将虚拟DOM的执行过程拆分为一个个独立的宏任务，将每个宏任务的执行时间限制在一定范围内（初始化为5ms），来减少掉帧的可能性。这一技术叫做Time Slice（时间切片）。</p>
<p>具体包括一下三点：</p>
<ol>
<li class="lvl-3">
<p>为不同的操作赋予不同的优先级</p>
</li>
<li class="lvl-3">
<p>优先处理“最高优先级的更新”</p>
</li>
<li class="lvl-3">
<p>如果正在进行虚拟DOM相关的工作，有“更高优先级的更新”，则会中断当前更新，优先处理高优先级更新。</p>
</li>
</ol>
<p>要实现以上三点需要React底层实现一下三点：</p>
<ol>
<li class="lvl-3">
<p>用于调度优先级的调度器</p>
</li>
<li class="lvl-3">
<p>用于调度器的调度算法</p>
</li>
<li class="lvl-3">
<p>支持可中断的虚拟DOM是新</p>
</li>
</ol>
<p>React旧的架构，在Reconciler中，mount组件会调用mountComponent，update组件会调用updateComponent。这两个方法都会递归的更新子组件。更新流程一旦开始就无法中断。<br>
React新的架构，增加了Scheduler（调度器），调度任务的优先级，高优先级任务优先进入Reconciler。Reconciler的更新流程从递归不可中断变成了“可终端的循环过程”。每次循环都会调用shouldYield判断当前Time Slice是否有剩余时间。没有时间就暂停更新流程，将主线程交给优先级更高的任务，这就是Time Slice（时间切片）的实现原理。</p>
<p>I/O瓶颈：更新流程变成“异步、可中断”并不能完全突破“I/O瓶颈”，解决问题的关键在于“使多个更新的工作流程并发执行”。所以React继续迭代为“并发模式”。</p>
<p>旧框架对应同步时期，新框架对应异步模式、并发模式、并发特征。</p>
<h3 id="React从旧框架更新到新框架的过程-渐进升级">React从旧框架更新到新框架的过程-渐进升级</h3>
<p>为了使React从旧版本平滑过渡到新版本，React团队采用了“渐进升级”方案。v16.3新增了StrictMode针对开发者编写的“不符合并发更新规范的代码”给提示出来。为了使不同模式的应用可能在同一个页面内工作，将大多数事件统一冒泡到HTML元素调正为冒泡到所在的根元素。</p>
<h3 id="Fiber框架">Fiber框架</h3>
]]></content>
      <categories>
        <category>框架</category>
        <category>react</category>
      </categories>
  </entry>
  <entry>
    <title>React源码学习</title>
    <url>/2022/10/03/frame/React/React%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="React源码学习">React源码学习</h2>
<h3 id="React源码学习流程">React源码学习流程</h3>
<h3 id="babel">babel</h3>
<p>在react中，react会使用babel将jsx转换。然后在转换成虚拟DOM。</p>
<pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">"react-dom"</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>class<span class="token punctuation">"</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token literal-property property">color</span><span class="token operator">:</span><span class="token string">'red'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">React</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>我们打印的element为：</p>
<pre class="language-none"><code class="language-none">React.createElement(&quot;h1&quot;, &#123;
  className: &quot;class&quot;,
  style: &#123;
    color: &#39;red&#39;
  &#125;
&#125;, &quot;React&quot;);</code></pre>
<p>为什么会这样呢？这就是React内部帮我们将jsx语法通过babel转换了。转换后React.createElement()函数就是返回的虚拟DOM。<a href="https://www.babeljs.cn/repl#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&amp;build=&amp;builtIns=false&amp;corejs=3.21&amp;spec=false&amp;loose=false&amp;code_lz=Q&amp;debug=false&amp;forceAllTransforms=false&amp;shippedProposals=false&amp;circleciRepo=&amp;evaluate=false&amp;fileSize=false&amp;timeTravel=false&amp;sourceType=module&amp;lineWrap=true&amp;presets=env%2Creact%2Cstage-2&amp;prettier=false&amp;targets=&amp;version=7.19.2&amp;externalPlugins=&amp;assumptions=%7B%7D">你可以在这里尝试babel转换</a>。</p>
<h3 id="React-createElement函数">React.createElement函数</h3>
<p>React.createElement函数的作用就返回虚拟DOM。<br>
React中的虚拟DOM中的属性：</p>
<ol>
<li class="lvl-3">
<p>$$typeof: REACT_ELEMENT</p>
</li>
<li class="lvl-3">
<p>type是标签，例如div标签，但是我们这里做了一层处理，如果是文本的话是没有标签的，我们给其加上了<code>Symbol(react.text)</code>标签，方便以后的处理。</p>
</li>
<li class="lvl-3">
<p>ref</p>
</li>
<li class="lvl-3">
<p>key</p>
</li>
<li class="lvl-3">
<p>props是React元素上面的属性，例如有的div上面会有style属性</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//src->react->index.js</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span><span class="token constant">REACT_ELEMENT</span><span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../constant"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> wrap2VirtualDom <span class="token keyword">from</span> <span class="token string">"../utils/wrap2VirtualDom"</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> config<span class="token punctuation">,</span> children</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//定义 ref 和 key</span>
    <span class="token keyword">let</span> ref <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token comment">//config 不是 null</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        ref <span class="token operator">=</span> config<span class="token punctuation">.</span>ref <span class="token operator">||</span> <span class="token keyword">null</span>
        key <span class="token operator">=</span> config<span class="token punctuation">.</span>key <span class="token operator">||</span> <span class="token keyword">null</span>
        <span class="token keyword">delete</span> config<span class="token punctuation">.</span>ref
        <span class="token keyword">delete</span> config<span class="token punctuation">.</span>key
        <span class="token keyword">delete</span> config<span class="token punctuation">.</span>__source
        <span class="token keyword">delete</span> config<span class="token punctuation">.</span>__self
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token operator">...</span>config
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//判断子元素有多少个</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//子元素有多个</span>
        props<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>wrap2VirtualDom<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//子元素只有一个</span>
        props<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token function">wrap2VirtualDom</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token constant">REACT_ELEMENT</span><span class="token punctuation">,</span>
        type<span class="token punctuation">,</span>
        ref<span class="token punctuation">,</span>
        key<span class="token punctuation">,</span>
        props
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> React <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    createElement
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> React<span class="token punctuation">;</span></code></pre>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//src->utils->wrap2VirtualDom.js</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span><span class="token constant">REACT_ELEMENT</span><span class="token punctuation">,</span> <span class="token constant">REACT_TEXT</span><span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../constant"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">wrap2VirtualDom</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> element <span class="token operator">===</span> <span class="token string">'string'</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> element <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">&#123;</span>
        $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token constant">REACT_ELEMENT</span><span class="token punctuation">,</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token constant">REACT_TEXT</span><span class="token punctuation">,</span>
        <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token literal-property property">children</span><span class="token operator">:</span> element
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token operator">:</span> element
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> wrap2VirtualDom</code></pre>
]]></content>
      <categories>
        <category>框架</category>
        <category>react</category>
      </categories>
  </entry>
  <entry>
    <title>diff算法</title>
    <url>/2022/10/03/frame/React/diff%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="#1">diff算法</a></p>
<ul class="lvl-0">
<li class="lvl-4"><a href="#2">单节点</a></li>
<li class="lvl-4"><a href="#3">多节点</a>
<ul class="lvl-2">
<li class="lvl-6"><a href="#4">多节点newChildren与oldFiber都没遍历完</a>
<ul class="lvl-4">
<li class="lvl-8"><a href="#5">Demo1</a></li>
<li class="lvl-8"><a href="#6">Demo2</a></li>
</ul>
</li>
</ul>
</li>
<li class="lvl-4"><a href="#7">参考资料</a></li>
</ul>
<p id=1></p>
<h2 id="diff算法">diff算法</h2>
<p id=2></p>
<h3 id="单节点">单节点</h3>
<pre class="mermaid">graph TB;
上次更新时的Fiber节点是否存在对应DOM节点--是-->Dom节点是否可以复用
Dom节点是否可以复用--是-->将上次更新的Fiber节点的副本作为本次新生成的Fiber节点返回
Dom节点是否可以复用--否-->标记DOM需要被删除
标记DOM需要被删除-->新生成一个Fiber节点并返回
上次更新时的Fiber节点是否存在对应DOM节点--否-->新生成一个Fiber节点并返回</pre>
<p id=3></p>
<h3 id="多节点">多节点</h3>
<p>Diff算法可以是以下的设计思路：</p>
<ol>
<li class="lvl-3">
<p>判断当前节点的更新属于哪种情况</p>
</li>
<li class="lvl-3">
<p>如果是新增，执行新增逻辑</p>
</li>
<li class="lvl-3">
<p>如果是删除，执行删除逻辑</p>
</li>
<li class="lvl-3">
<p>如果是更新，执行更新逻辑但是由于不同的操作优先级不一样，所以无法使用上面的设计思路。</p>
</li>
</ol>
<p><strong>在开发中，相对于新增和删除，更新组件更加的频繁，所以Diff算法会优先判断当前节点是否属于更新。</strong></p>
<p>Diff算法的设计思路是整体逻辑遍历两轮：</p>
<ol>
<li class="lvl-3">
<p>第一轮遍历：处理<code>更新</code>的节点</p>
</li>
<li class="lvl-3">
<p>第二轮遍历：处理<code>不是更新</code>的节点</p>
</li>
</ol>
<p>第一轮遍历：</p>
<pre class="mermaid">graph TB;
subgraph 第一轮遍历
leti=0,遍历newChildren,将newChildreni与oldFiber比较,判断DOM节点是否可复用--可复用-->i++,继续比较newChildreni与oldFiber.sibling,可以复用则继续遍历
leti=0,遍历newChildren,将newChildreni与oldFiber比较,判断DOM节点是否可复用--key不同,不可复用-->立即跳出整个遍历
立即跳出整个遍历-->第一轮遍历结束
leti=0,遍历newChildren,将newChildreni与oldFiber比较,判断DOM节点是否可复用--key相同,type不同,不可复用-->会将oldFiber标记为DELETION,并继续遍历
i++,继续比较newChildreni与oldFiber.sibling,可以复用则继续遍历-->如果newChildren遍历完,或者oldFiber遍历完,跳出遍历
如果newChildren遍历完,或者oldFiber遍历完,跳出遍历-->第一轮遍历结束
end
subgraph 第二轮遍历
第二轮遍历开始-->newChildren与oldFiber同时遍历完-->diff算法结束
第二轮遍历开始-->newChildren没遍历完,oldFiber遍历完,需要增加节点-->遍历剩下的newChildren为生成的workInProgressfiber依次标记Placement
第二轮遍历开始-->newChildren遍历完,oldFiber没遍历完,需要删除节点-->需要遍历剩下的oldFiber,依次标记删除
第二轮遍历开始-->newChildren与oldFiber都没遍历完,节点在这次更新中改变了位置,最精髓难懂的部分
newChildren与oldFiber都没遍历完,节点在这次更新中改变了位置,最精髓难懂的部分-->将还未处理的oldFiber存入map中
将还未处理的oldFiber存入map中-->lastPlacedIndex为最后一个可复用节点在oldFiber中的位置,oldIndex表示遍历到的可复用节点在oldFiber中的位置
lastPlacedIndex为最后一个可复用节点在oldFiber中的位置,oldIndex表示遍历到的可复用节点在oldFiber中的位置--oldIndex大于等于lastPlacedIndex-->不移动位置,执行lastPlacedIndex=oldIndex
lastPlacedIndex为最后一个可复用节点在oldFiber中的位置,oldIndex表示遍历到的可复用节点在oldFiber中的位置--oldIndex小于lastPlacedIndex-->本次更新的节点向右移动
end
第一轮遍历结束-->第二轮遍历开始</pre>
<p id=4></p>
<h4 id="多节点newChildren与oldFiber都没遍历完">多节点newChildren与oldFiber都没遍历完</h4>
<p id=5></p>
<h5 id="Demo1">Demo1</h5>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">
<span class="token comment">// 之前</span>
abcd

<span class="token comment">// 之后</span>
acdb

<span class="token operator">===</span>第一轮遍历开始<span class="token operator">===</span>
a（之后）vs a（之前）  
key不变，可复用
此时 a 对应的oldFiber（之前的a）在之前的数组（abcd）中索引为<span class="token number">0</span>
所以 lastPlacedIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

继续第一轮遍历<span class="token operator">...</span>

c（之后）vs b（之前）  
key改变，不能复用，跳出第一轮遍历
此时 lastPlacedIndex <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token operator">===</span>第一轮遍历结束<span class="token operator">===</span>

<span class="token operator">===</span>第二轮遍历开始<span class="token operator">===</span>
newChildren <span class="token operator">===</span> cdb，没用完，不需要执行删除旧节点
oldFiber <span class="token operator">===</span> bcd，没用完，不需要执行插入新节点

将剩余oldFiber（bcd）保存为map

<span class="token comment">// 当前oldFiber：bcd</span>
<span class="token comment">// 当前newChildren：cdb</span>

继续遍历剩余newChildren

key <span class="token operator">===</span> c 在 oldFiber中存在
<span class="token keyword">const</span> oldIndex <span class="token operator">=</span> c（之前）<span class="token punctuation">.</span>index<span class="token punctuation">;</span>
此时 oldIndex <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">// 之前节点为 abcd，所以c.index === 2</span>
比较 oldIndex 与 lastPlacedIndex<span class="token punctuation">;</span>

如果 oldIndex <span class="token operator">>=</span> lastPlacedIndex 代表该可复用节点不需要移动
并将 lastPlacedIndex <span class="token operator">=</span> oldIndex<span class="token punctuation">;</span>
如果 oldIndex <span class="token operator">&lt;</span> lastplacedIndex 该可复用节点之前插入的位置索引小于这次更新需要插入的位置索引，代表该节点需要向右移动

在例子中，oldIndex <span class="token number">2</span> <span class="token operator">></span> lastPlacedIndex <span class="token number">0</span>，
则 lastPlacedIndex <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
c节点位置不变

继续遍历剩余newChildren

<span class="token comment">// 当前oldFiber：bd</span>
<span class="token comment">// 当前newChildren：db</span>

key <span class="token operator">===</span> d 在 oldFiber中存在
<span class="token keyword">const</span> oldIndex <span class="token operator">=</span> d（之前）<span class="token punctuation">.</span>index<span class="token punctuation">;</span>
oldIndex <span class="token number">3</span> <span class="token operator">></span> lastPlacedIndex <span class="token number">2</span> <span class="token comment">// 之前节点为 abcd，所以d.index === 3</span>
则 lastPlacedIndex <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
d节点位置不变

继续遍历剩余newChildren

<span class="token comment">// 当前oldFiber：b</span>
<span class="token comment">// 当前newChildren：b</span>

key <span class="token operator">===</span> b 在 oldFiber中存在
<span class="token keyword">const</span> oldIndex <span class="token operator">=</span> b（之前）<span class="token punctuation">.</span>index<span class="token punctuation">;</span>
oldIndex <span class="token number">1</span> <span class="token operator">&lt;</span> lastPlacedIndex <span class="token number">3</span> <span class="token comment">// 之前节点为 abcd，所以b.index === 1</span>
则 b节点需要向右移动
<span class="token operator">===</span>第二轮遍历结束<span class="token operator">===</span>

最终acd <span class="token number">3</span>个节点都没有移动，b节点被标记为移动</code></pre>
<p id=6></p>
<h5 id="Demo2">Demo2</h5>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 之前</span>
abcd

<span class="token comment">// 之后</span>
dabc

<span class="token operator">===</span>第一轮遍历开始<span class="token operator">===</span>
d（之后）vs a（之前）  
key改变，不能复用，跳出遍历
<span class="token operator">===</span>第一轮遍历结束<span class="token operator">===</span>

<span class="token operator">===</span>第二轮遍历开始<span class="token operator">===</span>
newChildren <span class="token operator">===</span> dabc，没用完，不需要执行删除旧节点
oldFiber <span class="token operator">===</span> abcd，没用完，不需要执行插入新节点

将剩余oldFiber（abcd）保存为map

继续遍历剩余newChildren

<span class="token comment">// 当前oldFiber：abcd</span>
<span class="token comment">// 当前newChildren dabc</span>

key <span class="token operator">===</span> d 在 oldFiber中存在
<span class="token keyword">const</span> oldIndex <span class="token operator">=</span> d（之前）<span class="token punctuation">.</span>index<span class="token punctuation">;</span>
此时 oldIndex <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 之前节点为 abcd，所以d.index === 3</span>
比较 oldIndex 与 lastPlacedIndex<span class="token punctuation">;</span>
oldIndex <span class="token number">3</span> <span class="token operator">></span> lastPlacedIndex <span class="token number">0</span>
则 lastPlacedIndex <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
d节点位置不变

继续遍历剩余newChildren

<span class="token comment">// 当前oldFiber：abc</span>
<span class="token comment">// 当前newChildren abc</span>

key <span class="token operator">===</span> a 在 oldFiber中存在
<span class="token keyword">const</span> oldIndex <span class="token operator">=</span> a（之前）<span class="token punctuation">.</span>index<span class="token punctuation">;</span> <span class="token comment">// 之前节点为 abcd，所以a.index === 0</span>
此时 oldIndex <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>
比较 oldIndex 与 lastPlacedIndex<span class="token punctuation">;</span>
oldIndex <span class="token number">0</span> <span class="token operator">&lt;</span> lastPlacedIndex <span class="token number">3</span>
则 a节点需要向右移动

继续遍历剩余newChildren

<span class="token comment">// 当前oldFiber：bc</span>
<span class="token comment">// 当前newChildren bc</span>

key <span class="token operator">===</span> b 在 oldFiber中存在
<span class="token keyword">const</span> oldIndex <span class="token operator">=</span> b（之前）<span class="token punctuation">.</span>index<span class="token punctuation">;</span> <span class="token comment">// 之前节点为 abcd，所以b.index === 1</span>
此时 oldIndex <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">;</span>
比较 oldIndex 与 lastPlacedIndex<span class="token punctuation">;</span>
oldIndex <span class="token number">1</span> <span class="token operator">&lt;</span> lastPlacedIndex <span class="token number">3</span>
则 b节点需要向右移动

继续遍历剩余newChildren

<span class="token comment">// 当前oldFiber：c</span>
<span class="token comment">// 当前newChildren c</span>

key <span class="token operator">===</span> c 在 oldFiber中存在
<span class="token keyword">const</span> oldIndex <span class="token operator">=</span> c（之前）<span class="token punctuation">.</span>index<span class="token punctuation">;</span> <span class="token comment">// 之前节点为 abcd，所以c.index === 2</span>
此时 oldIndex <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">;</span>
比较 oldIndex 与 lastPlacedIndex<span class="token punctuation">;</span>
oldIndex <span class="token number">2</span> <span class="token operator">&lt;</span> lastPlacedIndex <span class="token number">3</span>
则 c节点需要向右移动

<span class="token operator">===</span>第二轮遍历结束<span class="token operator">===</span></code></pre>
<p id=7></p>
<h3 id="参考资料">参考资料</h3>
<p>[1]<a href="https://react.iamkasong.com/">React技术揭秘</a></p>
]]></content>
      <categories>
        <category>框架</category>
        <category>react</category>
      </categories>
  </entry>
  <entry>
    <title>Babel</title>
    <url>/2022/10/11/frame/babel/babel%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="Babel">Babel</h2>
<h3 id="Babel的介绍">Babel的介绍</h3>
<p>用来把代码中的 esnext 的新的语法、typescript 和 flow 的语法转成基于目标环境支持的语法的实现。同时Babel暴露了api让开发者可以进行特定用途的转换。除此以外，还可以做各种静态分析。</p>
<h3 id="Babel编译流程">Babel编译流程</h3>
<p>Babel是一个转译器。编译器是指<code>高级语言</code>到<code>低级语言</code>的转换工具转译器是指<code>高级语言</code>到<code>高级语言</code>的转换工具<br>
babel整体转译流程分为三步：</p>
<ol>
<li class="lvl-3">
<p>parse：通过<code>parser</code>把源码转成抽象语法树（AST）（之所以叫抽象语法树是因为省略掉了源码中的分隔符、注释等内容）</p>
</li>
<li class="lvl-3">
<p>transform：遍历<code>AST</code>调用各种<code>transform</code>插件对<code>AST</code>进行增删改</p>
</li>
<li class="lvl-3">
<p>generate：把转换后的<code>AST</code>打印成目标代码，并生成<code>sourcemap</code></p>
</li>
</ol>
<h3 id="AST">AST</h3>
<p><code>AST</code>是对源码的抽象。<code>字面量、标识符、表达式、语句、模块语法、class语法</code>都有各自的不同的<code>AST</code>。每种不同的<code>AST</code>也有公共的属性：</p>
<ol>
<li class="lvl-3">
<p>type:AST的节点类型</p>
</li>
<li class="lvl-3">
<p><code>start、end、loc</code>：<code>start</code>和<code>end</code>代表该节点在源码中的开始和结束下标。而<code>loc</code>属性是一个对象，有<code>line</code>和<code>column</code>属性分别记录开始和结束的行列号。<br>
<img src="/images/Babel/AST.png" alt="" loading="lazy"></p>
</li>
<li class="lvl-3">
<p>leadingComments、innerComments、trailingComments： 表示开始的注释、中间的注 释、结尾的注释，每个 AST 节点中都可能存在注释，而且可能在开始、中间、结束这三种位置，想拿到某个 AST 的注释就通过这三个属性。<br>
<img src="/images/Babel/AST2.png" alt="" loading="lazy"></p>
</li>
</ol>
<h3 id="Babel的一些API">Babel的一些API</h3>
<ol>
<li class="lvl-3">
<p>parse</p>
<ul class="lvl-2">
<li class="lvl-5">@babel/parser：把源码转成 AST</li>
</ul>
</li>
<li class="lvl-3">
<p>transform</p>
<ul class="lvl-2">
<li class="lvl-5">@babel/traverse：可以遍历 AST，并调用 visitor 函数修改 AST</li>
<li class="lvl-5">@babel/types：visitor 函数对 AST 的判断、创建、修改等</li>
<li class="lvl-5">@babel/template：批量创建 AST</li>
</ul>
</li>
<li class="lvl-3">
<p>generate</p>
<ul class="lvl-2">
<li class="lvl-5">@babel/generator：把 AST 打印为目标代码字符串，同时生成 sourcemap</li>
</ul>
</li>
<li class="lvl-3">
<p>其他</p>
<ul class="lvl-2">
<li class="lvl-5">@babel/code-frame：中途遇到错误想打印代码位置的时候</li>
</ul>
</li>
</ol>
<h3 id="插入函数调用参数">插入函数调用参数</h3>
<p><strong>需求一：</strong><br>
需要将<code>console.log(1)</code>转换成<code>console.log('文件名（行号，列号）：',1)</code></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> parser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@babel/parser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> traverse <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@babel/traverse'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span>
<span class="token keyword">const</span> generate <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@babel/generator'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span>
<span class="token keyword">const</span> types <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@babel/types'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> sourceCode <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    console.log(1);

    function func() &#123;
      console.info(2);
    &#125;

    export default class Clazz &#123;
      say() &#123;
        console.debug(3);
      &#125;
      render() &#123;
        return &lt;div>&#123;console.error(4)&#125;&lt;/div>
      &#125;
    &#125;
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

<span class="token comment">//parser流程，把源码转成抽象语法树AST</span>
<span class="token keyword">const</span> ast <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>sourceCode<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">'unambiguous'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'jsx'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//开启jsx</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//traverse流程，遍历AST调用各种transform插件对AST进行增删改</span>
<span class="token comment">/*
* aim:我们想要把console.log('111')变成console.log('文件名（行号，列号）：','111');
* 这就需要我们在traverse流程中调用各种插件对AST进行修改
* */</span>
<span class="token comment">//判断是否是console的API</span>
<span class="token keyword">const</span> targetCalleeName <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">,</span><span class="token string">'info'</span><span class="token punctuation">,</span><span class="token string">'error'</span><span class="token punctuation">,</span><span class="token string">'debug'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">console.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>item<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">traverse</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    <span class="token function">CallExpression</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//使用generate将callee的AST转换成字符串</span>
        <span class="token comment">// const calleeName = generate(path.code.callee).code;</span>

        <span class="token comment">//也可以使用path的toString方法将callee的AST转换成字符串</span>
        <span class="token keyword">const</span> calleeName <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'callee'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//检测console的API</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>targetCalleeName<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>calleeName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//获取行和列</span>
            <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>line<span class="token punctuation">,</span> column<span class="token punctuation">&#125;</span> <span class="token operator">=</span> path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>loc<span class="token punctuation">.</span>start<span class="token punctuation">;</span>
            <span class="token comment">//修改console的API输出</span>
            path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>arguments<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span><span class="token function">stringLiteral</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">filename:(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>line<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>column<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//generate流程，把转换后的AST打印成目标代码，并生成sourcemap</span>
<span class="token keyword">const</span> <span class="token punctuation">&#123;</span>code<span class="token punctuation">,</span> map<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><strong>需求二：</strong><br>
将</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>转换成</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件名（行号，列号）：'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>要注意的点：jsx表达式不是在前面插入一个节点，而是要把整体替换成一个数组表达式，因为jsx中只支持写单个表达式。</p>
<pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//将</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token comment">//转换成</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件名（行号，列号）：'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> parser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@babel/parser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> traverse <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@babel/traverse'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span>
<span class="token keyword">const</span> generate <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@babel/generator'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span>
<span class="token keyword">const</span> types <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@babel/types'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@babel/template'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span>

<span class="token keyword">const</span> sourceCode <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    console.log(1);

    function func() &#123;
      console.info(2);
    &#125;

    export default class Clazz &#123;
      say() &#123;
        console.debug(3);
      &#125;
      render() &#123;
        return &lt;div>&#123;console.error(4)&#125;&lt;/div>
      &#125;
    &#125;
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

<span class="token comment">//parser流程，把源码转成抽象语法树AST</span>
<span class="token keyword">const</span> ast <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>sourceCode<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">'unambiguous'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'jsx'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//开启jsx</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//traverse流程，遍历AST调用各种transform插件对AST进行增删改</span>
<span class="token comment">/*
* aim:我们想要把console.log('111')变成console.log('文件名（行号，列号）：','111');
* 这就需要我们在traverse流程中调用各种插件对AST进行修改
* */</span>
<span class="token comment">//判断是否是console的API</span>
<span class="token keyword">const</span> targetCalleeName <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">,</span><span class="token string">'info'</span><span class="token punctuation">,</span><span class="token string">'error'</span><span class="token punctuation">,</span><span class="token string">'debug'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">console.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>item<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">traverse</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    <span class="token function">CallExpression</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>isNew<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>

        <span class="token comment">//使用generate将callee的AST转换成字符串</span>
        <span class="token comment">// const calleeName = generate(path.code.callee).code;</span>

        <span class="token comment">//也可以使用path的toString方法将callee的AST转换成字符串</span>
        <span class="token keyword">const</span> calleeName <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'callee'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//检测console的API</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>targetCalleeName<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>calleeName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//获取行和列</span>
            <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>line<span class="token punctuation">,</span> column<span class="token punctuation">&#125;</span> <span class="token operator">=</span> path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>loc<span class="token punctuation">.</span>start<span class="token punctuation">;</span>

            <span class="token comment">//生成console.log('文件名（行号，列号）：')字符串</span>
            <span class="token keyword">const</span> newNode <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">expression</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">console.log("filename: (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>line<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>column<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)")</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            newNode<span class="token punctuation">.</span>isNew <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token comment">//判断是不是jsx</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">findParent</span><span class="token punctuation">(</span><span class="token parameter">path</span> <span class="token operator">=></span> path<span class="token punctuation">.</span><span class="token function">isJSXElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token comment">//将console的API转换成数组，替换原来的console的API</span>
                path<span class="token punctuation">.</span><span class="token function">replaceWith</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span><span class="token function">arrayExpression</span><span class="token punctuation">(</span><span class="token punctuation">[</span>newNode<span class="token punctuation">,</span>path<span class="token punctuation">.</span>node<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                path<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">//在console的API之前插入</span>
                path<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//generate流程，把转换后的AST打印成目标代码，并生成sourcemap</span>
<span class="token keyword">const</span> <span class="token punctuation">&#123;</span>code<span class="token punctuation">,</span> map<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="JS-Parser的历史">JS Parser的历史</h3>
<h3 id="tarverse的path、scope、visitor">tarverse的path、scope、visitor</h3>
<p>关于transform的流程，babel会递归遍历AST，在遍历过程中使用不同的visitor函数来实现transform，这种设计模式叫做访问者模式。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">path <span class="token punctuation">&#123;</span>
    <span class="token comment">// 属性：</span>
   path<span class="token punctuation">.</span>node <span class="token comment">//当前 AST 节点</span>
   path<span class="token punctuation">.</span>parent <span class="token comment">//父 AST 节点</span>
   path<span class="token punctuation">.</span>parentPath <span class="token comment">//父 AST 节点的 path</span>
   path<span class="token punctuation">.</span>scope <span class="token comment">//作用域</span>
   path<span class="token punctuation">.</span>hub <span class="token comment">//可以通过 path.hub.file 拿到最外层 File 对象， path.hub.getScope 拿到最外层作用域，path.hub.getCode 拿到源码字符串</span>
   path<span class="token punctuation">.</span>container <span class="token comment">//当前 AST 节点所在的父节点属性的属性值</span>
   path<span class="token punctuation">.</span>key <span class="token comment">//当前 AST 节点所在父节点属性的属性名或所在数组的下标</span>
   path<span class="token punctuation">.</span>listkey <span class="token comment">//当前 AST 节点所在父节点属性的属性值为数组时 listkey 为该属性名，否则为 undefined</span>
    
    <span class="token comment">// 方法</span>
   <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">//获取某个属性的 path</span>
   <span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token comment">//设置某个属性的值</span>
   <span class="token function">getSibling</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">//获取某个下标的兄弟节点</span>
   <span class="token function">getNextSibling</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//获取下一个兄弟节点</span>
   <span class="token function">getPrevSibling</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//获取上一个兄弟节点</span>
   <span class="token function">getAllPrevSiblings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//获取之前的所有兄弟节点</span>
   <span class="token function">getAllNextSiblings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//获取之后的所有兄弟节点</span>
   <span class="token function">find</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token comment">//从当前节点到根节点来查找节点（包括当前节点），调用 callback（传入 path）来决定是否终止查找</span>
   <span class="token function">findParent</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token comment">//从当前节点到根节点来查找节点（不包括当前节点），调用 callback（传入 path）来决定是否终止查找</span>
   <span class="token function">inList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//判断节点是否在数组中，如果 container 为数组，也就是有 listkey 的时候，返回 true</span>
   <span class="token function">isXxx</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span> <span class="token comment">//判断当前节点是否是某个类型，可以传入属性和属性值进一步判断，比如path.isIdentifier(&#123;name: 'a'&#125;)</span>
   <span class="token function">assertXxx</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span> <span class="token comment">//同 isXxx，但是不返回布尔值，而是抛出异常</span>
   <span class="token function">insertBefore</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span> <span class="token comment">//在之前插入节点，可以是单个节点或者节点数组</span>
   <span class="token function">insertAfter</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span> <span class="token comment">//在之后插入节点，可以是单个节点或者节点数组</span>
   <span class="token function">replaceWith</span><span class="token punctuation">(</span>replacement<span class="token punctuation">)</span> <span class="token comment">//用某个节点替换当前节点</span>
   <span class="token function">replaceWithMultiple</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span> <span class="token comment">//用多个节点替换当前节点</span>
   <span class="token function">replaceWithSourceString</span><span class="token punctuation">(</span>replacement<span class="token punctuation">)</span> <span class="token comment">//解析源码成 AST，然后替换当前节点</span>
   <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//删除当前节点</span>
   <span class="token function">traverse</span><span class="token punctuation">(</span>visitor<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token comment">//遍历当前节点的子节点，传入 visitor 和 state（state 是不同节点间传递数据的方式）</span>
   <span class="token function">skip</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//跳过当前节点的子节点的遍历</span>
   <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//结束所有遍历</span>
<span class="token punctuation">&#125;</span></code></pre>
<h3 id="Generator和SourceMap">Generator和SourceMap</h3>
<p>generate把AST打印成字符串，对不同AST节点做不同的处理。在这个过程中抽象语法树中省略的一些分隔符重新加载回来。</p>
<h3 id="preset">preset</h3>
<p>plugin的格式</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 返回对象的函数</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">api<span class="token punctuation">,</span> options<span class="token punctuation">,</span> dirname</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">inherits</span><span class="token operator">:</span> parentPlugin<span class="token punctuation">,</span>
      <span class="token function">manipulateOptions</span><span class="token punctuation">(</span><span class="token parameter">options<span class="token punctuation">,</span> parserOptions</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
         options<span class="token punctuation">.</span>xxx <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token function">pre</span><span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">visitor</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
         <span class="token function">StringLiteral</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token function">post</span><span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> </code></pre>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> plugin <span class="token operator">=</span>  <span class="token punctuation">&#123;</span>
    <span class="token function">pre</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">visitor</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token function">StringLiteral</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function">post</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>plugin 是单个转换功能的实现，当 plugin 比较多或者 plugin 的 options 比较多的时候就会导致使用成本升高。这时候可以封装成一个 preset，用户可以通过 preset 来批量引入 plugin 并进行一些配置。preset 就是对 babel 配置的一层封装。</p>
<h3 id="自动埋点"><a href="../../Test/frameTest/Babel/plugin/exercize-auto-track">自动埋点</a></h3>
<h3 id="Link"><a href="../../Test/frameTest/Babel/plugin/Link">Link</a></h3>
]]></content>
      <categories>
        <category>框架</category>
        <category>babel</category>
      </categories>
  </entry>
  <entry>
    <title>babel实现一个js解析器</title>
    <url>/2022/10/11/frame/babel/babel%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAjs%E8%A7%A3%E6%9E%90%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="babel实现一个js解析器">babel实现一个js解析器</h2>
<h3 id="v8的流程">v8的流程</h3>
<ol>
<li class="lvl-3">
<p>parser 负责把源码 parse 成 AST。</p>
</li>
<li class="lvl-3">
<p>ignation 解释器负责把 AST 转成字节码，然后解释执行</p>
</li>
<li class="lvl-3">
<p>turbofan 可以把代码编译成机器码，直接执行</p>
</li>
<li class="lvl-3">
<p>gc 负责堆内存的垃圾回收<br>
<img src="" alt="v8流程图" loading="lazy"></p>
</li>
</ol>
<p>最早的v8是没有字节码的，parser直接传递给解析器，我们这一届就是要来实现这种js解析器。</p>
<h3 id="思路分析">思路分析</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span></code></pre>
<p>上面代码对应的AST是</p>
<details>
<summary>AST的json格式，点击查看</summary>
<pre><code>
&#123;
  "type": "File",
  "start": 0,
  "end": 20,
  "loc": &#123;
    "start": &#123;
      "line": 1,
      "column": 0,
      "index": 0
    &#125;,
    "end": &#123;
      "line": 1,
      "column": 20,
      "index": 20
    &#125;
  &#125;,
  "errors": [],
  "program": &#123;
    "type": "Program",
    "start": 0,
    "end": 20,
    "loc": &#123;
      "start": &#123;
        "line": 1,
        "column": 0,
        "index": 0
      &#125;,
      "end": &#123;
        "line": 1,
        "column": 20,
        "index": 20
      &#125;
    &#125;,
    "sourceType": "module",
    "interpreter": null,
    "body": [
      &#123;
        "type": "VariableDeclaration",
        "start": 0,
        "end": 20,
        "loc": &#123;
          "start": &#123;
            "line": 1,
            "column": 0,
            "index": 0
          &#125;,
          "end": &#123;
            "line": 1,
            "column": 20,
            "index": 20
          &#125;
        &#125;,
        "declarations": [
          &#123;
            "type": "VariableDeclarator",
            "start": 6,
            "end": 19,
            "loc": &#123;
              "start": &#123;
                "line": 1,
                "column": 6,
                "index": 6
              &#125;,
              "end": &#123;
                "line": 1,
                "column": 19,
                "index": 19
              &#125;
            &#125;,
            "id": &#123;
              "type": "Identifier",
              "start": 6,
              "end": 7,
              "loc": &#123;
                "start": &#123;
                  "line": 1,
                  "column": 6,
                  "index": 6
                &#125;,
                "end": &#123;
                  "line": 1,
                  "column": 7,
                  "index": 7
                &#125;,
                "identifierName": "a"
              &#125;,
              "name": "a"
            &#125;,
            "init": &#123;
              "type": "BinaryExpression",
              "start": 10,
              "end": 19,
              "loc": &#123;
                "start": &#123;
                  "line": 1,
                  "column": 10,
                  "index": 10
                &#125;,
                "end": &#123;
                  "line": 1,
                  "column": 19,
                  "index": 19
                &#125;
              &#125;,
              "left": &#123;
                "type": "BinaryExpression",
                "start": 10,
                "end": 15,
                "loc": &#123;
                  "start": &#123;
                    "line": 1,
                    "column": 10,
                    "index": 10
                  &#125;,
                  "end": &#123;
                    "line": 1,
                    "column": 15,
                    "index": 15
                  &#125;
                &#125;,
                "left": &#123;
                  "type": "NumericLiteral",
                  "start": 10,
                  "end": 11,
                  "loc": &#123;
                    "start": &#123;
                      "line": 1,
                      "column": 10,
                      "index": 10
                    &#125;,
                    "end": &#123;
                      "line": 1,
                      "column": 11,
                      "index": 11
                    &#125;
                  &#125;,
                  "extra": &#123;
                    "rawValue": 1,
                    "raw": "1"
                  &#125;,
                  "value": 1
                &#125;,
                "operator": "+",
                "right": &#123;
                  "type": "NumericLiteral",
                  "start": 14,
                  "end": 15,
                  "loc": &#123;
                    "start": &#123;
                      "line": 1,
                      "column": 14,
                      "index": 14
                    &#125;,
                    "end": &#123;
                      "line": 1,
                      "column": 15,
                      "index": 15
                    &#125;
                  &#125;,
                  "extra": &#123;
                    "rawValue": 2,
                    "raw": "2"
                  &#125;,
                  "value": 2
                &#125;
              &#125;,
              "operator": "+",
              "right": &#123;
                "type": "NumericLiteral",
                "start": 18,
                "end": 19,
                "loc": &#123;
                  "start": &#123;
                    "line": 1,
                    "column": 18,
                    "index": 18
                  &#125;,
                  "end": &#123;
                    "line": 1,
                    "column": 19,
                    "index": 19
                  &#125;
                &#125;,
                "extra": &#123;
                  "rawValue": 3,
                  "raw": "3"
                &#125;,
                "value": 3
              &#125;
            &#125;
          &#125;
        ],
        "kind": "const"
      &#125;
    ],
    "directives": []
  &#125;,
  "comments": []
&#125;
</code></pre>
</details>
<p>下面是解析遍历赋值的完整代码，也可以在<a href="../../Test/frameTest/Babel/plugin/v8/index.js">github</a>上看完整代码</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span>  parser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@babel/parser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> codeFrameColumns <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@babel/code-frame'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> sourceCode <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
   const a = 1 + 2;
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> ast <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>sourceCode<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">'unambiguous'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> evaluator <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">const</span> astInterpreters <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token function">Program</span> <span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> scope</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            node<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                <span class="token function">evaluate</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function">VariableDeclaration</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> scope</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            node<span class="token punctuation">.</span>declarations<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                <span class="token function">evaluate</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function">VariableDeclarator</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> scope</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> declareName <span class="token operator">=</span> <span class="token function">evaluate</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>scope<span class="token punctuation">[</span>declareName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">'duplicate declare variable：'</span> <span class="token operator">+</span> declareName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                scope<span class="token punctuation">[</span>declareName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">evaluate</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>init<span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function">ExpressionStatement</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> scope</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token function">evaluate</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>expression<span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function">BinaryExpression</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> scope</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>type<span class="token punctuation">)</span>
            <span class="token keyword">const</span> leftValue <span class="token operator">=</span> <span class="token function">evaluate</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> rightValue <span class="token operator">=</span> <span class="token function">evaluate</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
            <span class="token keyword">switch</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>operator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token operator">:</span>
                    <span class="token keyword">return</span> leftValue <span class="token operator">+</span> rightValue<span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token operator">:</span>
                    <span class="token keyword">return</span> leftValue <span class="token operator">-</span> rightValue<span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token operator">:</span>
                    <span class="token keyword">return</span> leftValue <span class="token operator">*</span> rightValue<span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token operator">:</span>
                    <span class="token keyword">return</span> leftValue <span class="token operator">/</span> rightValue<span class="token punctuation">;</span>
                <span class="token keyword">default</span><span class="token operator">:</span>
                    <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">'upsupported operator：'</span> <span class="token operator">+</span> node<span class="token punctuation">.</span>operator<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function">Identifier</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> scope</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> node<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function">NumericLiteral</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> scope</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> node<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">evaluate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> scope</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> astInterpreters<span class="token punctuation">[</span>node<span class="token punctuation">.</span>type<span class="token punctuation">]</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>message <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'astInterpreters[node.type] is not a function'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'unsupported ast type: '</span> <span class="token operator">+</span> node<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
                console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token function">codeFrameColumns</span><span class="token punctuation">(</span>sourceCode<span class="token punctuation">,</span> node<span class="token punctuation">.</span>loc<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
                    <span class="token literal-property property">highlightCode</span><span class="token operator">:</span> <span class="token boolean">true</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
                console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token function">codeFrameColumns</span><span class="token punctuation">(</span>sourceCode<span class="token punctuation">,</span> node<span class="token punctuation">.</span>loc<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
                    <span class="token literal-property property">highlightCode</span><span class="token operator">:</span> <span class="token boolean">true</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        evaluate
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> globalScope <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
evaluator<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>ast<span class="token punctuation">.</span>program<span class="token punctuation">,</span> globalScope<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>globalScope<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>我们改进一下，将函数也解析，下面是解析遍历赋值和函数的完整代码，也可以在<a href="../../Test/frameTest/Babel/plugin/v8/function.js">github</a>上看完整代码</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span>  parser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@babel/parser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> codeFrameColumns <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@babel/code-frame'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> chalk <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'chalk'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> sourceCode <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
   const  a = 2;
   function add(a, b) &#123;
    return a + b;
   &#125;
   console.log(add(1, 2));
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> ast <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>sourceCode<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">'unambiguous'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Scope</span> <span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">parentScope</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> parentScope<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>declarations <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">set</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>declarations<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">getLocal</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>declarations<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLocal</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            res <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">has</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLocal</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">getIdentifierValue</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> scope</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'Identifier'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> scope<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">evaluate</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> evaluator <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">const</span> astInterpreters <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token function">Program</span> <span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> scope</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            node<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                <span class="token function">evaluate</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function">VariableDeclaration</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> scope</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            node<span class="token punctuation">.</span>declarations<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                <span class="token function">evaluate</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function">VariableDeclarator</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> scope</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> declareName <span class="token operator">=</span> <span class="token function">evaluate</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>scope<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>declareName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">'duplicate declare variable：'</span> <span class="token operator">+</span> declareName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                scope<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>declareName<span class="token punctuation">,</span> <span class="token function">evaluate</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>init<span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function">ExpressionStatement</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> scope</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token function">evaluate</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>expression<span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function">MemberExpression</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> scope</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> obj <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">evaluate</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>object<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> obj<span class="token punctuation">[</span><span class="token function">evaluate</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>property<span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function">FunctionDeclaration</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> scope</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> declareName <span class="token operator">=</span> <span class="token function">evaluate</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>scope<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>declareName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">'duplicate declare variable：'</span> <span class="token operator">+</span> declareName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                scope<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>declareName<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">const</span> funcScope <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    funcScope<span class="token punctuation">.</span>parent <span class="token operator">=</span> scope<span class="token punctuation">;</span>

                    node<span class="token punctuation">.</span>params<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                        funcScope<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">,</span> args<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    funcScope<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'this'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token function">evaluate</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>body<span class="token punctuation">,</span> funcScope<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function">ReturnStatement</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> scope</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token function">evaluate</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>argument<span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function">BlockStatement</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> scope</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> node<span class="token punctuation">.</span>body<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>body<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'ReturnStatement'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">return</span> <span class="token function">evaluate</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>body<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token function">evaluate</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>body<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function">CallExpression</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> scope</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> args <span class="token operator">=</span> node<span class="token punctuation">.</span>arguments<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'Identifier'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">return</span> scope<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">return</span> <span class="token function">evaluate</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>callee<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'MemberExpression'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">evaluate</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>callee<span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">evaluate</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>callee<span class="token punctuation">.</span>object<span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">const</span> fn <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">evaluate</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>callee<span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function">BinaryExpression</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> scope</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> leftValue <span class="token operator">=</span> <span class="token function">getIdentifierValue</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> rightValue <span class="token operator">=</span> <span class="token function">getIdentifierValue</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
            <span class="token keyword">switch</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>operator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token operator">:</span>
                    <span class="token keyword">return</span> leftValue <span class="token operator">+</span> rightValue<span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token operator">:</span>
                    <span class="token keyword">return</span> leftValue <span class="token operator">-</span> rightValue<span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token operator">:</span>
                    <span class="token keyword">return</span> leftValue <span class="token operator">*</span> rightValue<span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token operator">:</span>
                    <span class="token keyword">return</span> leftValue <span class="token operator">/</span> rightValue<span class="token punctuation">;</span>
                <span class="token keyword">default</span><span class="token operator">:</span>
                    <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">'upsupported operator：'</span> <span class="token operator">+</span> node<span class="token punctuation">.</span>operator<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function">Identifier</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> scope</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> node<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function">NumericLiteral</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> scope</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> node<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">evaluate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> scope</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> astInterpreters<span class="token punctuation">[</span>node<span class="token punctuation">.</span>type<span class="token punctuation">]</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>message <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'astInterpreters[node.type] is not a function'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'unsupported ast type: '</span> <span class="token operator">+</span> node<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
                console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token function">codeFrameColumns</span><span class="token punctuation">(</span>sourceCode<span class="token punctuation">,</span> node<span class="token punctuation">.</span>loc<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
                    <span class="token literal-property property">highlightCode</span><span class="token operator">:</span> <span class="token boolean">true</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">+</span> <span class="token string">':'</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
                console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token function">codeFrameColumns</span><span class="token punctuation">(</span>sourceCode<span class="token punctuation">,</span> node<span class="token punctuation">.</span>loc<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
                    <span class="token literal-property property">highlightCode</span><span class="token operator">:</span> <span class="token boolean">true</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        evaluate
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> globalScope <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
globalScope<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'console'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">log</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chalk<span class="token punctuation">.</span><span class="token function">green</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chalk<span class="token punctuation">.</span><span class="token function">red</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chalk<span class="token punctuation">.</span><span class="token function">orange</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
evaluator<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>ast<span class="token punctuation">.</span>program<span class="token punctuation">,</span> globalScope<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
]]></content>
      <categories>
        <category>框架</category>
        <category>babel</category>
      </categories>
  </entry>
  <entry>
    <title>Babel编译流程</title>
    <url>/2022/10/11/frame/babel/babel%E7%BC%96%E8%AF%91%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="Babel编译流程">Babel编译流程</h3>
<p>Babel是一个转译器。编译器是指<code>高级语言</code>到<code>低级语言</code>的转换工具转译器是指<code>高级语言</code>到<code>高级语言</code>的转换工具<br>
babel整体转译流程分为三步：</p>
<ol>
<li class="lvl-3">
<p>parse：通过<code>parser</code>把源码转成抽象语法树（AST）（之所以叫抽象语法树是因为省略掉了源码中的分隔符、注释等内容）</p>
</li>
<li class="lvl-3">
<p>transform：遍历<code>AST</code>调用各种<code>transform</code>插件对<code>AST</code>进行增删改</p>
</li>
<li class="lvl-3">
<p>generate：把转换后的<code>AST</code>打印成目标代码，并生成<code>sourcemap</code></p>
</li>
</ol>
<p>babel7把这些功能放入了不同的包里面：</p>
<p><strong>parse阶段</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>@babel/parser</code> 解析源码成 AST</p>
</li>
</ul>
<p><strong>transform阶段</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>@babel/traverse</code> 遍历 AST 并调用 visitor 函数</p>
</li>
<li class="lvl-2">
<p><code>@babel/types</code> 创建、判断 AST</p>
</li>
<li class="lvl-2">
<p><code>@babel/template</code> 根据模块批量创建 AST</p>
</li>
</ul>
<p><strong>generate阶段</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>@babel/generate</code> 打印 AST，生成目标代码和 sorucemap</p>
</li>
</ul>
<p>babel整体功能入口是在</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>@babel/core</code> 解析配置、应用 plugin、preset，整体整体编译流程</p>
</li>
</ul>
<p>插件和插件之间的一些公共函数</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>@babel/helpers</code> 用于转换 es next 代码需要的通过模板创建的 AST，比如 _typeof、_defineProperties 等</p>
</li>
<li class="lvl-2">
<p><code>@babel/helper-xxx</code> 其他的插件之间共享的用于操作 AST 的公共函数</p>
</li>
</ul>
<p>运行时的公共函数</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>@babel/runtime</code> 主要是包含 corejs、helpers、regenerator 这 3 部分</p>
<ol>
<li class="lvl-7">helper： helper 函数的运行时版本（不是通过 AST 注入了，而是运行时引入代码）</li>
<li class="lvl-7">corejs： es next 的 api 的实现，corejs 2 只支持静态方法，corejs 3 还支持实例方法</li>
<li class="lvl-7">regenerator：async await 的实现，由 facebook 维护</li>
</ol>
</li>
<li class="lvl-2">
<p><code>@babel/cli babel</code> 的命令行工具，支持通过 glob 字符串来编译多个文件</p>
</li>
</ul>
]]></content>
      <categories>
        <category>框架</category>
        <category>babel</category>
      </categories>
  </entry>
  <entry>
    <title>Umi3</title>
    <url>/2022/10/06/frame/Umi3/index/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="#1">Umi3</a></p>
<ul class="lvl-0">
<li class="lvl-4"><a href="#2">项目创建</a></li>
<li class="lvl-4"><a href="#3">项目目录</a></li>
<li class="lvl-4"><a href="#4">项目配置</a></li>
<li class="lvl-4"><a href="#5">umi3-5-antd</a></li>
<li class="lvl-4"><a href="#6">配置主题</a></li>
<li class="lvl-4"><a href="#7">图片和资源的引入</a></li>
<li class="lvl-4"><a href="#8">less样式模块化</a></li>
<li class="lvl-4"><a href="#9">路由、权限路由、动态路由</a></li>
<li class="lvl-4"><a href="#10">页面跳转</a></li>
<li class="lvl-4"><a href="#11">mock</a></li>
<li class="lvl-4"><a href="#12">反向代理</a></li>
<li class="lvl-4"><a href="#13">request</a></li>
<li class="lvl-4"><a href="#14">useRequest</a></li>
<li class="lvl-4"><a href="#15">dva</a></li>
<li class="lvl-4"><a href="#16">启用connect 使用hooks</a></li>
<li class="lvl-4"><a href="#17">subscription源获取</a></li>
<li class="lvl-4"><a href="#18">运行时的配置</a>
<ul class="lvl-2">
<li class="lvl-6"><a href="#19">渲染浅的权限效验</a></li>
<li class="lvl-6"><a href="#20">动态路由读取、添加</a></li>
<li class="lvl-6"><a href="#21">路由监听，埋点统计</a></li>
<li class="lvl-6"><a href="#22">拦截器</a></li>
</ul>
</li>
</ul>
<p id=1></p>
<h2 id="Umi3"><a href="../../Test/frameTest/Umi3/">Umi3</a></h2>
<p id=2></p>
<h3 id="项目创建">项目创建</h3>
<ol>
<li class="lvl-3">
<p>创建脚手架</p>
</li>
</ol>
<pre class="language-none"><code class="language-none">yarn create @umijs&#x2F;umi-app
或
npx @umijs&#x2F;create-umi-app</code></pre>
<ol start="2">
<li class="lvl-3">
<p>安装依赖</p>
</li>
</ol>
<pre class="language-none"><code class="language-none">yarn</code></pre>
<ol start="3">
<li class="lvl-3">
<p>启动项目</p>
</li>
</ol>
<pre class="language-none"><code class="language-none">yarn start</code></pre>
<p id=3></p>
<h3 id="项目目录">项目目录</h3>
<p id=4></p>
<h3 id="项目配置">项目配置</h3>
<p>UMI的默认配置文件是<code>.umirc.ts</code>，如果配置多的话，我们可以将<code>.umirc.ts</code>文件删除，在根目录下创建<code>config</code>文件夹，在里面配置不同的配置文件。</p>
<p id=5></p>
<h3 id="umi3-5-antd">umi3-5-antd</h3>
<p>如果我们引入antd-mobile版本是默认的v2版本。</p>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Button <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Button <span class="token keyword">as</span> V2Button <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'antd-mobile'</span><span class="token punctuation">;</span><span class="token comment">//默认v2版本</span></code></pre>
<p>我们可以将<code>@umijs/preset-react</code>的版本升级到最新，让默认版本变成v5</p>
<pre class="language-none"><code class="language-none">yarn add @umijs&#x2F;preset-react -S</code></pre>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Button <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Button <span class="token keyword">as</span> V2Button <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'antd-mobile-v2'</span><span class="token punctuation">;</span><span class="token comment">//v2版本</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Button <span class="token keyword">as</span> V5Button <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'antd-mobile'</span><span class="token punctuation">;</span><span class="token comment">//默认v5版本</span>


<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">IndexPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>primary<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token plain-text">按钮</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">V2Button</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>primary<span class="token punctuation">'</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>small<span class="token punctuation">'</span></span> <span class="token attr-name">inline</span><span class="token punctuation">></span></span><span class="token plain-text">按钮v2</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">V2Button</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">V5Button</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>primary<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token plain-text">按钮v5</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">V5Button</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p id=6></p>
<h3 id="配置主题">配置主题</h3>
<p>antd pc端配置，只需要在配置文件里面写入：</p>
<pre class="language-none"><code class="language-none">theme:&#123;
  &#39;@primary-color&#39;:&#39;#399&#39;,&#x2F;&#x2F;ps端
&#125;</code></pre>
<p>antd v5配置，需要现在<code>src</code>下面创建<code>global.less</code>。</p>
<pre class="language-less" data-language="less"><code class="language-less"><span class="token selector">:root:root</span><span class="token punctuation">&#123;</span>
  <span class="token property">--adm-color-primary</span><span class="token punctuation">:</span>#399<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p id=7></p>
<h3 id="图片和资源的引入">图片和资源的引入</h3>
<p>在根目录创建<code>public</code>文件夹，来存放静态图片。</p>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 可以使用相对路径的方式引入，/就代表了public文件夹</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/favicon.ico<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre>
<p>也可以在<code>src</code>中创建<code>assest</code>文件夹，在<code>assest</code>中创建<code>images</code>文件夹。</p>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> user <span class="token keyword">from</span> <span class="token string">'../assets/images/favicon.ico'</span><span class="token punctuation">;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>user<span class="token punctuation">&#125;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">'../assets/images/favicon.ico'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre>
<p>在css中引入背景图片。</p>
<pre class="language-less" data-language="less"><code class="language-less"><span class="token selector">.box1</span><span class="token punctuation">&#123;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'/favicon.ico'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token comment">//public文件夹下</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.box2</span><span class="token punctuation">&#123;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'../assets/images/favicon.ico'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.box3</span><span class="token punctuation">&#123;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'~@/assets/images/favicon.ico'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token comment">//~@表示src文件夹</span>
<span class="token punctuation">&#125;</span></code></pre>
<p id=8></p>
<h3 id="less样式模块化">less样式模块化</h3>
<p>全局的less变量定义在<code>src</code>下的<code>global.less</code>里。对于全局的样式不需要引入就可以直接使用。</p>
<p id=9></p>
<h3 id="路由、权限路由、动态路由">路由、权限路由、动态路由</h3>
<p>UMI是约定式路由和配置型路由，约定式路由就是你合理的创建文件，在不写任何配置的情况下就可以使用路由，但是当项目比较大的时候，还是使用配置型路由。配置型路由权重比约定式是路由高。配置型路由的配置文件在<code>config</code>中的<code>routers.ts</code></p>
<pre class="language-none"><code class="language-none">export default [
  &#123; path: &#39;&#x2F;&#39;, component: &#39;@&#x2F;pages&#x2F;index&#39; &#125;,
  &#123; path: &#39;&#x2F;login&#39;, component: &#39;@&#x2F;pages&#x2F;login&#39; &#125;,
  &#123; path: &#39;&#x2F;reg&#39;, component: &#39;@&#x2F;pages&#x2F;reg&#39; &#125;,
  &#123;component: &#39;@&#x2F;pages&#x2F;404&#39; &#125;,
]</code></pre>
<p><strong>注意：创建的逐渐要默认暴露，路由里面才能检测到</strong></p>
<p>动态路由</p>
<pre class="language-none"><code class="language-none">&#123; path: &#39;&#x2F;goods&#x2F;:id&#39;, component: &#39;@&#x2F;pages&#x2F;goods&#39; &#125;,</code></pre>
<p>路由鉴权</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//routes.ts</span>
<span class="token punctuation">&#123;</span> 
  path<span class="token operator">:</span> <span class="token string">'/reg'</span><span class="token punctuation">,</span>
  wrappers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'@/wrappers/auth'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  component<span class="token operator">:</span> <span class="token string">'@/pages/reg'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token comment">//wrappers auth</span>
<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> ReactNode <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Redirect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'umi'</span>

<span class="token keyword">function</span> <span class="token function">Auth</span><span class="token punctuation">(</span>props<span class="token operator">:</span><span class="token punctuation">&#123;</span>childern<span class="token operator">:</span>ReactNode<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>childern<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>Redirect to<span class="token operator">=</span><span class="token string">'/login'</span> <span class="token operator">/</span><span class="token operator">></span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Auth</code></pre>
<p>layouts布局</p>
<pre class="mermaid">graph TB;
A[layouts]-->components
A[layouts]-->children
components-->nav
children-->B[layout]
children-->pages
pages-->1
pages-->2
pages-->3
B[layout]-->c2[components]
c2[components]-->menu
B[layout]-->ch2[children]
ch2[children]-->p2[pages]
p2[pages]-->goods
p2[pages]-->good-detail
p2[pages]-->comment
p2[pages]-->comment-detail
style A fill:#559dff
style B fill:#559dff</pre>
<p id=10></p>
<h3 id="页面跳转">页面跳转</h3>
<pre class="mermaid">graph TB;
跳转---编程式跳转
跳转---声明式跳转
编程式跳转---history
history---A[import history from 'umi']
history---B[props上的history]
history---C[useHistory]
声明式跳转----D[NavLink]
声明式跳转----E[Link]</pre>
<ol>
<li class="lvl-3">
<p>编程式跳转</p>
</li>
<li class="lvl-3">
<p>声明式跳转</p>
</li>
</ol>
<p id=11></p>
<h3 id="mock">mock</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  <span class="token string-property property">'GET /umi/good'</span><span class="token operator">:</span><span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'name1'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'name2'</span> <span class="token punctuation">&#125;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">'POST /api/users/create'</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>模拟延时</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> delay <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'roadhog-api-doc'</span><span class="token punctuation">;</span><span class="token comment">//模拟延时</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token string-property property">'GET /umi/good'</span><span class="token operator">:</span><span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'name1'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'name2'</span> <span class="token punctuation">&#125;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">'POST /api/users/create'</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span></code></pre>
<p id=12></p>
<h3 id="反向代理">反向代理</h3>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  <span class="token string-property property">'/api'</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
    target<span class="token operator">:</span> <span class="token string">'https://localhost:9001'</span><span class="token punctuation">,</span><span class="token comment">//代理真实服务器</span>
    https<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//从http代理到https</span>
    changeOrigin<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//依赖origin的功能需要这个，比如cookie</span>
    pathRwrite<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">'^/api'</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">//替换路径</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p id=13></p>
<h3 id="request">request</h3>
<p>request是umi自带的请求数据的工具。和axios的用法很像。</p>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> request <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'umi'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">getGood</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">'/umi/good'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> <span class="token function-variable function">Login</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">'/umi/good'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>
    method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      username<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
      password<span class="token operator">:</span> <span class="token string">''</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p id=14></p>
<h3 id="useRequest">useRequest</h3>
<p>useRequest 要求 必须返回一个data字段</p>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useRequest <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'umi'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">&#123;</span>data<span class="token punctuation">,</span>error<span class="token punctuation">,</span>loading<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span><span class="token string">'/umi/good'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">&#123;</span>data2<span class="token punctuation">,</span>error2<span class="token punctuation">,</span>loading2<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    url<span class="token operator">:</span> <span class="token string">'/umi/good'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">//当添加配置manual:true的时候，必须调用run函数才会执行并返回数据</span>
<span class="token keyword">const</span> <span class="token punctuation">&#123;</span>data<span class="token punctuation">,</span>error<span class="token punctuation">,</span>loading<span class="token punctuation">,</span>run<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span><span class="token string">'/umi/good'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>manual<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>轮询</p>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>data<span class="token punctuation">,</span>error<span class="token punctuation">,</span>loading<span class="token punctuation">,</span>run<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span><span class="token string">'/umi/good'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>
    manual<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    pollingInterval<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span><span class="token comment">//每一秒轮询一次</span>
    pollingWhenHidden<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//屏幕不可见时，暂停轮询</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p id=15></p>
<h3 id="dva">dva</h3>
<pre class="mermaid">graph LR;
URL-->RouteComponent
RouteComponent-->dispatch
RouteComponent-->c1组件
RouteComponent-->c2组件
dispatch-->Action
Action-->Reducer,同步
Action-->Effect,异步
subgraph Model
	Reducer,同步
	Effect,异步
	Subscription
end
Subscription.->Action
Effect,异步-->Server,服务器
Server,服务器-->Reducer,同步
Reducer,同步-->State
State--connect-->RouteComponent</pre>
<p><img src="/images/Umi3/1.png" alt="dva数据流" loading="lazy"></p>
<p>基于redux和redux-saga的数据流解决方案。<br>
dva的文件在<code>src</code>下的<code>models</code>下的<code>global.js</code>文件中</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// namespace: 'global',//所有的models里面的namespace不能重名</span>
  <span class="token comment">//初始化全局数据</span>
  <span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'全局title'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'全局text'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">login</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">'全局models aaaa'</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

  <span class="token comment">//处理同步业务</span>
  <span class="token literal-property property">reducers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token function">setText</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token comment">//copy 更新 并返回</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        <span class="token operator">...</span>state<span class="token punctuation">,</span>
        <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'全局 设置后的 text'</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>action</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token comment">//copy 更新 并返回</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        <span class="token operator">...</span>state<span class="token punctuation">,</span>
        <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">全局 设置后的 title'/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>action<span class="token punctuation">.</span>payload<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>上面这段代码我们就定义了全局的变量和方法，我们可以通过下面的代码在页面中使用全局变量</p>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>JSXElementConstructor<span class="token punctuation">,</span> useEffect<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span>connect<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'umi'</span>
<span class="token keyword">interface</span> <span class="token class-name">Props</span><span class="token punctuation">&#123;</span>
  <span class="token function-variable function">dispatch</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>key<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token builtin">string</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> Dva<span class="token operator">:</span>JSXElementConstructor<span class="token operator">&lt;</span><span class="token builtin">never</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token operator">:</span>Props<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
      Dva
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">获取全局数据</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">text:</span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>text<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">title:</span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">A:</span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span><span class="token constant">A</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>isLogin<span class="token operator">?</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">已登录</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token operator">:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">未登录</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span>props<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        type<span class="token operator">:</span> <span class="token string">'global/setText'</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">按钮</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token operator">:</span><span class="token punctuation">&#123;</span>
  global<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span>key<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token comment">//抓取全局，重命名</span>
  text<span class="token operator">:</span> state<span class="token punctuation">.</span>global<span class="token punctuation">.</span>text<span class="token punctuation">,</span>
  title<span class="token operator">:</span> state<span class="token punctuation">.</span>global<span class="token punctuation">.</span>title<span class="token punctuation">,</span>
  <span class="token constant">A</span><span class="token operator">:</span> state<span class="token punctuation">.</span>global<span class="token punctuation">.</span>a<span class="token punctuation">,</span>
  isLogin<span class="token operator">:</span> state<span class="token punctuation">.</span>global<span class="token punctuation">.</span>login
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Dva<span class="token punctuation">)</span></code></pre>
<p>我们不仅可以创建全局的数据，我们也可以创建页面级别的数据，我们只需要在组件对应的文件夹下面创建<code>model.ts</code>或<code>model.ts</code>. 如果我们要创建多个文件，则可以创建<code>models</code>文件夹，将</p>
<p id=16></p>
<h3 id="启用connect-使用hooks">启用connect 使用hooks</h3>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span>useDispatch<span class="token punctuation">,</span>useSelector<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'umi'</span>

<span class="token keyword">const</span> <span class="token function-variable function">Child</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> dispatch <span class="token operator">=</span> <span class="token function">useDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token operator">:</span><span class="token punctuation">&#123;</span>global<span class="token operator">:</span><span class="token punctuation">&#123;</span>
            a<span class="token operator">:</span><span class="token builtin">string</span>
            login<span class="token operator">:</span> <span class="token builtin">boolean</span>
            text<span class="token operator">:</span><span class="token builtin">string</span>
            title<span class="token operator">:</span><span class="token builtin">string</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>global<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
            child
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>data<span class="token punctuation">.</span>text<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>data<span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
                <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>type<span class="token operator">:</span><span class="token string">'global/setText'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>type<span class="token operator">:</span><span class="token string">'global/setTitle'</span><span class="token punctuation">,</span>payload<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">按钮</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Child<span class="token punctuation">;</span></code></pre>
<p id=17></p>
<h3 id="subscription源获取">subscription源获取</h3>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>request<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"umi"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> key <span class="token keyword">from</span> <span class="token string">'keymaster'</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// namespace: 'global',//所有的models里面的namespace不能重名</span>
  <span class="token comment">//初始化全局数据</span>
  state<span class="token operator">:</span><span class="token punctuation">&#123;</span>
    title<span class="token operator">:</span> <span class="token string">'全局title'</span><span class="token punctuation">,</span>
    text<span class="token operator">:</span> <span class="token string">'全局text'</span><span class="token punctuation">,</span>
    login<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    a<span class="token operator">:</span> <span class="token string">'全局models aaaa'</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

  <span class="token comment">//处理同步业务</span>
  reducers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token function">setText</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token comment">//copy 更新 并返回</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        <span class="token operator">...</span>state<span class="token punctuation">,</span>
        text<span class="token operator">:</span> <span class="token string">'全局 设置后的 text'</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

  subscriptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//监听路由</span>
    <span class="token function">listenRoute</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>dispatch<span class="token punctuation">,</span>history<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      history<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>pathname<span class="token punctuation">,</span>query<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'global subscription'</span><span class="token punctuation">,</span>pathname<span class="token punctuation">,</span>query<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

    <span class="token comment">//监听按键</span>
    <span class="token function">listenKeyBoard</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>dispatch<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token function">key</span><span class="token punctuation">(</span><span class="token string">'ctrl+i'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你按下了ctrl+i'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>type<span class="token operator">:</span><span class="token string">'setText'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p id=18></p>
<h3 id="运行时的配置">运行时的配置</h3>
<p id=19></p>
<h4 id="渲染浅的权限效验">渲染浅的权限效验</h4>
<p>在<code>src</code>下创建<code>app.ts</code>文件</p>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>history<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'umi'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span>ReactNode<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>oldRender<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span>ReactNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//oldRender   需要至少调用一次</span>
  <span class="token comment">// history.push('/login')//这里判断一下是否登录，并且是否是个人中心什么的，如果没登录则无法进入。</span>
  <span class="token keyword">let</span> isLogin <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>isLogin<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">oldRender</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p id=20></p>
<h4 id="动态路由读取、添加">动态路由读取、添加</h4>
<p>在<code>src</code>下创建<code>app.ts</code>文件</p>
<p id=21></p>
<h4 id="路由监听，埋点统计">路由监听，埋点统计</h4>
<p>在<code>src</code>下创建<code>app.ts</code>文件</p>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">onRouteChange</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>matchedRoutes<span class="token punctuation">,</span>location<span class="token punctuation">,</span>routes<span class="token punctuation">,</span>action<span class="token punctuation">&#125;</span><span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token comment">//添加标题</span>
  document<span class="token punctuation">.</span>title <span class="token operator">=</span> matchedRoutes<span class="token punctuation">[</span>matchedRoutes<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>route<span class="token punctuation">.</span>title<span class="token operator">||</span><span class="token string">'heheda'</span>
<span class="token punctuation">&#125;</span></code></pre>
<p id=22></p>
<h4 id="拦截器">拦截器</h4>
<p>在<code>src</code>下创建<code>app.ts</code>文件</p>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// timeout: 1000,//延时</span>
  <span class="token comment">// errorConfig: &#123;&#125;,//错误处理</span>
  <span class="token comment">// middlewares: [],//使用中间件</span>
  <span class="token comment">//请求拦截</span>
  requestInterceptors<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">(</span>url<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">,</span>options<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      options<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>token<span class="token operator">:</span><span class="token string">'123456'</span><span class="token punctuation">&#125;</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>url<span class="token punctuation">,</span>options<span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>

  responseInterceptors<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">(</span>response<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">,</span>options<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> response<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
]]></content>
      <categories>
        <category>框架</category>
        <category>Umi3</category>
      </categories>
  </entry>
  <entry>
    <title>HTML常见面试题</title>
    <url>/2022/10/22/interview/HTML/index/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="HTML常见面试题">HTML常见面试题</h2>
<h3 id="src和href的区别">src和href的区别</h3>
<p>src和href都是对外部资源的引用。<br>
src：表示对资源的引用，将指向的内容嵌入到标签所在的位置。src会将指向的资源下载并应用到文档中，如请求js脚本。所以会导致，当浏览器解析到src的时候，会停止对其他资源的下载和处理，先将src资源加载、编译、执行完。所以js脚本会放在页面底部。<br>
href：表示超文本引用，它是与网络资源建立了链接。当浏览器识别到他指向的文件时，就会并行的下载资源，不会停止对其他资源的处理。比如link和a标签。</p>
<h3 id="对HTML语义化的了解">对HTML语义化的了解</h3>
<p>语义化的标签会向浏览器和开发者传递它自身标签所包含的一些信息。比如nav标签表示导航，header标签表示头部。需要开发者根据页面内容和结构选择合适的标签。</p>
<p>语义化的优点：对机器来说：</p>
<ol>
<li class="lvl-3">
<p>对机器友好，因为标签本身就带有语义。</p>
</li>
<li class="lvl-3">
<p>更适合爬虫爬取有效信息，有利于SEO。</p>
</li>
<li class="lvl-3">
<p>语义类支持读屏软件，可以根据文章自动生成目录。对开发者来说：</p>
</li>
<li class="lvl-3">
<p>对开发者友好，语义化标签增加了可读性。</p>
</li>
<li class="lvl-3">
<p>代码结构更加的清晰，开发者可以清晰的看到网页的结构。</p>
</li>
<li class="lvl-3">
<p>便于团队的开发与维护。</p>
</li>
</ol>
<p>常见的语义化标签：</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>头部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span>导航<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>主要区域<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>主要内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">></span></span>侧边栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>底部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">></span></span>区块（有语义化的div）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span></code></pre>
<h3 id="DOCTYPE-文档类型-的作用">DOCTYPE(文档类型)的作用</h3>
<p>DOCTYPE必须在第一行声明，告诉浏览器以什么样的文档定义来解析文档。</p>
<p>浏览器渲染页面的两种方式：可以通过document.compatMode来获取</p>
<ol>
<li class="lvl-3">
<p>CSS1Compat：标准模式</p>
</li>
<li class="lvl-3">
<p>BackCompat：怪异模式（混杂模式）</p>
</li>
</ol>
<p>如果没有写DOCTYPE，浏览器则会进入<code>怪异模式</code>，浏览器会以老版本的浏览器使用的规则来渲染页面。所以，<code>怪异模式</code>可能在不同浏览器上有不同的样式。如果有写DOCTYPE，浏览器就会遵循DTD文档标准进入标准模式。（在html4及以前版本需要在文档中声明DTD，html5不需要，因为html5不遵循DTD标准）。</p>
<p>两种模式下提取浏览器尺寸时，使用语法不同。标准模式：document.documentElement<br>
怪异模式：document.body</p>
<h3 id="script标签中，defer和async的区别">script标签中，defer和async的区别</h3>
<ol>
<li class="lvl-3">
<p>没有defer和async，浏览器会立即加载并执行脚本。会阻塞后续文档的加载。<br>
<img src="/images/HTML/1.png" alt="没有defer和async" loading="lazy"></p>
</li>
<li class="lvl-3">
<p>async会异步请求网络脚本，如果请求回来后文档还没加载完，那么就会暂停文档的加载，先执行js代码，之后再加载文档。所以async可以阻塞文档加载也可能不阻塞。<br>
<img src="/images/HTML/2.png" alt="async" loading="lazy"><br>
<img src="/images/HTML/3.png" alt="async" loading="lazy"></p>
</li>
<li class="lvl-3">
<p>defer会异步请求网络脚本，但是请求完成后不会立即执行，会等待文档加载完成后才执行脚本。defer不会阻塞文档的加载。<br>
<img src="/images/HTML/4.png" alt="defer" loading="lazy"></p>
</li>
</ol>
<h3 id="常⽤的meta标签有哪些">常⽤的meta标签有哪些</h3>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 文档编码类型 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>UTF-8<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span>
<span class="token comment">&lt;!-- 页面关键词 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>keywords<span class="token punctuation">'</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>关键词<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span>
<span class="token comment">&lt;!-- 页面描述 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>description<span class="token punctuation">'</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>页面描述内容<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span>
<span class="token comment">&lt;!-- 页面重定向和刷新 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>refresh<span class="token punctuation">'</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>0;url=<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span>
<span class="token comment">&lt;!-- 适配移动端，可控制可视窗口的大小比例 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>viewport<span class="token punctuation">'</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1, maximum-scale=1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token comment">&lt;!-- width viewport ：宽度(数值/device-width)
height viewport ：高度(数值/device-height)
initial-scale ：初始缩放比例
maximum-scale ：最大缩放比例
minimum-scale ：最小缩放比例
user-scalable ：是否允许用户缩放(yes/no） --></span>

<span class="token comment">&lt;!-- 搜索引擎索引方式 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>robots<span class="token punctuation">'</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>index,follow<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span>
<span class="token comment">&lt;!-- all：文件将被检索，且页面上的链接可以被查询；
none：文件将不被检索，且页面上的链接不可以被查询；
index：文件将被检索；
follow：页面上的链接可以被查询；
noindex：文件将不被检索；
nofollow：页面上的链接不可以被查询。 --></span></code></pre>
<h3 id="HTML5有哪些更新">HTML5有哪些更新</h3>
<ol>
<li class="lvl-3">
<p>标签语义化</p>
<ul class="lvl-2">
<li class="lvl-6">
<header>头部</header>
</li>
<li class="lvl-6">
<nav>导航</nav>
</li>
<li class="lvl-6">
<main>主要区域</main>
</li>
<li class="lvl-6">
<article>主要内容</article>
</li>
<li class="lvl-6">
<aside>侧边栏</aside>
</li>
<li class="lvl-6">
<footer>底部</footer>
</li>
<li class="lvl-6">
<section>区块（有语义化的div）</section>
</li>
</ul>
</li>
<li class="lvl-3">
<p>媒体标签</p>
</li>
</ol>
<h3 id="img的srcset属性的作用？">img的srcset属性的作用？</h3>
<p>img的srcset属性，不同屏幕密度下加载不同的图片。</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image-128.png<span class="token punctuation">"</span></span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image-256.png 2x<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre>
<p>如果屏幕密度时1x，加载128图片，如果屏幕密度时2x，加载256图片。但是如果按照这种方法加载，那不是每张图片都要加载一下吗？加载就会很慢，所以就有了新的srcset标准。</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image-128.png<span class="token punctuation">"</span></span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image-128.png 128w, image-256.png 256w, image-512.png 512w<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(max-width: 360px) 340px, 128px<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre>
<p>只用srcset的单位是w时，sizes才生效。</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3.jpg 229w,2.png 618w,1.jpg 1000w<span class="token punctuation">"</span></span><span class="token attr-name">,</span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(max-width: 500px) 400px, (max-width: 900px) 700px, 1200px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>
<p>当宽度时500px时，取值400px，400在229和618之间，所以取最大的2.png。如果sizes没有设置值或媒体条件下没有设置值则默认值是100vw。</p>
<h3 id="行内元素有哪些？块级元素有哪些？空-void-元素有哪些？">行内元素有哪些？块级元素有哪些？空(void)元素有哪些？</h3>
<p>空(void)元素也就是自闭和标签。行内：a、b、span、img、strong、input、select<br>
块级：div、p、h1 ~ h6、dl、dt、dd、ul、li、ol<br>
空：input、img、br、hr、meta、link</p>
<h3 id="web-worker">web worker</h3>
<h3 id="title与h1的区别、b与strong的区别、i与em的区别？">title与h1的区别、b与strong的区别、i与em的区别？</h3>
<p>i表示的斜体，em表示强调的文本。<br>
strong标签具有语义化，有加重语气的作用，而b标签只是加粗。搜索引擎更侧重于strong标签。<br>
title没有明确的意义只表示是个标题，h1表示层次明确的标题，对页面信息的抓取有更大的影响。</p>
<h3 id="iframe-有那些优点和缺点？">iframe 有那些优点和缺点？</h3>
<h3 id="label-的作用是什么？如何使用？">label 的作用是什么？如何使用？</h3>
<h3 id="head-标签有什么作用，其中什么标签必不可少？">head 标签有什么作用，其中什么标签必不可少？</h3>
<h3 id="浏览器乱码的原因是什么？如何解决？">浏览器乱码的原因是什么？如何解决？</h3>
<ol>
<li class="lvl-3">
<p>网页源代码是<code>gbk</code>编码，但是内容中的文字是<code>utf-8</code>编码，这样打开浏览器就会出现html乱码，反之也会出现乱码。</p>
</li>
<li class="lvl-3">
<p>html是<code>gbk</code>编码，而从数据库返回的数据是<code>utf-8</code>编码，也会造成乱码。</p>
</li>
<li class="lvl-3">
<p>浏览器不能自动检测网页的编码，造成网页乱码。解决方案：</p>
</li>
<li class="lvl-3">
<p>使用软件编辑html网页源代码。</p>
</li>
</ol>
<h3 id="说一下-HTML5-drag-API">说一下 HTML5 drag API</h3>
<h3 id="参考资料">参考资料</h3>
<p>[1]<a href="https://juejin.cn/post/6894629999215640583">图解 script 标签中的 async 和 defer 属性</a><br>
[2]<a href="https://juejin.cn/post/6905294475539513352">「2021」高频前端面试题汇总之HTML篇</a></p>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>HTML</category>
      </categories>
  </entry>
  <entry>
    <title>CSS常见面试题</title>
    <url>/2022/10/30/interview/CSS/css%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="CSS常见面试题">CSS常见面试题</h2>
<h3 id="CSS优先级">CSS优先级</h3>
<h3 id="CSS中继承与不可继承属性">CSS中继承与不可继承属性</h3>
<h3 id="display属性及其作用">display属性及其作用</h3>
<table>
<thead>
<tr>
<th style="text-align:center">属性值</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">none</td>
<td style="text-align:center">元素不显示，并且从文档流中移除</td>
</tr>
<tr>
<td style="text-align:center">block</td>
<td style="text-align:center">元素变成块类型，默认宽度是父元素的宽度，可以设置宽高，块元素之间换行显示。</td>
</tr>
<tr>
<td style="text-align:center">inline</td>
<td style="text-align:center">元素变成行内元素，默认宽度是内容的宽度，不可以设置宽高，行内元素之间不换行显示。</td>
</tr>
<tr>
<td style="text-align:center">inline-block</td>
<td style="text-align:center">行内块元素，默认宽度为内容宽度，可以设置宽高，但是同行显示。</td>
</tr>
<tr>
<td style="text-align:center">list-item</td>
<td style="text-align:center">元素变成块元素，并且添加列表标记。</td>
</tr>
<tr>
<td style="text-align:center">table</td>
<td style="text-align:center">让元素变成块级表格。可以给父元素使用，然后子元素设置display:table-cell和vertical-align: middle让文字垂直居中。</td>
</tr>
<tr>
<td style="text-align:center">inherit</td>
<td style="text-align:center">规定从父元素继承display。如果父元素没有display，那么如果父元素是块元素就继承block，如果父元素是行内元素就继承inline。</td>
</tr>
</tbody>
</table>
<h3 id="display的block、inline和inline-block的区别">display的block、inline和inline-block的区别</h3>
<p>block会让元素变成块元素，默认宽度是父元素的宽度，可以设置width、height、margin和padding，多个元素会另起一行显示。<br>
inline会让元素变成行内元素，默认宽度是内容的宽度，不能设置width、height、垂直方向的margin和垂直方向的padding，多个元素会在一行显示。<br>
inline-block会让元素变成inline，但是元素的内容作为block，默认宽度是内容的宽度，可以设置width、height、margin和padding，多个元素会在一行显示。</p>
<h3 id="行内元素和块元素">行内元素和块元素</h3>
<p>行内元素</p>
<ol>
<li class="lvl-3">
<p>不能设置宽高</p>
</li>
<li class="lvl-3">
<p>不能设置垂直方向的margin和padding</p>
</li>
<li class="lvl-3">
<p>默认宽度是内容的宽度</p>
</li>
<li class="lvl-3">
<p>多个元素在一行显示</p>
</li>
</ol>
<p>块元素</p>
<ol>
<li class="lvl-3">
<p>可以设置宽高</p>
</li>
<li class="lvl-3">
<p>可以设置margin和padding</p>
</li>
<li class="lvl-3">
<p>多个元素自动换行显示。</p>
</li>
</ol>
<h3 id="隐藏元素的方法有哪些">隐藏元素的方法有哪些</h3>
<ol>
<li class="lvl-3">
<p>display:none：元素不显示，并且从文档流中移除</p>
</li>
<li class="lvl-3">
<p>visibility:hidden：元素被隐藏了，但是不会脱离文档流，所以元素仍然占空间，但是不会响应绑定的监听事件。</p>
</li>
<li class="lvl-3">
<p>opacity:0：将元素设置成透明，来隐藏元素。元素仍占用空间，并且响应绑定的监听事件。</p>
</li>
<li class="lvl-3">
<p>定位：通过定位将元素移除可视范围内。</p>
</li>
<li class="lvl-3">
<p>z-index：将z-index设置成负值，让其他元素覆盖它。必须设置定位，z-index才生效。隐藏后不会响应绑定的监听事件。</p>
</li>
<li class="lvl-3">
<p>clip/clip-path：使用元素裁剪的方法来隐藏元素，这种方法下，元素仍占位置，但是不会响应监听事件。</p>
</li>
<li class="lvl-3">
<p>transform:scale(0,0)：元素隐藏，但是还在页面中占位置，不会响应绑定的监听事件。</p>
</li>
</ol>
<h3 id="import和link的区别">@import和link的区别</h3>
<p>它们都是引入外部css样式的方法，不同点有：</p>
<ol>
<li class="lvl-3">
<p>link是html标签，可以引入css，还可以定义RSS等其他业务。@import只能引入css。</p>
</li>
<li class="lvl-3">
<p>link引入css在页面载入同时加载，而@import在页面载入后加载。</p>
</li>
<li class="lvl-3">
<p>link是html标签，无兼容性问题。而@import是css2.1提出的，低版本的浏览器有兼容性问题。</p>
</li>
<li class="lvl-3">
<p>link支持使用javascript控制DOM去改变样式，而@import不可以。</p>
</li>
</ol>
<h3 id="transition和animation的区别">transition和animation的区别</h3>
<h3 id="display-none与visibility-hidden的区别">display:none与visibility:hidden的区别</h3>
<ol>
<li class="lvl-3">
<p>display隐藏元素，元素会从DOM树中消失，不占位置。但是visibility:hidden不会让元素从DOM树中消失，仍然占位置。</p>
</li>
<li class="lvl-3">
<p>display:none是非继承属性，子孙节点会跟随父节点从DOM树中消失，通过修改子孙节点也无法显示。visibility:hidden是继承属性，子孙节点的消失是因为继承了父节点的visibility:hidden，给子孙节点设置visibility:visible可以让子孙节点显示。</p>
</li>
<li class="lvl-3">
<p>修改display通常会导致重绘重排，但是修改visibility只会导致重绘。</p>
</li>
<li class="lvl-3">
<p>使用读屏器，display:none的内容不会被读取到，但是visibility:hidden的内容会被读取到。</p>
</li>
</ol>
<h3 id="伪元素和伪类的区别和作用？">伪元素和伪类的区别和作用？</h3>
<p>伪元素是在元素的前后插入额外的元素和样式，只不过伪元素不会出现在文档流中，所以称为伪元素。伪类是将特定的效果添加到特定的选择器上，他是给已有的元素添加样式，不会产生新的元素。</p>
<h3 id="对requestAnimationframe的理解">对requestAnimationframe的理解</h3>
<h3 id="对盒模型的理解">对盒模型的理解</h3>
<p>盒模型有两种，标准盒模型和怪异盒模型。它们都由四个部分组成，margin、padding、border和content(内容区)。标准盒模型的height、width只给了content(内容区)。怪异盒模型的height、width包括了border、padding和(内容区)。通过修改box-sizing属性来改变元素的盒模型。<br>
box-sizing:border-box，表示怪异盒模型。<br>
box-sizing:content-box，表示标准盒模型。</p>
<h3 id="为什么有时候⽤translate来改变位置⽽不是定位？">为什么有时候⽤translate来改变位置⽽不是定位？</h3>
<h3 id="行内元素之间有看不见的空白间隔是什么原因引起的？如何解决？">行内元素之间有看不见的空白间隔是什么原因引起的？如何解决？</h3>
<p>因为浏览器会把内联元素之间的空白字符，比如换行、空格、Tab等渲染成一个空格，我们在写代码的时候为了美观通常会写完一个标签后换行，这样就使得两个行内元素之间存在空白间隔。解决方法：</p>
<ol>
<li class="lvl-3">
<p>将标签写在同一行，让中间没有空白字符，缺点是代码不够美观。</p>
</li>
<li class="lvl-3">
<p>设置float:left。</p>
</li>
<li class="lvl-3">
<p>给包裹行内元素的块元素设置font-size:0，但是这样行内元素设置font-size:16px。</p>
</li>
<li class="lvl-3">
<p>给包裹行内元素的元素设置letter-spacing:-5px，给行内元素设置letter-spacing:normal。</p>
</li>
</ol>
<h3 id="CSS3中有哪些新特性">CSS3中有哪些新特性</h3>
<ol>
<li class="lvl-3">
<p>圆角 border-reaius</p>
</li>
<li class="lvl-3">
</li>
</ol>
<h3 id=""></h3>
<h3 id="参考资料">参考资料</h3>
<p>[1]<a href="https://juejin.cn/post/6905539198107942919">「2021」高频前端面试题汇总之CSS篇</a></p>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>应用场景</title>
    <url>/2022/10/30/interview/CSS/%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="应用场景">应用场景</h2>
<h3 id="实现一个三角形">实现一个三角形</h3>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>三角形<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
    <span class="token selector">div</span><span class="token punctuation">&#123;</span>
      <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
      <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.a</span><span class="token punctuation">&#123;</span>
      <span class="token property">border-top</span><span class="token punctuation">:</span> 50px solid red<span class="token punctuation">;</span>
      <span class="token property">border-right</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>
      <span class="token property">border-left</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.b</span><span class="token punctuation">&#123;</span>
      <span class="token property">border-bottom</span><span class="token punctuation">:</span> 50px solid red<span class="token punctuation">;</span>
      <span class="token property">border-right</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>
      <span class="token property">border-left</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.c</span><span class="token punctuation">&#123;</span>
      <span class="token property">border-top</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>
      <span class="token property">border-bottom</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>
      <span class="token property">border-left</span><span class="token punctuation">:</span> 50px solid red<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.d</span><span class="token punctuation">&#123;</span>
      <span class="token property">border-top</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>
      <span class="token property">border-right</span><span class="token punctuation">:</span> 50px solid red<span class="token punctuation">;</span>
      <span class="token property">border-bottom</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.e</span><span class="token punctuation">&#123;</span>
      <span class="token property">border-top</span><span class="token punctuation">:</span> 50px solid red<span class="token punctuation">;</span>
      <span class="token property">border-right</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>e<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<h3 id="实现一个扇形">实现一个扇形</h3>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>扇形<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
    <span class="token selector">div</span><span class="token punctuation">&#123;</span>
      <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
      <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.a</span><span class="token punctuation">&#123;</span>
      <span class="token property">border</span><span class="token punctuation">:</span> 100px solid transparent<span class="token punctuation">;</span>
      <span class="token property">border-radius</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
      <span class="token property">border-top-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<h3 id="实现一个宽高自适应的正方形">实现一个宽高自适应的正方形</h3>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>正方形<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
    <span class="token selector">.a</span><span class="token punctuation">&#123;</span>
      <span class="token property">width</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span>
      <span class="token property">height</span><span class="token punctuation">:</span> 10vw<span class="token punctuation">;</span>
      <span class="token property">background</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.b</span><span class="token punctuation">&#123;</span>
      <span class="token property">width</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span>
      <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
      <span class="token property">padding-top</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span>
      <span class="token property">background-color</span><span class="token punctuation">:</span> antiquewhite<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.c</span><span class="token punctuation">&#123;</span>
      <span class="token property">width</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span>
      <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
      <span class="token property">background-color</span><span class="token punctuation">:</span> bisque<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.c::after</span><span class="token punctuation">&#123;</span>
      <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>
      <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
      <span class="token property">margin-top</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<h3 id="画一条0-5px的线">画一条0.5px的线</h3>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token comment">&lt;!-- 设置meta，仅限移动端 --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=0.5, minimum-scale=0.5, maximum-scale=0.5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>0.5px<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
    <span class="token selector">.a</span><span class="token punctuation">&#123;</span>
      <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
      <span class="token property">height</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span>
      <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>
      <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>1<span class="token punctuation">,</span>0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<h3 id="设置小于12px的字体"><a href="../../../Test/interview/CSS/12px.html">设置小于12px的字体</a></h3>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>12px<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
    <span class="token selector">div</span><span class="token punctuation">&#123;</span>
      <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>
      <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>0.75<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    小于12px
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<h3 id="如何解决-1px-问题？">如何解决 1px 问题？</h3>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>metaEl<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>1px<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
    <span class="token selector">div</span><span class="token punctuation">&#123;</span>
      <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
      <span class="token property">height</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span>
      <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> scale <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> window<span class="token punctuation">.</span>devicePixelRatio<span class="token punctuation">;</span>
    <span class="token keyword">const</span> metaEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'metaEl'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    metaEl<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">width=device-width,initial-scale=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>scale<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,maximum-scale=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>scale<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,minimum-scale=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>scale<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<p>1px问题就是在一些移动端页面上1px会变得很粗，原因时css中的1px并不能和移动设备上的1px划等号，它们之间的比例关系有一个专门的属性来描述。<br>
window.devicePixelRatio = 设备的物理像素 / css像素</p>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>定位与浮动</title>
    <url>/2022/10/30/interview/CSS/%E5%AE%9A%E4%BD%8D%E4%B8%8E%E6%B5%AE%E5%8A%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="定位与浮动">定位与浮动</h2>
<h3 id="为什么需要清除浮动？清除浮动的方式">为什么需要清除浮动？清除浮动的方式</h3>
<p>浮动的工作原理：</p>
<ol>
<li class="lvl-3">
<p>浮动元素脱离文档流，不占空间（引起高度塌陷）。</p>
</li>
<li class="lvl-3">
<p>浮动元素向左或向右平移，碰到包含它的元素的边框或则其他浮动元素的边框停留。高度塌陷：当容器的高度没有子元素高度高的时候，容器的高度由子元素撑起来，当子元素浮动后，容器的高度会变成原来的高度，子元素会溢出到容器外面，这就是高度塌陷。</p>
</li>
</ol>
<p>浮动引起的问题？</p>
<ol>
<li class="lvl-3">
<p>父元素高度无法撑开。</p>
</li>
<li class="lvl-3">
<p>影响与父元素同级的元素。</p>
</li>
<li class="lvl-3">
<p>影响了同级的非浮动元素的布局。</p>
</li>
</ol>
<p>怎么清除浮动？</p>
<ol>
<li class="lvl-3">
<p>给父元素设置height。</p>
</li>
<li class="lvl-3">
<p>给最后一个浮动元素之后添加一个空的div，并添加clear:both样式。</p>
</li>
<li class="lvl-3">
<p>给浮动元素的父元素添加overflow:hidden或overflow:auto。</p>
</li>
<li class="lvl-3">
<p>给最后一个浮动元素之后添加一个空的div，给空的div添加伪元素给伪元素设置<code>content: &quot;&quot;;display: block;clear: both;</code>。</p>
</li>
</ol>
<h3 id="使用-clear-属性清除浮动的原理？">使用 clear 属性清除浮动的原理？</h3>
<h3 id="对BFC的理解，如何创建BFC">对BFC的理解，如何创建BFC</h3>
<h3 id="什么是margin重叠问题？如何解决？">什么是margin重叠问题？如何解决？</h3>
<p>当两个块元素的上外边距和下外边距可能会合并为一个外边距，外边距的距离由最大的外边距值决定，这就是外边距折叠（重合）。注意：</p>
<ol>
<li class="lvl-3">
<p>重叠只会出现在垂直方向。</p>
</li>
<li class="lvl-3">
<p>浮动元素和绝对定位这种脱离文档流的元素的外边距不会折叠。</p>
</li>
</ol>
<p>计算原则：</p>
<ol>
<li class="lvl-3">
<p>如果两者都是正数，那么就取最大者。</p>
</li>
<li class="lvl-3">
<p>如果是一正一负，就会正值减去负值的绝对值。</p>
</li>
<li class="lvl-3">
<p>两个都是负值时，用0减去两个中绝对值最大的那个。</p>
</li>
</ol>
<p>对于margin重叠有两种情况，兄弟之间重叠和父子之间重叠。兄弟之间：</p>
<ol>
<li class="lvl-3">
<p>底部元素设置display:inline-block;</p>
</li>
<li class="lvl-3">
<p>底部元素设置浮动。</p>
</li>
</ol>
<p>父子之间：</p>
<ol>
<li class="lvl-3">
<p>给父元素添加overflow:hidden。</p>
</li>
<li class="lvl-3">
<p>给父元素添加border: 1px solid transparent。</p>
</li>
<li class="lvl-3">
<p>子元素设置display:inline-block，变成行内元素。</p>
</li>
<li class="lvl-3">
<p>子元素加浮动或absolute定位或fixed定位。</p>
</li>
</ol>
<h3 id="元素的层叠顺序">元素的层叠顺序</h3>
<h3 id="position的属性有哪些，区别是什么">position的属性有哪些，区别是什么</h3>
<table>
<thead>
<tr>
<th style="text-align:center">属性值</th>
<th style="text-align:center">概述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">absolute</td>
<td style="text-align:center">绝对定位，相对于除static定位以外的一个父元素进行定位，如果没有这样一个父元素就相对于body定位，元素脱离文档流，通过top，right，bottom，left属性进行调整定位。</td>
</tr>
<tr>
<td style="text-align:center">relative</td>
<td style="text-align:center">相对定位，相对原来的位置进行定位，元素不脱离文档流，通过top，right，bottom，left属性进行调整定位。</td>
</tr>
<tr>
<td style="text-align:center">fixed</td>
<td style="text-align:center">固定定位，相对于屏幕窗口进行定位，元素的位置在屏幕滚动时不会发生改变。</td>
</tr>
<tr>
<td style="text-align:center">static</td>
<td style="text-align:center">默认值，没有定位。会忽略top，right，bottom，left，z-index属性。</td>
</tr>
<tr>
<td style="text-align:center">inherit</td>
<td style="text-align:center">继承，从父元素继承position属性。</td>
</tr>
<tr>
<td style="text-align:center">sticky</td>
<td style="text-align:center">可以设置top或bottom属性，当没到达这个属性值的时候就是position:relative，当到达sticky定位要求的值时(比如top:100px)，这时候就相当于position:fixed。它是相对于离它最近的一个可滚动的祖先定位。</td>
</tr>
</tbody>
</table>
<p>position:sticky的使用条件</p>
<ol>
<li class="lvl-3">
<p>父元素不能设置overflow:hidden或overflow:auto属性。</p>
</li>
<li class="lvl-3">
<p>必须有top、bottom、left、right四个值之一，否者只会处于相对定位。</p>
</li>
<li class="lvl-3">
<p>父元素高度不能低于sticky元素的高度。</p>
</li>
<li class="lvl-3">
<p>sticky元素仅在其父元素内生效。</p>
</li>
</ol>
<p>position:sticky的坑</p>
<ol>
<li class="lvl-3">
<p>sticky不会触发BFC。</p>
</li>
<li class="lvl-3">
<p>z-index无效。</p>
</li>
<li class="lvl-3">
<p>当父元素设置height:100%时，页面页面滑动到一定高度之后sticky会失效。</p>
</li>
</ol>
<h3 id="display、float、position的关系">display、float、position的关系</h3>
<h3 id="absolute与fixed共同点与不同点">absolute与fixed共同点与不同点</h3>
<p>共同点：</p>
<ol>
<li class="lvl-3">
<p>都使元素变成diaplay:inline-block。</p>
</li>
<li class="lvl-3">
<p>元素脱离文档流，不占空间。</p>
</li>
<li class="lvl-3">
<p>会覆盖非定位元素。</p>
</li>
</ol>
<p>不同点：</p>
<ol>
<li class="lvl-3">
<p>absolute是相对于最近的position属性不是static的父元素定位，而fixed是相对于视图窗口定位。</p>
</li>
<li class="lvl-3">
<p>在页面滚动时，absolute会跟着页面的滚动而滚动，而fixed固定在窗口的位置不动。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>页面布局</title>
    <url>/2022/10/30/interview/CSS/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="页面布局">页面布局</h2>
<h3 id="常见的css布局单位">常见的css布局单位</h3>
<table>
<thead>
<tr>
<th style="text-align:center">单位</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">px</td>
<td style="text-align:center">像素px是页面布局的基础，一个像素表示电脑或手机屏幕上能显示的最小区域，限速分为CSS像素和物理像素。CSS像素是为web开发者提供的，在CSS中使用的一个抽象单位。物理像素与设备的硬件密度有关，任何设备的物理像素都是固定的。在有的设备中CSS设置1px可能会显得很粗，这就是因为，CSS中的1px并不能和设备上的1px划等号，它们中间有一个比例，就是物理像素/CSS像素</td>
</tr>
<tr>
<td style="text-align:center">%</td>
<td style="text-align:center">百分比，就是直接相对于父元素来说的</td>
</tr>
<tr>
<td style="text-align:center">em、rem</td>
<td style="text-align:center">em和rem相对于px更加的灵活，它们都是相对单位，区别是em是相对于父元素，rem相对于根元素。em相对于父元素的字体大小的倍数。rem相对于根元素的字体大小的放大倍数。</td>
</tr>
<tr>
<td style="text-align:center">vw、vh</td>
<td style="text-align:center">vw、vh和百分比很像。区别是百分比大部分相对于祖先元素，也有相对自身的情况，例如border-radius、translate等，而vw、vh是相对于视窗的尺寸。</td>
</tr>
</tbody>
</table>
<h3 id="px、em、rem的区别及使用场景">px、em、rem的区别及使用场景</h3>
<h3 id="两栏布局的实现代码、展示">两栏布局的实现<a href="../../Test/interview/CSS/%E4%B8%A4%E6%A0%8F%E5%B8%83%E5%B1%80.html">代码</a>、<a href="https://gulinga.github.io/1514-blog/Test/interview/CSS/%E4%B8%A4%E6%A0%8F%E5%B8%83%E5%B1%80.html">展示</a></h3>
<h3 id="三栏布局的实现代码、展示">三栏布局的实现<a href="../../Test/interview/CSS/%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80.html">代码</a>、<a href="https://gulinga.github.io/1514-blog/Test/interview/CSS/%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80.html">展示</a></h3>
<h3 id="水平垂直居中的实现代码、展示">水平垂直居中的实现<a href="../../Test/interview/CSS/%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD.html">代码</a>、<a href="https://gulinga.github.io/1514-blog/Test/interview/CSS/%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD.html">展示</a></h3>
<h3 id="如何根据设计稿进行移动端适配？">如何根据设计稿进行移动端适配？</h3>
<ol>
<li class="lvl-3">
<p>适配不同像素密度针对不同的像素密度，通过css的媒体查询选择不同精度的图片，以保证图片不会失真。</p>
</li>
<li class="lvl-3">
<p>适配不同屏幕大小我们应该使用rem,em,vw,vh等相对单位让页面的尺寸自适应。因为如果使用px，可能会导致在不同屏幕上的失真。</p>
</li>
</ol>
<h3 id="对Flex布局的理解及其使用场景"><a href="../../technology/flex%E5%B8%83%E5%B1%80.md">对Flex布局的理解及其使用场景</a></h3>
<h3 id="响应式设计的概念及基本原理代码、展示">响应式设计的概念及基本原理<a href="../../Test/interview/CSS/%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2.html">代码</a>、<a href="https://gulinga.github.io/1514-blog/Test/interview/CSS/%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2.html">展示</a></h3>
<p>响应式网站设计就是一个网站兼容多个平台，而不是pc一个版本，移动端一个版本。响应式设计是通过媒体查询(@media)检测不同设备的屏幕尺寸来做处理。关于兼容：页面头部必须有mate声明的viewport</p>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>react hooks性能优化</title>
    <url>/2022/11/21/interview/React/react%20hooks%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="react-hooks性能优化">react hooks性能优化</h2>
<h3 id="memo">memo</h3>
<p>使用memo包裹组件，使组件的props进行浅比较。可以避免父组件重新渲染，而子组件中不需要重新渲染的问题。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> memo<span class="token punctuation">,</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>val<span class="token punctuation">,</span>setVal<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">onClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">setVal</span><span class="token punctuation">(</span><span class="token operator">!</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'点击了按钮'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>Child <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>MemoChilds <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>onClick<span class="token punctuation">&#125;</span><span class="token operator">></span>刷新App<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'child 渲染了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      child
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">MemoChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'memochild 渲染了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      memochild
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> MemoChilds <span class="token operator">=</span> <span class="token function">memo</span><span class="token punctuation">(</span>MemoChild<span class="token punctuation">)</span></code></pre>
<h3 id="useMemo">useMemo</h3>
<p>使用useMemo包裹状态值的计算，避免重复的计算。它接收两个参数，第一项是回调函数，useMemo正是返回的该回调函数的返回值，第二项是一个数组，数组里面是依赖项，当依赖项改变的时候，useMemo中的回调函数才会重新计算值。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useMemo<span class="token punctuation">,</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>list<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>val<span class="token punctuation">,</span>setVal<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//普通计算list的和</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'普通计算list的和'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> sum <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span>curr</span><span class="token punctuation">)</span><span class="token operator">=></span>prev<span class="token operator">+</span>curr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//缓存计算list的和</span>
  <span class="token keyword">const</span> memoSum <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'缓存计算list的和'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span>curr</span><span class="token punctuation">)</span><span class="token operator">=></span>prev<span class="token operator">+</span>curr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span>list<span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> <span class="token function-variable function">onClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">setVal</span><span class="token punctuation">(</span><span class="token operator">!</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>sun<span class="token operator">:</span> <span class="token punctuation">&#123;</span>sum<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>memoSun<span class="token operator">:</span> <span class="token punctuation">&#123;</span>memoSum<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>onClick<span class="token punctuation">&#125;</span><span class="token operator">></span>重新渲染<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre>
<h3 id="useCallback">useCallback</h3>
<p>我们刚说了使用memo来包裹组件，使组件进行浅比较。但是如果我们给组件传递的是一个函数，当函数触发state值更新后，函数就会重新改变，所以子组件接收的函数会改变，这就使得子组件重复渲染。我们可以给函数加上useCallback，让函数只更新一次。所以，新手一般都会给每个函数都加上useCallback，这是没必要的。如果每个函数都加上useCallback，那么每个函数都要进行依赖项的判断，造成了额外的性能消耗。使用useCallback有以下两种情况</p>
<ol>
<li class="lvl-3">
<p>组件内部定义的函数，需要作为其他hooks的依赖项。</p>
</li>
<li class="lvl-3">
<p>组件内部定义的函数，需要传递给子组件，并且子组件被memo包裹。</p>
</li>
</ol>
<p>组件内部定义的函数，需要作为其他hooks的依赖项。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">count</span><span class="token punctuation">)</span> <span class="token operator">=></span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>add<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>count<span class="token operator">:</span> <span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre>
<p>组件内部定义的函数，需要传递给子组件，并且子组件被memo包裹。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> memo<span class="token punctuation">,</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>val<span class="token punctuation">,</span>setVal<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">onClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">setVal</span><span class="token punctuation">(</span><span class="token operator">!</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'点击了按钮'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>MemoChilds onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>onClick<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>onClick<span class="token punctuation">&#125;</span><span class="token operator">></span>刷新App<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">MemoChild</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>onClick<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'memochild 渲染了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      memochild
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> MemoChilds <span class="token operator">=</span> <span class="token function">memo</span><span class="token punctuation">(</span>MemoChild<span class="token punctuation">)</span></code></pre>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> memo<span class="token punctuation">,</span> useCallback<span class="token punctuation">,</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>val<span class="token punctuation">,</span>setVal<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> onClick <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">setVal</span><span class="token punctuation">(</span><span class="token operator">!</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'点击了按钮'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>MemoChilds onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>onClick<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>onClick<span class="token punctuation">&#125;</span><span class="token operator">></span>刷新App<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">MemoChild</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>onClick<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'memochild 渲染了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      memochild
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> MemoChilds <span class="token operator">=</span> <span class="token function">memo</span><span class="token punctuation">(</span>MemoChild<span class="token punctuation">)</span></code></pre>
<h3 id="使用memo，props进行浅比较的时候是怎么比较的呢？">使用memo，props进行浅比较的时候是怎么比较的呢？</h3>
<ol>
<li class="lvl-3">
<p>如果都是基本类型，直接比较结果，结果正确则返回true。</p>
</li>
<li class="lvl-3">
<p>比较是否都是对象，如果有一个不是则返回false。</p>
</li>
<li class="lvl-3">
<p>比较两个对象的属性的数量是否一样，不一样则返回false。</p>
</li>
<li class="lvl-3">
<p>比较两者的属性是否相同，属性值是否相同。</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">shallowEqual</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">objA</span><span class="token operator">:</span> mixed<span class="token punctuation">,</span> <span class="token literal-property property">objB</span><span class="token operator">:</span> mixed</span><span class="token punctuation">)</span><span class="token operator">:</span> boolean <span class="token punctuation">&#123;</span>
  <span class="token comment">// 下面的 is 相当于 === 的功能，只是对 + 0 和 - 0，以及 NaN 和 NaN 的情况进行了特殊处理</span>
  <span class="token comment">// 第一关：基础数据类型直接比较出结果</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is</span> <span class="token punctuation">(</span>objA<span class="token punctuation">,</span> objB<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 第二关：只要有一个不是对象数据类型就返回 false</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    <span class="token keyword">typeof</span> objA <span class="token operator">!==</span> <span class="token string">'object'</span> <span class="token operator">||</span>
    objA <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span>
    <span class="token keyword">typeof</span> objB <span class="token operator">!==</span> <span class="token string">'object'</span> <span class="token operator">||</span>
    objB <span class="token operator">===</span> <span class="token keyword">null</span>
  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 第三关：在这里已经可以保证两个都是对象数据类型，比较两者的属性数量</span>
  <span class="token keyword">const</span> keysA <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span> <span class="token punctuation">(</span>objA<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> keysB <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span> <span class="token punctuation">(</span>objB<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>keysA<span class="token punctuation">.</span>length <span class="token operator">!==</span> keysB<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 第四关：比较两者的属性是否相等，值是否相等</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> keysA<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
      <span class="token operator">!</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span> <span class="token punctuation">(</span>objB<span class="token punctuation">,</span> keysA <span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span>
      <span class="token operator">!</span><span class="token function">is</span> <span class="token punctuation">(</span>objA <span class="token punctuation">[</span>keysA <span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> objB <span class="token punctuation">[</span>keysA <span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<h2 id="参考资料">参考资料</h2>
<p>[1]<a href="https://juejin.cn/post/7076123870063198216">React Hooks 性能优化</a><br>
[2]<a href="https://juejin.cn/post/6844904023808540680">关于React Hooks和Immutable性能优化的实践，我写了一本掘金小册</a></p>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>React组件基础</title>
    <url>/2022/11/14/interview/React/%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="React组件基础">React组件基础</h2>
<h3 id="React事件机制">React事件机制</h3>
<p>在react中，如果你写<code>&lt;div onClick=&#123;()=&gt;&#123;&#125;&#125;&gt;&lt;/div&gt;</code>，react不是将click事件绑定到了真实DOM上，而是使用了document监听了所有的事件，采用事件代理的方式。react是将事件中的内容处理成函数，当事件冒泡到document后直接调用函数执行。这样做的好处就是：</p>
<ol>
<li class="lvl-3">
<p>不用给每个DOM都绑定事件，减少内存的消耗。</p>
</li>
<li class="lvl-3">
<p>在组件销毁时统一移除事件。</p>
</li>
</ol>
<p>react中，冒泡到document上的事件不是浏览器的原生事件，而是react自己实现的合成事件。</p>
<pre class="language-markup" data-language="markup"><code class="language-markup">//原始DOM
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
//react合成事件
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token punctuation">&#123;</span>fn<span class="token punctuation">&#125;</span></span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>合成事件的优点：</p>
<ol>
<li class="lvl-3">
<p>磨平了浏览器之间的兼容性问题。</p>
</li>
<li class="lvl-3">
<p>因为这个是react跨浏览器包装的，所以赋予了跨浏览器开发能力。</p>
</li>
<li class="lvl-3">
<p>减少了内存的消耗。</p>
</li>
</ol>
<h3 id="React高阶组件">React高阶组件</h3>
<p>react高阶组件就是一个函数，它接收一个组件作为参数，并且返回一个组件。</p>
<p>优点：</p>
<ol>
<li class="lvl-3">
<p>代码复用</p>
</li>
<li class="lvl-3">
<p>渲染劫持，鉴权</p>
</li>
<li class="lvl-3">
<p>state更改</p>
</li>
<li class="lvl-3">
<p>props更改</p>
</li>
</ol>
<p>示例：</p>
<ol>
<li class="lvl-3">
<p>鉴权</p>
</li>
</ol>
<pre class="language-react" data-language="react"><code class="language-react">import React from &#39;react&#39;

export default function AuthComponent(Component) &#123;
  const Test &#x3D; (props) &#x3D;&gt; &#123;
    const &#123; login &#125; &#x3D; props;
    if(login)&#123;
      return &lt;Component &#123;...props&#125;&#x2F;&gt;
    &#125;else&#123;
      return &lt;div&gt;没有登录&lt;&#x2F;div&gt;
    &#125;
  &#125;
  return Test;
&#125;</code></pre>
<pre class="language-react" data-language="react"><code class="language-react">import React from &#39;react&#39;
import AuthComponent from &#39;..&#x2F;AuthComponent&#39;

const Login &#x3D; function Login() &#123;
  return (
    &lt;div&gt;Login&lt;&#x2F;div&gt;
  )
&#125;

export default AuthComponent(Login);</code></pre>
<pre class="language-react" data-language="react"><code class="language-react">import Login from &quot;.&#x2F;components&#x2F;login&quot;;
function App() &#123;
  return (
    &lt;div&gt;
      &lt;Login login&#x3D;&#123;true&#125; &#x2F;&gt;
    &lt;&#x2F;div&gt;
  );
&#125;

export default App;</code></pre>
<ol start="2">
<li class="lvl-3">
<p>页面复用</p>
</li>
</ol>
<pre class="language-react" data-language="react"><code class="language-react">&#x2F;&#x2F;App.js
import &#123;NewList, AttentionList&#125; from &quot;.&#x2F;components&#x2F;list&quot;;
function App() &#123;
  return (
    &lt;div&gt;
      &lt;NewList &#x2F;&gt;
      &lt;AttentionList &#x2F;&gt;
    &lt;&#x2F;div&gt;
  );
&#125;

export default App;</code></pre>
<pre class="language-react" data-language="react"><code class="language-react">&#x2F;&#x2F;list.js
import React from &#39;react&#39;
import withFetching  from &#39;..&#x2F;WrappedComponent&#39;

const List &#x3D; (props) &#x3D;&gt; &#123;
  return (
    &lt;div&gt;&#123;props.data&#125;&lt;&#x2F;div&gt;
  )
&#125;

export const NewList &#x3D; withFetching(()&#x3D;&gt;&#39;NewList&#39;)(List);
export const AttentionList &#x3D; withFetching(()&#x3D;&gt;&#39;AttentionList&#39;)(List);</code></pre>
<pre class="language-react" data-language="react"><code class="language-react">&#x2F;&#x2F;WrappedComponent.js
import React, &#123; useEffect, useState &#125; from &#39;react&#39;

const withFetching &#x3D; fetching &#x3D;&gt; WrappedComponent &#x3D;&gt; &#123;
  const Fetch &#x3D; (props) &#x3D;&gt; &#123;
    const [data, setData] &#x3D; useState(&#39;&#39;);
    useEffect(()&#x3D;&gt;&#123;
      &#x2F;&#x2F;这里可以换成请求axios接口
      setData(fetching());
    &#125;,[]);
    return &lt;WrappedComponent data&#x3D;&#123;data&#125; &#123;...props&#125; &#x2F;&gt;
  &#125;
  return Fetch;
&#125;

export default withFetching;</code></pre>
<h3 id="哪些方法会触发React重新渲染，重新渲染render会做什么？">哪些方法会触发React重新渲染，重新渲染render会做什么？</h3>
<p>哪些方法会触发React重新渲染：</p>
<ol>
<li class="lvl-3">
<p>父组件的重新渲染。</p>
</li>
<li class="lvl-3">
<p>this.setState改变组件的值的时候，注意点是如果this.setState传入的是null则不会重新渲染render。</p>
</li>
<li class="lvl-3">
<p>使用useState hooks更新值的时候。重新渲染render会做什么：</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-2">
<p>会对新旧虚拟DOM进行比较，也就是diff算法。</p>
</li>
<li class="lvl-2">
<p>对新旧虚拟DOM树进行深度优先的遍历。</p>
</li>
</ul>
<h3 id="React状态组件和无状态组件">React状态组件和无状态组件</h3>
<h3 id="React受控组件和非受控组件">React受控组件和非受控组件</h3>
<p>受控组件：比如用户在使用表单来收集用户的输入时，<code>input</code>、<code>textearea</code>都要绑定一个onChange事件，当用户输入的时候就调用setState来改变值，这就让渲染的值与<code>input</code>上的value属性相对，让整个状态可控。</p>
<p>受控组件的缺点，如果输入框多的话，就需要给每一个输入框都绑定一个onChange事件，会让代码显得十分臃肿。所以就出现了非受控组件。</p>
<p>非受控组件：非受控组件就是使用ref从DOM上获取值，不用每个输入框都绑定一个onChange事件。</p>
<h3 id="React类组件和函数组件的相同点和不同点。">React类组件和函数组件的相同点和不同点。</h3>
<p>相同点：它们都是React中可复用的最小代码片段，所以他们的使用方式和显示效果都一样，你甚至可以把函数组件改写成类组件，把类组件改写成函数组件。</p>
<p>不同点：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>心智模型不同，类组件面向对象编程，主打的是生命周期和继承。而函数组件内核是函数式编程，主打immutable、没有副作用、引用透明。</p>
</li>
<li class="lvl-2">
<p>在以前的使用场景中，如果需要使用生命周期的话和继承的话就使用类组件，但是现在React Hook的推出，让生命周期的概念渐渐消失。</p>
</li>
<li class="lvl-2">
<p>性能优化上，类组件使用的shouldComponentUpdate来阻断渲染的更新，而函数组件使用React.memo来缓存渲染结果。</p>
</li>
<li class="lvl-2">
<p>上手程度上，我个人认为类组件较容易上手，但是现在React Hook推出，让函数式编程成了主流方案。</p>
</li>
<li class="lvl-2">
<p>函数组件比较轻量级，类组件的生命周期如果过多，就会显得很复杂，则不易优化。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>组件</tag>
      </tags>
  </entry>
  <entry>
    <title>React组件通信</title>
    <url>/2022/11/14/interview/React/%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="React组件通信">React组件通信</h2>
<h3 id="父组件向子组件传值">父组件向子组件传值</h3>
<p>props</p>
<pre class="language-react" data-language="react"><code class="language-react">&#x2F;&#x2F;parent
export const Parent &#x3D; () &#x3D;&gt; &#123;
  return &lt;Children name&#x3D;&quot;name&quot; &#x2F;&gt;
&#125;
&#x2F;&#x2F;children
export const Children &#x3D; (&#123;name&#125;) &#x3D;&gt; &#123;
  return &lt;div&gt;&#123;name&#125;&lt;&#x2F;div&gt;
&#125;</code></pre>
<h3 id="子组件向父组件传值">子组件向父组件传值</h3>
<p>props和函数回调</p>
<pre class="language-react" data-language="react"><code class="language-react">&#x2F;&#x2F;parent
export const Parent &#x3D; () &#x3D;&gt; &#123;
  return &lt;Children getName&#x3D;&#123;(name)&#x3D;&gt;&#123;
    console.log(name);
  &#125;&#125; &#x2F;&gt;
&#125;
&#x2F;&#x2F;children
export const Children &#x3D; (&#123;getName&#125;) &#x3D;&gt; &#123;
  return &lt;button onClick&#x3D;&#123;getName(&quot;name&quot;)&#125;&gt;按钮&lt;&#x2F;button&gt;
&#125;</code></pre>
<h3 id="多层嵌套组件传值">多层嵌套组件传值</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>面对多层嵌套组件，我们仍然可以通过使用props一层一层的传递，但是这样维护起来更加的麻烦，而且有的props的值可能不是中间组件所需要的。</p>
</li>
<li class="lvl-2">
<p>使用context来实现多层嵌套组件传值。</p>
</li>
<li class="lvl-2">
<p>当然你也可以使用redux来实现。</p>
</li>
</ul>
<p>这里说明一下context的实现方法。</p>
<pre class="language-react" data-language="react"><code class="language-react">&#x2F;&#x2F;App.js
import Children from &quot;.&#x2F;components&#x2F;Children&quot;;
import &#123; createContext, useState &#125; from &quot;react&quot;;
export const Context &#x3D; createContext();
function App() &#123;
  const [num, setNum] &#x3D; useState(1);
  return (
    &lt;Context.Provider value&#x3D;&#123;&#123;num, setNum&#125;&#125;&gt;
      parentComponent:&#123;num&#125;
      &lt;Children &#x2F;&gt;
    &lt;&#x2F;Context.Provider&gt;
  );
&#125;
export default App;</code></pre>
<pre class="language-react" data-language="react"><code class="language-react">&#x2F;&#x2F;children.js
import React, &#123; useContext &#125; from &#39;react&#39;
import &#123; Context &#125; from &#39;..&#x2F;..&#x2F;App&#39;;
import GrandSon from &#39;..&#x2F;grandSon&#39;

export default function Children() &#123;
  const &#123;num, setNum&#125; &#x3D; useContext(Context);
  return (
    &lt;&gt;
      childrenComponent:&#123;num&#125;
      &lt;GrandSon &#x2F;&gt;
    &lt;&#x2F;&gt;
  )
&#125;</code></pre>
<pre class="language-react" data-language="react"><code class="language-react">&#x2F;&#x2F;grandSon.js
import React, &#123; useContext &#125; from &#39;react&#39;
import &#123; Context &#125; from &#39;..&#x2F;..&#x2F;App&#39;;

export default function GrandSon() &#123;
  const &#123;num, setNum&#125; &#x3D; useContext(Context);
  return (
    &lt;div&gt;grandSonComponent:&#123;num&#125;&lt;&#x2F;div&gt;
  )
&#125;</code></pre>
<h3 id="兄弟组件传值">兄弟组件传值</h3>
<p>state提升可以找到兄弟组件的公共的父组件，将状态提升到父组件。</p>
<h3 id="不相关组件传值">不相关组件传值</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>给全局加上context</p>
</li>
<li class="lvl-2">
<p>使用redux来进行全局状态管理</p>
</li>
<li class="lvl-2">
<p>可以使用自定义事件通信（发布订阅模式）</p>
</li>
</ul>
<p>这里说一下自定义事件通信。需要使用一个<code>events</code>来实现。</p>
<pre class="language-none"><code class="language-none">npm install events --save</code></pre>
<p>创建一个ev.js文件</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//ev.js</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> EventEmitter <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"events"</span><span class="token punctuation">;</span> 
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<pre class="language-react" data-language="react"><code class="language-react">&#x2F;&#x2F;App.js
import Children from &quot;.&#x2F;components&#x2F;Children&quot;;
import Children2 from &quot;.&#x2F;components&#x2F;Children2&quot;;
function App() &#123;
  return (
    &lt;div&gt;
      &lt;Children &#x2F;&gt;
      &lt;Children2 &#x2F;&gt;
    &lt;&#x2F;div&gt;
  );
&#125;
export default App;</code></pre>
<pre class="language-react" data-language="react"><code class="language-react">&#x2F;&#x2F;children.js
import React, &#123; useEffect &#125; from &#39;react&#39;
import emitter from &#39;..&#x2F;..&#x2F;ev&#39;;
export default function Children() &#123;
  useEffect(() &#x3D;&gt; &#123;
    emitter.addListener(&#39;sendMsg&#39;, (msg) &#x3D;&gt; &#123;
      console.log(&quot;children receive message:&quot;,msg);
    &#125;)
  &#125;, [])
  return (
    &lt;div&gt;&lt;&#x2F;div&gt;
  )
&#125;</code></pre>
<pre class="language-react" data-language="react"><code class="language-react">&#x2F;&#x2F;children2.js
import React from &#39;react&#39;
import emitter from &#39;..&#x2F;..&#x2F;ev&#39;
export default function Children2() &#123;
  return (
    &lt;&gt;
      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; &#123;
        emitter.emit(&#39;sendMsg&#39;, &#39;children2 to children send message&#39;);
      &#125;&#125;&gt;点击&lt;&#x2F;button&gt;
    &lt;&#x2F;&gt;
  )
&#125;</code></pre>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>组件通信</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2组件通信</title>
    <url>/2022/11/11/interview/Vue/Vue2%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="Vue2组件通信">Vue2组件通信</h2>
<!-- 说到Vue2的组件通信我们肯定能想到，`父子组件通信`、`兄弟组件通信`、`跨级组件通信`。 -->
<h4 id="props">props</h4>
<p>说到父子组件通信我们最先想到的应该就是props，父组件通过给子组件传递props来进行父子组件通信。父组件通过下面这种方式向子组件传递值，下面是传递了一个动态的值，当然你也可以传递静态的值。</p>
<pre class="language-vue" data-language="vue"><code class="language-vue">&lt;Children :msg&#x3D;&quot;msg&quot;&#x2F;&gt;</code></pre>
<p>子组件通过props接收传递的值。</p>
<pre class="language-vue" data-language="vue"><code class="language-vue">props: [&#39;msg&#39;]</code></pre>
<p>子组件接收到值后就可以直接使用<code>this.msg</code>的方式获取到。除了上面这种props的写法，你还可以给props的值设置不同的类型。</p>
<pre class="language-vue" data-language="vue"><code class="language-vue">props: &#123;
  msg: String
&#125;,</code></pre>
<p>那怎么子组件怎么给父组件传递值呢？当然，你仍然可以使用props，父组件给子组件传递一个函数，子组件通过函数改变父组件的值。</p>
<h4 id="sync">.sync</h4>
<p>帮助父子组件双向绑定，当修改了一方的值，另一方的值也会跟着改变。</p>
<pre class="language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F;parent.vue
&lt;template&gt;
  &lt;div&gt;
    &lt;Children :msg.sync&#x3D;&quot;msg&quot;&#x2F;&gt;
    &#123;&#123;msg&#125;&#125;
  &lt;&#x2F;div&gt;
&lt;&#x2F;template&gt;
&lt;script&gt;
import Children from &#39;.&#x2F;components&#x2F;Children.vue&#39;;
export default &#123;
  name: &#39;App&#39;,
  components: &#123;
    Children
  &#125;,
  data()&#123;
    return &#123;
      msg: &#39;parent component&#39;
    &#125;
  &#125;
&#125;
&lt;&#x2F;script&gt;</code></pre>
<pre class="language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F;children.vue
&lt;template&gt;
  &lt;button @click&#x3D;&quot;modifyPraent&quot;&gt;修改父组件的msg&lt;&#x2F;button&gt;
&lt;&#x2F;template&gt;
&lt;script&gt;
export default &#123;
  name: &#39;Children&#39;,
  props: [&#39;msg&#39;],
  computed: &#123;
    childrenMsg: &#123;
      get()&#123;
        return this.msg;
      &#125;,
      set(value)&#123;
        this.$emit(&#39;update:msg&#39;, value);
      &#125;
    &#125;
  &#125;,
  methods:&#123;
    modifyPraent()&#123;
      this.childrenMsg &#x3D; &#39;children modify parent component&#39;
    &#125;
  &#125;
&#125;
&lt;&#x2F;script&gt;</code></pre>
<h4 id="v-module">v-module</h4>
<pre class="language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F;parent.vue
&lt;template&gt;
  &lt;div&gt;
    &lt;Children v-model&#x3D;&quot;msg&quot;&#x2F;&gt;
    &lt;button @click&#x3D;&quot;modify&quot;&gt;click modify parent msg property with data&lt;&#x2F;button&gt;
    parent msg:&#123;&#123;msg&#125;&#125;
  &lt;&#x2F;div&gt;
&lt;&#x2F;template&gt;
&lt;script&gt;
import Children from &#39;.&#x2F;components&#x2F;Children.vue&#39;;
export default &#123;
  name: &quot;App&quot;,
  components: &#123;
    Children
  &#125;,
  data()&#123;
    return &#123;
      msg: &#39;parent component data&#39;,
    &#125;
  &#125;,
  methods:&#123;
    modify()&#123;
      this.msg &#x3D; &#39;click parent button modify msg&#39;
    &#125;,
    getMsg()&#123;
      return this.msg
    &#125;
  &#125;
&#125;;
&lt;&#x2F;script&gt;</code></pre>
<pre class="language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F;children.vue
&lt;template&gt;
  &lt;div&gt;
    &lt;div&gt;children msg:&#123;&#123;value&#125;&#125;&lt;&#x2F;div&gt;
    &lt;button @click&#x3D;&quot;getParent&quot;&gt;点击改变父组件msg&lt;&#x2F;button&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;template&gt;
&lt;script&gt;
export default &#123;
  name: &#39;Children&#39;,
  props: [&#39;value&#39;],
  methods:&#123;
    getParent()&#123;
      this.$emit(&#39;input&#39;, &#39;children component modify data&#39;);
    &#125;
  &#125;
&#125;
&lt;&#x2F;script&gt;</code></pre>
<h4 id="ref">ref</h4>
<p>ref如果在普通的DOM元素上就是DOM，但是如果ref在组件上是获取的这个组件的实例，所以如果父组件可以通过ref获取子组件的实例来控制子组件。</p>
<p>可以在父组件控制子组件的值修改。</p>
<pre class="language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F;parent.vue
&lt;template&gt;
  &lt;Children ref&#x3D;&quot;child&quot;&#x2F;&gt;
&lt;&#x2F;template&gt;
&lt;script&gt;
import Children from &#39;.&#x2F;components&#x2F;Children.vue&#39;;
export default &#123;
  name: &quot;App&quot;,
  components: &#123;
    Children
  &#125;,
  mounted()&#123;
    this.$refs.child.message();
  &#125;
&#125;;
&lt;&#x2F;script&gt;</code></pre>
<pre class="language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F;children.vue
&lt;template&gt;
  &lt;div&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;template&gt;
&lt;script&gt;
export default &#123;
  name: &#39;Children&#39;,
  methods:&#123;
    message()&#123;
      console.log(&#39;子组件&#39;);
    &#125;
  &#125;
&#125;
&lt;&#x2F;script&gt;</code></pre>
<h4 id="emit-v-on">$emit / v-on</h4>
<p>子组件通过$emit向父组件传递信息</p>
<pre class="language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F;parent.vue
&lt;template&gt;
  &lt;div&gt;
    &lt;Children v-on:sendChild&#x3D;&quot;getChild&quot;&#x2F;&gt;
    &lt;!-- 简写 --&gt;
    &lt;Children @sendChild&#x3D;&quot;getChild&quot;&#x2F;&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;template&gt;
&lt;script&gt;
import Children from &#39;.&#x2F;components&#x2F;Children.vue&#39;;
export default &#123;
  name: &quot;App&quot;,
  components: &#123;
    Children
  &#125;,
  methods:&#123;
    getChild(msg)&#123;
      console.log(msg);
    &#125;
  &#125;
&#125;;
&lt;&#x2F;script&gt;</code></pre>
<pre class="language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F;children.vue
&lt;template&gt;
  &lt;div&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;template&gt;
&lt;script&gt;
export default &#123;
  name: &#39;Children&#39;,
  mounted()&#123;
    this.$emit(&quot;sendChild&quot;,&#39;子组件向父组件发送信息&#39;)
  &#125;
&#125;
&lt;&#x2F;script&gt;</code></pre>
<h4 id="attrs-listeners">$attrs / $listeners</h4>
<p>父组件给子孙组件传递数据该怎么办呢？如果我们使用props一层一层传的话，会显得十分麻烦，这时候我们会想到使用Vuex，但是使用Vuex的话又有种大材小用的感觉。那么这时候我们就可以使用$attrs和$listeners。<br>
$attrs的定义是这样的，包含父作用域上除<code>class选择器</code>和<code>style样式</code>之外的非<code>props</code>合集。<br>
$listeners的定义是这样的，父作用域里的<code>.native</code>除外的<code>监听事件</code>集合。</p>
<pre class="language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F;parent.vue
&lt;template&gt;
  &lt;Children
    :name &#x3D; &quot;name&quot;
    :age &#x3D; &quot;age&quot;
    :sex &#x3D; &quot;sex&quot;
  &#x2F;&gt;
&lt;&#x2F;template&gt;
&lt;script&gt;
import Children from &#39;.&#x2F;components&#x2F;Children.vue&#39;;
export default &#123;
  name: &quot;App&quot;,
  components: &#123;
    Children
  &#125;,
  data()&#123;
    return &#123;
      name: &#39;name&#39;,
      age: &#39;age&#39;,
      sex: &#39;sex&#39;
    &#125;
  &#125;
&#125;;
&lt;&#x2F;script&gt;</code></pre>
<pre class="language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F;children.vue
&lt;template&gt;
  &lt;Grandson v-bind&#x3D;&quot;$attrs&quot;&#x2F;&gt;
&lt;&#x2F;template&gt;
&lt;script&gt;
import Grandson from &#39;.&#x2F;Grandson.vue&#39;;
export default &#123;
  name: &#39;Children&#39;,
  props:[&#39;name&#39;],
  components:&#123;
    Grandson
  &#125;,
  mounted()&#123;
    &#x2F;&#x2F;这里输出&#123;age: &#39;age&#39;, sex: &#39;sex&#39;&#125;，因为我们props里面写了name，如果不写name的话也会输出name:&#39;name&#39;
    console.log(&#39;children&#39;,this.$attrs);
  &#125;
&#125;
&lt;&#x2F;script&gt;</code></pre>
<pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;
  &lt;div&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;template&gt;
&lt;script&gt;
export default &#123;
  name: &#39;Grandson&#39;,
  props: [&#39;age&#39;],
  mounted()&#123;
    &#x2F;&#x2F;这里输出&#123;sex: &#39;sex&#39;&#125;，如果我们没在props里面写age，会输出&#123;sex: &#39;sex&#39;, age: &#39;age&#39;&#125;
    console.log(&#39;grandson&#39;,this.$attrs);
  &#125;
&#125;
&lt;&#x2F;script&gt;</code></pre>
<h4 id="children-parent">$children / $parent</h4>
<p>$children: 当前实例的直接子组件，不包括孙组件，不能保证顺序，并且也不是响应式的。<br>
$parent: 获取他的第一个父实例，如果有父实例的话。</p>
<pre class="language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F;parents.vue
&lt;template&gt;
  &lt;Children&#x2F;&gt;
&lt;&#x2F;template&gt;
&lt;script&gt;
import Children from &#39;.&#x2F;components&#x2F;Children.vue&#39;;
export default &#123;
  name: &#39;App&#39;,
  components: &#123;
    Children
  &#125;,
  data()&#123;
    return &#123;
      msg: &#39;parent component&#39;
    &#125;
  &#125;,
  mounted()&#123;
    &#x2F;&#x2F;输出children component
    console.log(this.$children[0].msg);
  &#125;
&#125;
&lt;&#x2F;script&gt;</code></pre>
<pre class="language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F;children.vue
&lt;template&gt;
  &lt;div&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;template&gt;
&lt;script&gt;
export default &#123;
  name: &#39;Children&#39;,
  data()&#123;
    return &#123;
      msg: &#39;children component&#39;
    &#125;
  &#125;,
  mounted()&#123;
    &#x2F;&#x2F;输出parent component
    console.log(this.$parent.msg);
  &#125;
&#125;
&lt;&#x2F;script&gt;</code></pre>
<h4 id="provide-inject">provide / inject</h4>
<pre class="language-yarm" data-language="yarm"><code class="language-yarm">&#x2F;&#x2F;我们可以使用这种方法来传递数据，但是这样的数据只能写死，不能从this中获取
provide:&#123;
  msg: &#39;this is freezing data&#39;
&#125;,</code></pre>
<pre class="language-yarm" data-language="yarm"><code class="language-yarm">&#x2F;&#x2F;我们通过这种方法可以传递this中的数据
provide()&#123;
  return &#123;
    name:&quot;name&quot;,
    msg: this.msg &#x2F;&#x2F;data&#96;s property
  &#125;
&#125;,</code></pre>
<pre class="language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F;parent.vue
&lt;template&gt;
  &lt;div&gt;
    &lt;Children&#x2F;&gt;
    &lt;button @click&#x3D;&quot;modify&quot;&gt;click modify parent msg property with data&lt;&#x2F;button&gt;
    parent msg:&#123;&#123;msg&#125;&#125;
  &lt;&#x2F;div&gt;
&lt;&#x2F;template&gt;
&lt;script&gt;
import Children from &#39;.&#x2F;components&#x2F;Children.vue&#39;;
export default &#123;
  name: &quot;App&quot;,
  components: &#123;
    Children
  &#125;,
  data()&#123;
    return &#123;
      msg: &#39;parent component data&#39;,
      change: this.msg
    &#125;
  &#125;,
  provide()&#123;
    return &#123;
      name:&quot;name&quot;,
      msg: this.msg,
      getMsg: this.getMsg
    &#125;
  &#125;,
  methods:&#123;
    modify()&#123;
      this.msg &#x3D; &#39;click parent button modify msg&#39;
    &#125;,
    getMsg()&#123;
      return this.msg
    &#125;
  &#125;
&#125;;
&lt;&#x2F;script&gt;</code></pre>
<pre class="language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F;children.vue
&lt;template&gt;
  &lt;div&gt;
    &lt;div&gt;children msg:&#123;&#123;msg&#125;&#125;&lt;&#x2F;div&gt;
    &lt;button @click&#x3D;&quot;getParent&quot;&gt;点击获取父组件msg&lt;&#x2F;button&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;template&gt;
&lt;script&gt;
export default &#123;
  name: &#39;Children&#39;,
  inject: [&#39;msg&#39;, &#39;getMsg&#39;],
  mounted()&#123;
    console.log(this.msg); 
  &#125;,
  methods:&#123;
    getParent()&#123;
      console.log(this.getMsg());
    &#125;
  &#125;
&#125;
&lt;&#x2F;script&gt;</code></pre>
<h4 id="EventBus">EventBus</h4>
<p>EventBus是中央事件总线。首先我们先定义事件总线。</p>
<pre class="language-yarm" data-language="yarm"><code class="language-yarm">&#x2F;&#x2F;方法一
&#x2F;&#x2F;我们可以创建一个js文件
import Vue from &quot;vue&quot;
export default new Vue()
&#x2F;&#x2F;然后在要用到的地方，直接import引入使用

&#x2F;&#x2F;方法二
&#x2F;&#x2F;直接挂载到Vue的prototype上
&#x2F;&#x2F;main.js
Vue.prototype.$bus &#x3D; new Vue()

&#x2F;&#x2F;方法三
&#x2F;&#x2F;直接注入到Vue根对象上
&#x2F;&#x2F;main.js
new Vue(&#123;
    el:&quot;#app&quot;,
    data:&#123;
        Bus: new Vue()
    &#125;
&#125;)</code></pre>
<pre class="language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F;parent.vue
&lt;template&gt;
  &lt;div&gt;
    &lt;Children&#x2F;&gt;
    &lt;button @click&#x3D;&quot;send&quot;&gt;click send msg&lt;&#x2F;button&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;template&gt;
&lt;script&gt;
import Children from &#39;.&#x2F;components&#x2F;Children.vue&#39;;
export default &#123;
  name: &quot;App&quot;,
  components: &#123;
    Children
  &#125;,
  methods:&#123;
    send()&#123;
      this.$bus.$emit(&#39;sendMsg&#39;,&#39;parent send msg&#39;);
    &#125;
  &#125;
&#125;;
&lt;&#x2F;script&gt;</code></pre>
<pre class="language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F;children.vue
&lt;template&gt;
  &lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;div&gt;
&lt;&#x2F;template&gt;
&lt;script&gt;
export default &#123;
  name: &#39;Children&#39;,
  data()&#123;
    return &#123;
      msg: &#39;&#39;
    &#125;
  &#125;,
  mounted()&#123;
    &#x2F;&#x2F;监听sendMsg
    this.$bus.$on(&#39;sendMsg&#39;, data &#x3D;&gt; &#123;
      this.msg &#x3D; data;
    &#125;)
  &#125;,
  beforeDestroy()&#123;
    &#x2F;&#x2F;卸载监听
    this.$bus.$off(&#39;sendMsg&#39;);
  &#125;
&#125;
&lt;&#x2F;script&gt;</code></pre>
<h4 id="Vuex">Vuex</h4>
<h4 id="root">$root</h4>
<p>$root可以拿到App.vue里面的数据和方法。</p>
<pre class="language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F;children.vue
&lt;template&gt;
  &lt;div&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;template&gt;
&lt;script&gt;
export default &#123;
  name: &#39;Children&#39;,
  mounted()&#123;
    console.log(this.$root);
  &#125;
&#125;
&lt;&#x2F;script&gt;</code></pre>
<h4 id="slot">slot</h4>
<p>子组件的数据通过插槽的方式传递给父组件，然后父组件再插回去，父组件在插回去的时候可以对数据做一下处理。</p>
<pre class="language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F;parent.vue
&lt;template&gt;
  &lt;Children v-slot&#x3D;&quot;slotProps&quot;&gt;
    &#123;&#123;msg + &quot;:&quot; + slotProps.msg&#125;&#125;
  &lt;&#x2F;Children&gt;
&lt;&#x2F;template&gt;
&lt;script&gt;
import Children from &#39;.&#x2F;components&#x2F;Children.vue&#39;;
export default &#123;
  name: &quot;App&quot;,
  components: &#123;
    Children
  &#125;,
  data()&#123;
    return &#123;
      msg: &#39;parent&#39;
    &#125;
  &#125;
&#125;;
&lt;&#x2F;script&gt;</code></pre>
<pre class="language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F;children.vue
&lt;template&gt;
  &lt;div&gt;
    &lt;slot :msg&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;slot&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;template&gt;
&lt;script&gt;
export default &#123;
  name: &#39;Children&#39;,
  data()&#123;
    return &#123;
      msg: &#39;children component data&#39;
    &#125;
  &#125;
&#125;
&lt;&#x2F;script&gt;</code></pre>]]></content>
      <categories>
        <category>面试准备</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>组件通信</tag>
        <tag>Vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3组件通信</title>
    <url>/2022/11/12/interview/Vue/Vue3%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="Vue3组件通信">Vue3组件通信</h2>
<h3 id="props">props</h3>
<h3 id="emit">$emit</h3>
<h3 id="expose-ref">expose / ref</h3>
<h3 id="attrs">$attrs</h3>
<h3 id="v-model">v-model</h3>
<h3 id="provide-inject">provide / inject</h3>
<h3 id="Vuex">Vuex</h3>
<h3 id="mitt">mitt</h3>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>组件通信</tag>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue生命周期</title>
    <url>/2022/11/12/interview/Vue/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="Vue生命周期">Vue生命周期</h2>
<p><img src="/images/vue/lifecycle.png" alt="vue生命周期" loading="lazy"></p>
<p>在vue中，执行生命周期函数都是调用的callHook函数。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">callHook</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> hook</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// #7573 disable dep collection when invoking lifecycle hooks</span>
  <span class="token function">pushTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> handlers <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">[</span>hook<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>handlers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> handlers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        handlers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">handleError</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> <span class="token punctuation">(</span>hook <span class="token operator">+</span> <span class="token string">" hook"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_hasHookEvent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    vm<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'hook:'</span> <span class="token operator">+</span> hook<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">popTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>callHook的作用就是拿到实例上$options上的hook，也就是生命周期函数的数组。然后调用某个生命周期钩子注册所有的回调函数。</p>
<p>当实例化vue的时候，会先执行_init函数，beforeCreate和cteated生命周期就是在这里定义的。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_init</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options<span class="token operator">?</span><span class="token operator">:</span> Object</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
  <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">'beforeCreate'</span><span class="token punctuation">)</span>
  <span class="token function">initInjections</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token comment">// resolve injections before data/props</span>
  <span class="token function">initState</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>
  <span class="token function">initProvide</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token comment">// resolve provide after data/props</span>
  <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">'created'</span><span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>我们可以看到initState函数是在beforeCreate后调用的，而initState函数是初始化props、data、methods、watch、computed等属性值的，所以，没有办法在beforeCreate中获取props、data、methods、watch、computed等属性值。而在created中可以获取到。</p>
<p>在这两个生命周期函数中并没有渲染DOM，所以我们不能够访问DOM。</p>
<p>我们还可以看到inject是在data、props之前初始化的，provide是在data、props之后初始化的。</p>
<p>beforeMount是在mountComponent函数中调用的。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">mountComponent</span> <span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">vm</span><span class="token operator">:</span> Component<span class="token punctuation">,</span>
  <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token operator">?</span>Element<span class="token punctuation">,</span>
  hydrating<span class="token operator">?</span><span class="token operator">:</span> boolean</span>
<span class="token punctuation">)</span><span class="token operator">:</span> Component <span class="token punctuation">&#123;</span>
  vm<span class="token punctuation">.</span>$el <span class="token operator">=</span> el
  <span class="token comment">// ...</span>
  <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">'beforeMount'</span><span class="token punctuation">)</span>

  <span class="token keyword">let</span> updateComponent
  <span class="token comment">/* istanbul ignore if */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>performance <span class="token operator">&amp;&amp;</span> mark<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">updateComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> name <span class="token operator">=</span> vm<span class="token punctuation">.</span>_name
      <span class="token keyword">const</span> id <span class="token operator">=</span> vm<span class="token punctuation">.</span>_uid
      <span class="token keyword">const</span> startTag <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">vue-perf-start:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>
      <span class="token keyword">const</span> endTag <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">vue-perf-end:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>

      <span class="token function">mark</span><span class="token punctuation">(</span>startTag<span class="token punctuation">)</span>
      <span class="token keyword">const</span> vnode <span class="token operator">=</span> vm<span class="token punctuation">.</span><span class="token function">_render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token function">mark</span><span class="token punctuation">(</span>endTag<span class="token punctuation">)</span>
      <span class="token function">measure</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">vue </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> render</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> startTag<span class="token punctuation">,</span> endTag<span class="token punctuation">)</span>

      <span class="token function">mark</span><span class="token punctuation">(</span>startTag<span class="token punctuation">)</span>
      vm<span class="token punctuation">.</span><span class="token function">_update</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> hydrating<span class="token punctuation">)</span>
      <span class="token function">mark</span><span class="token punctuation">(</span>endTag<span class="token punctuation">)</span>
      <span class="token function">measure</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">vue </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> patch</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> startTag<span class="token punctuation">,</span> endTag<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">updateComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      vm<span class="token punctuation">.</span><span class="token function">_update</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token function">_render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hydrating<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// we set this to vm._watcher inside the watcher's constructor</span>
  <span class="token comment">// since the watcher's initial patch may call $forceUpdate (e.g. inside child</span>
  <span class="token comment">// component's mounted hook), which relies on vm._watcher being already defined</span>
  <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> updateComponent<span class="token punctuation">,</span> noop<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    <span class="token function">before</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_isMounted<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">'beforeUpdate'</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment">/* isRenderWatcher */</span><span class="token punctuation">)</span>
  hydrating <span class="token operator">=</span> <span class="token boolean">false</span>

  <span class="token comment">// manually mounted instance, call mounted on self</span>
  <span class="token comment">// mounted is called for render-created child components in its inserted hook</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$vnode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    vm<span class="token punctuation">.</span>_isMounted <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">'mounted'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> vm
<span class="token punctuation">&#125;</span></code></pre>
<p>我们可以看到在mountComponent中<code>vm.$el = el;</code>，将el挂载到了实例的$el上。然后执行beforeMount生命周期函数，但是这时候还是没有渲染DOM，我们看到这里使用了<code>callHook(vm, 'mounted');</code>，但是这里判断了一下vm.$vnode，如果是通过new vue的初始化过程就调用<code>callHook(vm, 'mounted');</code>，如果是组件的话，不是在这里调用的mounted生命周期函数。组件的mounted生命周期是在虚拟DOM patch到真实DOM上之后再调用的callHook来调用mounted生命周期。</p>
<p>beforeUpdate的执行时机也在mountComponent中。在mountComponent中有一个<code>new Watcher</code>在<code>new Watcher</code>里的before函数里执行的callHook。注意的是，这里判断了一下vm._isMounted，当组件已经mounted之后才会去调用beforeUpdate这个生命周期函数。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> updateComponent<span class="token punctuation">,</span> noop<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
   <span class="token function">before</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_isMounted<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">'beforeUpdate'</span><span class="token punctuation">)</span>
     <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment">/* isRenderWatcher */</span><span class="token punctuation">)</span></code></pre>
<p>Watcher就是监听数据变化的函数，采用的是<code>发布订阅模式</code>和<code>数据劫持</code>结合的方法来实现。其中数据劫持在Vue2中使用的Object.defineProperty()的setter和getter属性，在Vue3中使用的<code>代理模式</code>，也就是<code>proxy</code>。</p>
<p>updated执行的时机就是当Wather监听到数据变化后，就会去遍历<code>谁订阅了这个数据</code>，当mounted存在时才会去调用callHook执行updated。</p>
<p>beforeDestory和destroy生命周期函数会在组件销毁的时候调用，它们都在$destroy方法中。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">$destroy</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token literal-property property">vm</span><span class="token operator">:</span> Component <span class="token operator">=</span> <span class="token keyword">this</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_isBeingDestroyed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">'beforeDestroy'</span><span class="token punctuation">)</span>
  vm<span class="token punctuation">.</span>_isBeingDestroyed <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token comment">// remove self from parent</span>
  <span class="token keyword">const</span> parent <span class="token operator">=</span> vm<span class="token punctuation">.</span>$parent
  <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>parent<span class="token punctuation">.</span>_isBeingDestroyed <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>abstract<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">remove</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>$children<span class="token punctuation">,</span> vm<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// teardown watchers</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_watcher<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    vm<span class="token punctuation">.</span>_watcher<span class="token punctuation">.</span><span class="token function">teardown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">let</span> i <span class="token operator">=</span> vm<span class="token punctuation">.</span>_watchers<span class="token punctuation">.</span>length
  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    vm<span class="token punctuation">.</span>_watchers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">teardown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// remove reference from data ob</span>
  <span class="token comment">// frozen object may not have observer.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_data<span class="token punctuation">.</span>__ob__<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    vm<span class="token punctuation">.</span>_data<span class="token punctuation">.</span>__ob__<span class="token punctuation">.</span>vmCount<span class="token operator">--</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// call the last hook...</span>
  vm<span class="token punctuation">.</span>_isDestroyed <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token comment">// invoke destroy hooks on current rendered tree</span>
  vm<span class="token punctuation">.</span><span class="token function">__patch__</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_vnode<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
  <span class="token comment">// fire destroyed hook</span>
  <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">'destroyed'</span><span class="token punctuation">)</span>
  <span class="token comment">// turn off all instance listeners.</span>
  vm<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// remove __vue__ reference</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$el<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    vm<span class="token punctuation">.</span>$el<span class="token punctuation">.</span>__vue__ <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// release circular reference (#6759)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$vnode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    vm<span class="token punctuation">.</span>$vnode<span class="token punctuation">.</span>parent <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>我们可以看到beforeDestory生命周期函数在$destory的最开始执行，接着执行一系列的销毁动作，包括从parent中的$children中删除自身。删除watcher，然后渲染的虚拟DOM执行销毁的钩子函数，执行完后调用destoryed生命周期函数。</p>
<p>activated和deactivated是专门为kppe-alive组件定制的生命周期函数。</p>
<p>总结：</p>
<ol>
<li class="lvl-3">
<p>创建阶段<br>
new 一个vue的实例，会先进入_inti函数，beforeCreate和created两个生命周期函数都在这里面，先调用callHook来执行beforeCreate生命周期函数，然后会调用initState函数来进行props、methods、data等数据的初始化，然后调用callHook来执行created生命周期。</p>
</li>
<li class="lvl-3">
<p>渲染阶段先判断el是否存在，如果不存在就继续判断就调用vm.$mount(el)，然后执行下一步，意味着生命周期的结束，如果存在el就继续执行。</p>
</li>
</ol>
<p>判断是否包含template这个属性，如果有就把template解析成一个render函数，如果没有template就是将它外部的HTML作为模板编译。beforeMount和mounted两个生命周期函数都是在mountComponent函数里面调用的。beforeMount只会在有了render函数的时候才执行，然后调用render函数，然后调用callHook执行mounted生命周期函数。此时的vue实例上有了$el属性，可以在mounted中获取到，beforeMount无法获取到$el。</p>
<ol start="3">
<li class="lvl-3">
<p>更新阶段在Vue中使用的数据劫持和发布订阅来进行数据改变后发起通知的，当data中的数据发生变化的时候，会执行beforeUpdate生命周期函数，然后经过虚拟DOM，最后调用updated生命周期函数。</p>
</li>
<li class="lvl-3">
<p>销毁阶段<br>
beforeDestroy和destroyed都是在$destroy函数中执行的，会在$destroy的最开始执行beforeDestroy，然后将进行一系列的销毁，销毁自身的数据，将parent中的$children删除自身，删除Watcher等，然后再渲染虚拟DOM，执行完后调用destroyed生命周期函数</p>
</li>
</ol>
<h2 id="一般在哪个生命周期请求异步数据">一般在哪个生命周期请求异步数据</h2>
<p>我们可以在created、beforeMount、mounted中请求异步数据，因为在这三个生命周期中，data已经创建了，可以进行数据的赋值操作。推荐在created中进行异步请求，created中请求的数据比beforeMount、mounted中的请求更快的获取到服务器的数据，用户体验更好。最重要的是SSR不支持beforeMount、mounted。</p>
<h2 id="vue父子组件执行顺序">vue父子组件执行顺序</h2>
<h3 id="创建和渲染阶段">创建和渲染阶段</h3>
<pre class="language-none"><code class="language-none">父beforeCreate -&gt; 父created -&gt; 父beforeMount -&gt; 
子boforeCreate -&gt; 子created -&gt; 子beforeMount -&gt; 子mounted -&gt;
父mounted</code></pre>
<h3 id="更新过程">更新过程</h3>
<pre class="language-none"><code class="language-none">父beforeUpdate -&gt;
子beforeUpdate -&gt; 子updated -&gt;
父updated</code></pre>
<h3 id="销毁过程">销毁过程</h3>
<pre class="language-none"><code class="language-none">父beforeDestroy -&gt;
子beforeDestroy -&gt; 子destroyed -&gt;
父destroyed</code></pre>
<h2 id="keep-alive中的生命周期有哪些？">keep-alive中的生命周期有哪些？</h2>
<p>keep-alive是vue提供的一个内置组件，用来进行数据的缓存，在切换组件的时候，数据仍然在内存中，防止重复渲染DOM。keep-alive包裹后会多两个生命周期函数，activated和deactivated，当组件切走，会进行缓存，然后触发deactivated生命周期函数，当组件被切回来，去缓存里面找该组件，触发activated生命周期函数。</p>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>储存</title>
    <url>/2022/10/22/interview/js%E5%9F%BA%E7%A1%80/0.1+0.2!=0.3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="0-1-0-2-0-3">0.1+0.2!=0.3</h2>
<p>JS采用的是IEEE 754双精度版本，采用IEEE 754双精度的语言都会有这个问题。</p>
<p>计算机是通过二进制来存储东西的，0.1在二进制中是无限循环的一些数字，其实很多的十进制小数用二进制表示都是无限循环的。这样其实没问题。但是JS采用的浮点标准会裁剪掉我们的数组。</p>
<p>因为JS浮点标准的裁剪，就造成了精度丢失。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.100000000000000002</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0.1</span></code></pre>
<p>0.1变成了0.100000000000000002<br>
0.2变成了0.200000000000000002<br>
所以0.1+0.2=0.300000000000000004</p>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>js基础</category>
      </categories>
  </entry>
  <entry>
    <title>js大数</title>
    <url>/2022/10/22/interview/js%E5%9F%BA%E7%A1%80/js%E5%A4%A7%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="js大数">js大数</h2>
<h3 id="大数定义">大数定义</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> big1 <span class="token operator">=</span> <span class="token number">9007199254740991n</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> big2 <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">9007199254740991</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>我们可以使用BigInt函数来定义大数，也可以使用数字后面加n的形式来定义大数。</p>
<h3 id="大数注意点">大数注意点</h3>
<p>大数和number类型相似，但是不能用<code>Math对象</code>中的方法，大数不支持<code>&gt;&gt;&gt;</code>运算，大数和number类型不能混合运算，大数在转换成number类型是精度会缺失。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> rounded <span class="token operator">=</span> <span class="token number">5n</span> <span class="token operator">/</span> <span class="token number">2n</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rounded<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2n</span></code></pre>
<h3 id="大数的比较">大数的比较</h3>
<p>大数于number比较，是宽松比较</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0n</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0n</span><span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1n</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2n</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2n</span><span class="token operator">>=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span></code></pre>
<p>对于被Object包裹的大数，要使用对象的比较方式，只有是同一个对象才相等。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0n</span> <span class="token operator">===</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token number">0n</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Object</span><span class="token punctuation">(</span><span class="token number">0n</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token number">0n</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Object</span><span class="token punctuation">(</span><span class="token number">0n</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token number">0n</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span></code></pre>
<p>但是又有一个例外</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0n</span> <span class="token operator">==</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token number">0n</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span></code></pre>
<h3 id="JSON中的大数">JSON中的大数</h3>
<p>对于大数使用JSON.stringify会报错，因为大数在JSON中不会序列化。如果非要使用JSON.stringify可以使用toJSON函数。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">BigInt</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">toJSON</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//JSON.stringify 现在生成如下字符串，而不是抛出异常</span></code></pre>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>js基础</category>
      </categories>
  </entry>
  <entry>
    <title>js类型</title>
    <url>/2022/10/22/interview/js%E5%9F%BA%E7%A1%80/js%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="js类型">js类型</h2>
<p>js的类型分为<code>基本类型(原始类型)</code>和<code>引用类型(对象类型)</code></p>
<h3 id="基本类型">基本类型</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>undefined</p>
</li>
<li class="lvl-2">
<p>null</p>
</li>
<li class="lvl-2">
<p>number</p>
</li>
<li class="lvl-2">
<p>string</p>
</li>
<li class="lvl-2">
<p>boolean</p>
</li>
<li class="lvl-2">
<p>symbol</p>
</li>
<li class="lvl-2">
<p>bigint</p>
</li>
</ul>
<p><strong>基本类型都是储存的值，自身没有函数可以调用。</strong></p>
<p>特例：</p>
<ol>
<li class="lvl-3">
<p>string类型</p>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'1'</span>
a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>string是基本类型，但是却可以调用函数，这是因为定义字符串的时候被强制转换成了String类型，也就是对象类型，所以可以调用toString函数。</p>
<ol start="2">
<li class="lvl-3">
<p>string<br>
string类型的值定义后就不可改变了，你不能使用s[i]的形式改变string的值。</p>
</li>
<li class="lvl-3">
<p>number</p>
</li>
</ol>
<pre class="language-none"><code class="language-none">0.1 + 0.2 !&#x3D; 0.3</code></pre>
<p>js中的number类型是浮点类型，在使用中会出现一些bug</p>
<ol start="4">
<li class="lvl-3">
<p>null<br>
<code>typeof null</code>会输出object，这是因为js在最初版本中使用的32位系统，为了性能考虑，000开头代表对象。然后null表示为全零，所以将null误判为对象。</p>
</li>
</ol>
<h3 id="引用类型">引用类型</h3>
<p>基本类型以值的形式储存在栈中，而引用类型储存的是地址值，地址指向堆中的数据。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> a
b<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>修改b的时候，a也跟着改变了，因为a和b是指向一个地址值。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">person</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">26</span>
  person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'yyy'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> person
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'yck'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span> <span class="token comment">// -> &#123; name: 'yck', age: 26 &#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span> <span class="token comment">// -> &#123; name: 'yyy', age: 30 &#125;</span></code></pre>
<p>因为我们传参的时候也是传递的地址值，所以<code>person.age = 26</code>将p1中的name改变了。</p>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>js基础</category>
      </categories>
  </entry>
  <entry>
    <title>this</title>
    <url>/2022/10/22/interview/js%E5%9F%BA%E7%A1%80/this/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="this">this</h2>
<h3 id="结论">结论</h3>
<ol>
<li class="lvl-3">
<p>对于直接调用的函数，无论在哪里，this指向都是window。</p>
</li>
<li class="lvl-3">
<p>对于obj.foo()，谁调用了函数，谁就是this。</p>
</li>
<li class="lvl-3">
<p>对于new，this永远绑定在函数上，不会被任何方式改变。</p>
</li>
<li class="lvl-3">
<p>箭头函数中没有this，箭头函数中的this指向是父元素的this指向。</p>
</li>
<li class="lvl-3">
<p>对于call、bind、apply这些改变this指向的API，this指向取决于第一个API传入的第一个参数，如果第一个参数为空，那么就是window。</p>
</li>
<li class="lvl-3">
<p>对于bind来说，不论调用多少次bind，this指向永远是第一个bind的this指向。</p>
</li>
<li class="lvl-3">
<p>定时器和延时器中的this指向window，严格模式下是undefined。</p>
</li>
</ol>
<h3 id="对于直接调用的函数，无论在哪里，this指向都是window">对于直接调用的函数，无论在哪里，this指向都是window</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//window</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> test <span class="token operator">=</span> obj<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="对于obj-foo-，谁调用了函数，谁就是this。">对于obj.foo()，谁调用了函数，谁就是this。</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123;fn: f&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
obj<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="对于new，this永远绑定在函数上，不会被任何方式改变。">对于new，this永远绑定在函数上，不会被任何方式改变。</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Fn &#123;&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="箭头函数中没有this，箭头函数中的this指向是父元素的this指向。">箭头函数中没有this，箭头函数中的this指向是父元素的this指向。</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">a</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//window</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token string">'1'</span><span class="token punctuation">&#125;</span>
<span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//window</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="对于call、bind、apply这些改变this指向的API，this指向取决于第一个API传">对于call、bind、apply这些改变this指向的API，this指向取决于第一个API传</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123;&#125;</span>
<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//window</span></code></pre>
<h3 id="对于bind来说，不论调用多少次bind，this指向永远是第一个bind的this指向。">对于bind来说，不论调用多少次bind，this指向永远是第一个bind的this指向。</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123;&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="定时器和延时器中的this指向window。">定时器和延时器中的this指向window。</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//window</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
obj<span class="token punctuation">.</span>time<span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>面试准备</category>
        <category>js基础</category>
      </categories>
  </entry>
  <entry>
    <title>类型判断</title>
    <url>/2022/10/22/interview/js%E5%9F%BA%E7%A1%80/%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="类型判断">类型判断</h2>
<h3 id="typeof">typeof</h3>
<p>typeof判断除<code>null</code>之外的基本类型(原始类型)。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//number</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//string</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//boolean</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//symbol</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//bigint</span></code></pre>
<p>typeof判断引用类型(对象类型)，除了函数是function外，其他都是object，不能判断具体的类型。</p>
<h3 id="instanceof">instanceof</h3>
<p>instanceof通过原型链来判断是否是构造函数的实例。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map <span class="token keyword">instanceof</span> <span class="token class-name">Map</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">set</span> <span class="token keyword">instanceof</span> <span class="token class-name">Set</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fun <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span></code></pre>
<h3 id="构造函数">构造函数</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>constructor <span class="token operator">===</span> String<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fun<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Function<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span></code></pre>
<h3 id="Object-prototype-toString-call">Object.prototype.toString.call</h3>
<p>Object.prototype.toString.call可以判断基本类型和引用类型。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[object Null]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[object Undefined]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[object Number]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[object String]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">1n</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[object BigInt]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[object Symbol]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[object Boolean]</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[object Array]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[object Object]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[object Map]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[object Set]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[object Function]</span></code></pre>
<h3 id="isXXX-API">isXXX API</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">'fdfd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span></code></pre>]]></content>
      <categories>
        <category>面试准备</category>
        <category>js基础</category>
      </categories>
  </entry>
  <entry>
    <title>Promise通过什么消灭了回调地狱？</title>
    <url>/2022/11/19/interview/%E5%BC%82%E6%AD%A5/Promise%E9%80%9A%E8%BF%87%E4%BB%80%E4%B9%88%E6%B6%88%E7%81%AD%E4%BA%86%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1%EF%BC%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="Promise通过什么消灭了回调地狱？">Promise通过什么消灭了回调地狱？</h2>
<ol>
<li class="lvl-3">回调函数的延时绑定。</li>
<li class="lvl-3">返回值的穿透。</li>
<li class="lvl-3">错误冒泡。</li>
</ol>
<p>如果我们在Promise中写延时器，延时一秒后再调用resolve，then也会等待一秒才执行。这就是回调函数的延时调用。</p>
<p>Promise返回的仍然是一个Promise，这就使得Promise穿透到外层，这就是返回值的穿透，这也使得Promise可以链式调用。</p>
<p>我们不用给每个Promise.then都加上错误的回调，我们只需要在链式调用的最后加上.catch就可以捕获到上层的错误，这就是Promise的错误冒泡。</p>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>异步</category>
      </categories>
      <tags>
        <tag>异步</tag>
        <tag>Promise</tag>
      </tags>
  </entry>
  <entry>
    <title>async、await的运行机制</title>
    <url>/2022/11/19/interview/%E5%BC%82%E6%AD%A5/async%E3%80%81await%E7%9A%84%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="async、await的运行机制">async、await的运行机制</h2>
<h3 id="async">async</h3>
<p>async是通过异步执行并隐式返回Promise的函数。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token number">1</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Promise &#123;&lt;fulfilled>: 1&#125;</span></code></pre>
<h3 id="await">await</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token number">4</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></code></pre>
<p>上面的代码输出1 2 3 4 5。</p>
<p>我们先来看一下上面的代码是怎么执行的？<br>
js先执行同步任务，先输出1，然后执行test函数，输出2。这里就要注意了<code>let x = await 4</code>，js引擎将<code>await 4</code>转换成了一个Promise。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>
<p>将其压入微任务队列，然后继续执行同步任务输出3，同步任务执行完之后，执行微任务队列。输出4，最后输出5。</p>
<h3 id="测试题目">测试题目</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token number">8</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>
  <span class="token keyword">await</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'9'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'10'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span></code></pre>
<p>输出1 2 3 4 5 6 7 8 9 10</p>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>异步</category>
      </categories>
      <tags>
        <tag>异步</tag>
        <tag>async</tag>
        <tag>await</tag>
      </tags>
  </entry>
  <entry>
    <title>js异步编程方案都有什么？</title>
    <url>/2022/11/19/interview/%E5%BC%82%E6%AD%A5/js%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%96%B9%E6%A1%88%E9%83%BD%E6%9C%89%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="js异步编程方案都有什么？">js异步编程方案都有什么？</h2>
<ol>
<li class="lvl-3">
<p>回调函数回调函数的可读性和维护性都太差，如果嵌套的层级太多会形成回调地狱，而且，每一层的回调函数都可能失败，所以我们就需要在每一层都判断失败的情况，这就导致了代码看起来十分的臃肿。</p>
</li>
<li class="lvl-3">
<p>Promise<br>
ES6中的Promise解决了回调函数回调地狱的问题，采用了链式调用。并且可以错误冒泡，在链式调用的下面.catch进行错误的处理。</p>
</li>
<li class="lvl-3">
</li>
<li class="lvl-3">
<p>async + await<br>
这是ES7的关键字，加上async的函数都默认返回一个Promise对象，async+await让异步代码以同步的方式来执行。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>异步</category>
      </categories>
      <tags>
        <tag>异步</tag>
      </tags>
  </entry>
  <entry>
    <title>事件代理</title>
    <url>/2022/10/22/interview/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9F%BA%E7%A1%80/%E4%BA%8B%E4%BB%B6%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="事件代理">事件代理</h2>
<p>如果一个节点的子节点是动态生成的，那么子节点需要注册的事件应该注册到父节点上。</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ul<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ul<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token parameter">event</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      event <span class="token operator">=</span> event <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>
      <span class="token keyword">const</span> target <span class="token operator">=</span> event<span class="token punctuation">.</span>target <span class="token operator">||</span> event<span class="token punctuation">.</span>srcElement<span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>nodeName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<p>优点：</p>
<ol>
<li class="lvl-3">
<p>节省内存</p>
</li>
<li class="lvl-3">
<p>不需要给子节点注销事件</p>
</li>
</ol>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>浏览器基础</category>
      </categories>
  </entry>
  <entry>
    <title>为什么要有浏览器缓存？</title>
    <url>/2022/11/22/interview/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9F%BA%E7%A1%80/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9C%89%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="为什么要有浏览器缓存？">为什么要有浏览器缓存？</h2>
<p>浏览器的缓存主要是缓存前端的静态资源。将静态资源缓存到电脑的磁盘中，当服务器资源没更新就使用缓存，当服务器资源更新了就重新发送请求获取资源。</p>
<p>总结：</p>
<ol>
<li class="lvl-3">
<p>减少了服务器的负担，不用每次都向服务器请求资源，提高了网站的性能。</p>
</li>
<li class="lvl-3">
<p>缓存能使用户更快的访问到资源，加快客户端网页的速度，增加用户体验。</p>
</li>
<li class="lvl-3">
<p>减少了多余网络数据的传输。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>浏览器基础</category>
      </categories>
      <tags>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>事件机制</title>
    <url>/2022/10/22/interview/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9F%BA%E7%A1%80/%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="事件机制">事件机制</h2>
<p>事件触发的三个阶段：</p>
<ol>
<li class="lvl-3">
<p>从<code>window</code>向<code>事件触发处</code>传播，遇到<code>注册的捕获</code>事件会触发。</p>
</li>
<li class="lvl-3">
<p>传播到<code>事件触发处</code>时<code>触发注册的事件</code>。</p>
</li>
<li class="lvl-3">
<p>从<code>事件触发处</code>向window传播，遇到<code>注册的冒泡</code>事件会触发。</p>
</li>
</ol>
<p>个例：如果一个body中的子节点同时注册冒泡和捕获事件，事件触发会按照注册的顺序执行。</p>
<p>addEventListener的传参：</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>node<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">let</span> nodes <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'node'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    nodes<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token parameter">event</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      controller<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'nodes捕获'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">capture</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//true：注册捕获，false：注册冒泡，默认fanlse。</span>
      <span class="token literal-property property">once</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//true：listener会在调用之后移动移除，只能调用一次，默认false。</span>
      <span class="token literal-property property">passive</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//true：永远不会调用preventDefault()。</span>
      <span class="token literal-property property">signal</span><span class="token operator">:</span> controller<span class="token punctuation">.</span>signal<span class="token punctuation">,</span><span class="token comment">//调用controller.abort()后会移除监听器。</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>node<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">let</span> nodes <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'node'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    nodes<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token parameter">event</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'冒泡'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    nodes<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token parameter">event</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'捕获'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<p>上面的html，当点击按钮的时候先输出捕获，再输出冒泡。</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>node-f<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>node<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">let</span> nodes <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'node'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    nodes<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token parameter">event</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'nodes冒泡'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    nodes<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token parameter">event</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'nodes捕获'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> nodef <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'node-f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    nodef<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token parameter">event</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'nodef冒泡'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    nodef<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token parameter">event</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'nodef捕获'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<p>上面的html，点击按钮后输出如下。</p>
<pre class="language-none"><code class="language-none">nodef捕获
nodes捕获
nodes冒泡
nodef冒泡</code></pre>]]></content>
      <categories>
        <category>面试准备</category>
        <category>浏览器基础</category>
      </categories>
  </entry>
  <entry>
    <title>同源策略限制了什么?</title>
    <url>/2022/11/23/interview/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9F%BA%E7%A1%80/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E9%99%90%E5%88%B6%E4%BA%86%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="同源策略限制了什么">同源策略限制了什么?</h2>
<p>同源策略就是，必须<code>协议</code>、<code>主机</code>、<code>端口</code>都相同才是同源的。</p>
<p>同源策略限制了以下三点。</p>
<ol>
<li class="lvl-3">
<p>不同源的网站不能相互的访问和操作DOM。</p>
</li>
<li class="lvl-3">
<p>不同源的网站中的sessionStorage、localStorage、Cookie、indexDB不互相连通。</p>
</li>
<li class="lvl-3">
<p>不同源的网站不能使用XMLHTTPRequest来进行数据的请求。</p>
</li>
</ol>
<p>对于<code>script</code>、<code>link</code>、<code>img</code>标签来说，他们是没有跨域限制的。所以这也就使得出现了浏览器安全的问题。</p>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>浏览器基础</category>
      </categories>
      <tags>
        <tag>同源策略</tag>
      </tags>
  </entry>
  <entry>
    <title>储存</title>
    <url>/2022/10/22/interview/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9F%BA%E7%A1%80/%E5%82%A8%E5%AD%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="储存">储存</h2>
<h3 id="有几种方式可以实现存储功能">有几种方式可以实现存储功能</h3>
<ol>
<li class="lvl-3">
<p>cookie</p>
</li>
<li class="lvl-3">
<p>localStorage</p>
</li>
<li class="lvl-3">
<p>sessionStorage</p>
</li>
<li class="lvl-3">
<p>indexDB</p>
</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center">特性</th>
<th style="text-align:center">cookie</th>
<th style="text-align:center">localStorage</th>
<th style="text-align:center">sessionStorage</th>
<th style="text-align:center">indexDB</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">数据声明周期</td>
<td style="text-align:center">一般由服务器生成可以设置过期时间</td>
<td style="text-align:center">除非手动清除，否则一直存在</td>
<td style="text-align:center">页面关闭就清理</td>
<td style="text-align:center">除非手动清除，否则一直存在</td>
</tr>
<tr>
<td style="text-align:center">数据存储大小</td>
<td style="text-align:center">4K</td>
<td style="text-align:center">5M</td>
<td style="text-align:center">5M</td>
<td style="text-align:center">无限</td>
</tr>
<tr>
<td style="text-align:center">与服务端通信</td>
<td style="text-align:center">每次都会携带再header中，对请求性能影响</td>
<td style="text-align:center">不参与</td>
<td style="text-align:center">不参与</td>
<td style="text-align:center">不参与</td>
</tr>
<tr>
<td style="text-align:center">用处</td>
<td style="text-align:center">一般用于储存sessionID和token</td>
<td style="text-align:center">储存不易变动的数据，减轻服务器的压力</td>
<td style="text-align:center">用来检测用户是否是刷新进入页面，如音乐播放器恢复播放进度条的功能</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<h3 id="cookie安全性">cookie安全性</h3>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">安全</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">value</td>
<td style="text-align:center">用于保存用户登录状态，应该将该值加密，不使用文明用户标识</td>
</tr>
<tr>
<td style="text-align:center">http-only</td>
<td style="text-align:center">不能通过JS访问cookie，减少XSS攻击</td>
</tr>
<tr>
<td style="text-align:center">secure</td>
<td style="text-align:center">只能在协议为HTTPS的请求中携带</td>
</tr>
<tr>
<td style="text-align:center">same-site</td>
<td style="text-align:center">规定浏览器不能在跨域请求中修改cookie，减少CSRF攻击</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>浏览器基础</category>
      </categories>
  </entry>
  <entry>
    <title>如果避免内存泄漏</title>
    <url>/2022/11/22/interview/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9F%BA%E7%A1%80/%E5%A6%82%E6%9E%9C%E9%81%BF%E5%85%8D%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="如果避免内存泄漏">如果避免内存泄漏</h2>
<h3 id="减少定义全局变量">减少定义全局变量</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//window.a = 1</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//windown.b = 1</span>
<span class="token punctuation">&#125;</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>当我们使用var定义全局变量时，会将该变量值挂载到window上，在程序没有停止运行时，全局上的变量时不会清除的，所以就照成了内存泄漏，我们可以在变量使用过后将其设置为null，来触发垃圾回收机制。</p>
<p>使用未声明的变量时，也是挂载到window上的，也会导致内存泄漏。</p>
<h3 id="定时器在不使用时清除">定时器在不使用时清除</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>如果我们不清除上面的定时器，<code>arr</code>数组就会一直增大，会造成内存泄漏。</p>
<h3 id="闭包">闭包</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> b<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>一般情况下，当a函数执行完后，其作用域就会被销毁，但是由于a函数中返回了一个匿名函数，该匿名函数使用了a函数中的b变量，所以产生了闭包，导致a函数无法被回收。导致了内存泄漏。只有当我们给fn设置成null的时候，也就是取消对匿名函数引用的时候才会销毁a函数的作用域。</p>
<h3 id="清除DOM引用">清除DOM引用</h3>
<pre class="language-markup" data-language="markup"><code class="language-markup"></code></pre>
<h3 id="弱引用">弱引用</h3>
<p>在ES6中增加了两个新的数据结构，WeakMap和WeakSet，这两个就是弱引用。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"></code></pre>
<h3 id="参考资料">参考资料</h3>
<p>[1]<a href="https://juejin.cn/post/6844904016325902344">一文搞懂V8引擎的垃圾回收</a></p>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>浏览器基础</category>
      </categories>
      <tags>
        <tag>内存泄漏</tag>
      </tags>
  </entry>
  <entry>
    <title>强缓存和协商缓存的区别</title>
    <url>/2022/11/22/interview/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9F%BA%E7%A1%80/%E5%BC%BA%E7%BC%93%E5%AD%98%E5%92%8C%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="强缓存和协商缓存的区别">强缓存和协商缓存的区别</h2>
<h3 id="强缓存">强缓存</h3>
<p>强缓存是当缓存的资源仍然有效的情况下，浏览器不会向服务器发送请求，而是直接使用缓存资源。怎么判断强缓存的资源是否有效呢？</p>
<ol>
<li class="lvl-3">
<p>在HTTP1.0中使用HTTP头部的expires来判断缓存是否过期。但是它有一些问题，就是expires是绝对时间，也就是服务器的时间，如果客户端和服务端的时间不一样，就会导致强缓存命中不了的情况。</p>
</li>
<li class="lvl-3">
<p>在HTTP1.1中是使用的cache-control来判断强缓存是否过期，在cache-control中可以设置一些属性，关于强缓存有关的属性有<code>no-cache</code>不进行强缓存，但是进行协商缓存，<code>no-store</code>不进行缓存，每次请求都向服务器请求最新数据，<code>max-age</code>设置缓存的最大有效值，单位为秒。浏览器正式使用<code>max-age</code>来判断缓存是否有效的。如果上次请求返回的200状态码的时间距离这次请求的时间超过<code>max-age</code>那么就没命中强缓存。</p>
</li>
</ol>
<h3 id="协商缓存">协商缓存</h3>
<p>当没命中强缓存的时候就是进行协商缓存，进行协商缓存的时候，浏览器会携带if-None-Match和if-Modified-Since向服务器发送请求，发送的请求如果有Etag值，那么就判断Etag值和当前资源的Etag值是否相同，如果相同则使用缓存资源，返回304。如果不同则返回新的资源，并携带新的Etag和last-Modified，如果没有Etag值就判断if-Modified-Since和服务器中资源上次的修改时间是否相同，如果相同就使用缓存值返回304，如果不相同就返回新的资源，并携带新的Etag和last-Modified。</p>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>浏览器基础</category>
      </categories>
      <tags>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>点击刷新按钮或者按 F5、按 Ctrl+F5 （强制刷新）、地址栏回车有什么区别？</title>
    <url>/2022/11/22/interview/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9F%BA%E7%A1%80/%E7%82%B9%E5%87%BB%E5%88%B7%E6%96%B0%E6%8C%89%E9%92%AE%E6%88%96%E8%80%85%E6%8C%89%20F5%E3%80%81%E6%8C%89%20Ctrl+F5%20%EF%BC%88%E5%BC%BA%E5%88%B6%E5%88%B7%E6%96%B0%EF%BC%89%E3%80%81%E5%9C%B0%E5%9D%80%E6%A0%8F%E5%9B%9E%E8%BD%A6%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="点击刷新按钮或者按-F5、按-Ctrl-F5-（强制刷新）、地址栏回车有什么区别？">点击刷新按钮或者按 F5、按 Ctrl+F5 （强制刷新）、地址栏回车有什么区别？</h2>
<h3 id="点击刷新按钮或按F5">点击刷新按钮或按F5</h3>
<p>点击刷新按钮或按F5，会使浏览器的缓存过期，并且带上if-Modified-Since和if-None-Match，会使服务端检查请求文件的新鲜度，可能返回304，也可能返回200。</p>
<h3 id="按Ctrl-F5（强制刷新）">按Ctrl+F5（强制刷新）</h3>
<p>按Ctrl+F5强制刷新时，浏览器会使缓存文件过期，并且不带上if-Modified-Since和if-None-Match，相当于第一次请求，返回的全都是200。</p>
<h3 id="地址栏回车">地址栏回车</h3>
<p>地址栏回车是走的正常流程，本地检查是否过期，然后服务器检查新鲜度，返回内容。</p>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>浏览器基础</category>
      </categories>
      <tags>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器缓存流程</title>
    <url>/2022/11/22/interview/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9F%BA%E7%A1%80/%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="浏览器缓存流程">浏览器缓存流程</h2>
<ol>
<li class="lvl-3">
<p>第一次访问网站的时候，客户端发送请求，获取服务端资源，浏览器将资源和response header缓存到本地。</p>
</li>
<li class="lvl-3">
<p>当第二次访问网站的时候，会优先判断强缓存是否可用，判断这次的请求和上次200状态码请求的时间，如果时间小于cache-control设置的max-age，则说明强缓存没有过期，命中强缓存，直接使用缓存资源。如果浏览器不支持HTTP1.1，则使用expires头判断是否过期。</p>
</li>
<li class="lvl-3">
<p>如果强缓存没有命中，则使用协商缓存，向服务端发送带有if-None-Match和if-Modified-Since的请求。</p>
</li>
<li class="lvl-3">
<p>浏览器收到请求后，先通过Etag的值判断请求的资源是否更新，如果Etag相同则没有更新，命中协商缓存，返回304，如果不同则返回新的资源，并带上新的Etag，返回200。</p>
</li>
<li class="lvl-3">
<p>如果没有Etag则，if-Modified-Since和上次修改的时间做比较，如果相同则命中协商缓存，返回304，如果不相同则返回新的资源和新的last-modified，返回200。</p>
</li>
<li class="lvl-3">
<p>如果没有etag和if-modified-since都不存在的话就返回新的资源。</p>
</li>
</ol>
<p><img src="/images/%E7%BC%93%E5%AD%98/1.png" alt="" loading="lazy"></p>
<p>很多网站都在资源后面加了版本号，这样做的目的就是当js，css版本升级的时候，防止浏览器的缓存，让用户能够得到最新的资源。</p>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>浏览器基础</category>
      </categories>
      <tags>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>跨域</title>
    <url>/2022/10/22/interview/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9F%BA%E7%A1%80/%E8%B7%A8%E5%9F%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="跨域">跨域</h2>
<h3 id="什么是跨域？">什么是跨域？</h3>
<p>因为浏览器的安全考虑，有同源策略。只要协议、域名、端口号有一个不同就是跨域，Ajax请求就会失败。</p>
<h3 id="为什么浏览器要使用同源策略？">为什么浏览器要使用同源策略？</h3>
<p>同源策略主要用来防止CSRF攻击。<br>
CSRF工具：利用用户的登录状态发起恶意请求。如果没有同源策略，那么A网站可以被任意其他来源的Ajax访问到内容。如果你的A网站处于登录状态，那么对方就可以使用Ajax获取到你的任何信息。</p>
<p><strong>思考</strong><br>
请求跨域了，那么请求发送出去了吗？请求是发送出去了，但是浏览器会拦截响应。使用表达的方式可以发起跨域请求，但是浏览器认为Ajax不安全，所以Ajax不能发起跨域请求。这也说明跨域不能完全的阻止CSRF攻击，因为请求毕竟发送出去了。</p>
<h3 id="解决跨域的方法">解决跨域的方法</h3>
<h4 id="JSONP">JSONP</h4>
<p>JSONP就是利用<code>&lt;script&gt;</code>标签没有跨域限制的漏洞。通过<code>&lt;script&gt;</code>标签指向一个需要访问的地址，并提供一个回调函数来接收数据</p>
<h4 id="CORS">CORS</h4>
<p>CORS需要浏览器和后端同时支持。浏览器会自行进行CORS通信，实现CORS通信的关键是后端。服务端设置 <code>Access-Control-Allow-Origin</code> 就可以开启 CORS。该属性表示哪些域名可以访问资源，如果没有设置通配符则表示所有网站都可以访问资源。</p>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>浏览器基础</category>
      </categories>
  </entry>
  <entry>
    <title>常考算法题解析</title>
    <url>/2022/10/22/interview/%E7%AE%97%E6%B3%95/%E5%B8%B8%E8%80%83%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="常考算法题解析">常考算法题解析</h2>
<h3 id="位运算">位运算</h3>
<h4 id="左移">左移&lt;&lt;</h4>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20</span></code></pre>
<p>左移就是将二进制全部往左移动一位。10在二进制中表示1010，左移一位后变成10100，转换为十进制也就是20，所以基本可以把左移看成一下公式，<code>a * (2 ^ b)</code>。</p>
<h4 id="右移">右移&gt;&gt;</h4>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">13</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//6</span></code></pre>
<p>右移就是将二进制全部右移并去除多余的右边。10在二进制中表示为1010，右移一位后变成101，转换为十进制就是5，所以基本可以把右移看成一下公式<code>v = a / (2 ^ b)</code>。</p>
<h4 id="按位操作">按位操作</h4>
<h5 id="按位与">按位与</h5>
<p>每一位都为1，结果才为1</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">&amp;</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1000 &amp; 0111 -> 0000 -> 0</span></code></pre>
<h5 id="按位或">按位或</h5>
<p>其中一位为1，结果就是1</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">|</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1000 | 0111 -> 1111 -> 15</span></code></pre>
<h5 id="按位异或">按位异或</h5>
<p>每一位都不同，结果才为1</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">^</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1000 ^ 0111 -> 1111 -> 15</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">^</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1000 ^ 1000 -> 0000 -> 0</span></code></pre>
<h4 id="面试题">面试题</h4>
<p>两个数不使用四则运算得出和</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> b
  <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> a
  <span class="token keyword">let</span> newA <span class="token operator">=</span> a <span class="token operator">^</span> b
  <span class="token keyword">let</span> newB <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span>
  <span class="token keyword">return</span> <span class="token function">sum</span><span class="token punctuation">(</span>newA<span class="token punctuation">,</span> newB<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span></code></pre>
<h3 id="排序">排序</h3>
<p>以下两个函数是排序中会用到的通用函数，就不一一写了</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> rightValue <span class="token operator">=</span> array<span class="token punctuation">[</span>right<span class="token punctuation">]</span>
    array<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
    array<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> rightValue
<span class="token punctuation">&#125;</span></code></pre>
<p>swap函数也可以这样写</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">[</span>array<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> arrar<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>array<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<h4 id="冒泡排序">冒泡排序</h4>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">bubble</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>j<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> array<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bubble</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>DNS同时使用TCP和UDP协议吗?</title>
    <url>/2022/11/23/interview/%E7%BD%91%E7%BB%9C/DNS%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8TCP%E5%92%8CUDP%E5%8D%8F%E8%AE%AE%E5%90%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="DNS同时使用TCP和UDP协议吗">DNS同时使用TCP和UDP协议吗?</h2>
<p>DNS服务器占用的53端口，同时使用TCP和UDP协议。</p>
<p>在进行区域传输的时候使用DNS协议，在进行域名解析的时候使用UDP协议。</p>
<ol>
<li class="lvl-3">
<p>使用TCP协议辅域名服务器会定期的向主域名服务器查询数据是否变动，如果变动就是进行一次区域传输，来同步数据，此时的区域传输就是使用的TCP协议。<br>
TCP是一种可靠的连接，确保了数据的准确性。</p>
</li>
<li class="lvl-3">
<p>使用UDP协议客户端向DNS服务端发送查询域名，服务端返回的信息一般不会超过512字节，所以使用UDP协议，UDP协议不需要三次握手，所以服务器压力更小，响应快。理论上客户端也可以指定DNS服务器查询域名的时候使用TCP，但是实际上有的DNS服务器已经配置了仅支持UDP查询。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>DNS完整查询流程</title>
    <url>/2022/11/23/interview/%E7%BD%91%E7%BB%9C/DNS%E5%AE%8C%E6%95%B4%E6%9F%A5%E8%AF%A2%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="DNS完整查询流程">DNS完整查询流程</h2>
<ol>
<li class="lvl-3">浏览器查询自己的缓存，如果有对应的ip地址则直接返回，没有则向本地DNS服务器请求。</li>
<li class="lvl-3">本地DNS服务器查询自己的缓存，如果有对应的ip地址则直接返回，没有则向继续下一步。</li>
<li class="lvl-3">本地DNS服务器向根域名服务器发送请求，根域名服务器返回对应的顶级域名服务器地址。</li>
<li class="lvl-3">本地DNS服务器向定义域名服务器发送请求，顶级域名服务器返回对应的权威域名服务器地址。</li>
<li class="lvl-3">本地DNS服务器向权威域名服务器发送请求，权威域名服务器返回对应的结果。</li>
<li class="lvl-3">本地DNS服务器缓存该结果。</li>
<li class="lvl-3">本地DNS将结果返回给浏览器。</li>
</ol>
<p>其中DNS服务器在向各个服务器发送请求的时候，各个服务器都会先查询缓存。</p>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>GET和POST请求的区别</title>
    <url>/2022/11/24/interview/%E7%BD%91%E7%BB%9C/GET%E5%92%8CPOST%E8%AF%B7%E6%B1%82%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="GET和POST请求的区别">GET和POST请求的区别</h2>
<ol>
<li class="lvl-3">
<p>应用场景<br>
GET请求是请求服务器的数据，而POST一般是修改服务器的资源</p>
</li>
<li class="lvl-3">
<p>是否缓存浏览器会对GET请求进行缓存，但是很少对POST请求缓存</p>
</li>
<li class="lvl-3">
<p>发送的报文<br>
GET请求的请求体是空的，POST请求的请求体是传递的一些参数</p>
</li>
<li class="lvl-3">
<p>安全性<br>
GET请求的参数是拼接到url后面的，但是POST的是在请求体中，请求的URL会保存到历史记录中，如果POST也在url后面拼接参数，会导致不安全</p>
</li>
<li class="lvl-3">
<p>请求长度<br>
GET请求被不同的浏览器限制了长度</p>
</li>
<li class="lvl-3">
<p>参数类型<br>
POST请求支持更多的参数类型</p>
</li>
</ol>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>GET</tag>
        <tag>POST</tag>
      </tags>
  </entry>
  <entry>
    <title>GET方法URL长度限制的原因</title>
    <url>/2022/11/24/interview/%E7%BD%91%E7%BB%9C/GET%E6%96%B9%E6%B3%95URL%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6%E7%9A%84%E5%8E%9F%E5%9B%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="GET方法URL长度限制的原因">GET方法URL长度限制的原因</h2>
<p>HTTP对GET方法的URL长度没有限制，只是不同浏览器对GET有不同字节的限制。</p>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP1.0与HTTP1.1的区别</title>
    <url>/2022/11/24/interview/%E7%BD%91%E7%BB%9C/HTTP1.0%E4%B8%8EHTTP1.1%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="HTTP1-0与HTTP1-1的区别">HTTP1.0与HTTP1.1的区别</h2>
<ol>
<li class="lvl-3">
<p>连接方面<br>
http1.0采用的是非持续性连接，http1.1中采用的是持续性连接，这就使得不同的http请求可以复用同一个tcp连接，避免了非持续性连接每次都需要连接的延时。</p>
</li>
<li class="lvl-3">
<p>缓存方面在http1.0中是使用的expires和if-Modified-Since来进行缓存的判读，但是expires判读的是服务器上的时间，如果客户端和服务器上的时间不一致，就会导致缓存没有命中的情况。在http1.1中增加了Etag和if-None-Match等来进行缓存的判断。</p>
</li>
<li class="lvl-3">
<p>资源请求方面在http1.0中，客户端请求一个资源的一部分，服务器会将整个资源都返回，这就造成了宽带的浪费。而在http1.1中，在头部增加了range头域，使得可以请求一个资源的一部分。</p>
</li>
<li class="lvl-3">
<p>HOST<br>
在http1.0中，一个服务器就对应一个固定的ip地址，所以是没有域名解析这个东西的。在http1.1中增加了host，用来自定服务器的域名。</p>
</li>
<li class="lvl-3">
<p>请求方法在http1.1中增加了一些请求方法，例如：PUST,HEAD,OPTIONS等。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP1.1和HTTP2的区别</title>
    <url>/2022/11/24/interview/%E7%BD%91%E7%BB%9C/HTTP1.1%E5%92%8CHTTP2%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="HTTP1-1和HTTP2的区别">HTTP1.1和HTTP2的区别</h2>
<ol>
<li class="lvl-3">
<p>二进制协议在http1.1中，头部信息是文本，数据可以是文本也可以是二进制，而http2中都必须是二进制，这个概念称为&quot;帧&quot;，分为头部信息帧和数据帧，帧也是http2中多路复用的基础。</p>
</li>
<li class="lvl-3">
<p>多路复用在http2中，同样复用了tcp连接，但是http2中可以同时接收和发送多个请求和响应，不用按照顺序一一发送。对头阻塞：在http1.1中，报文是一发一收的，在http1.1中没有优先级，只有入队的先后顺序，先入队的先执行，如果对首的请求处理的时间过长，后面的请求需要等待对首的执行完毕才能继续执行，这就是对头阻塞。</p>
</li>
<li class="lvl-3">
<p>数据流在http2中引入了数据流的概念，并不是按顺序发送的，所以每个数据流都有一个独一无二的编号，用来区分是哪个数据流。</p>
</li>
<li class="lvl-3">
<p>头部信息压缩在http1.1每次都要附带上所有的信息发送请求，例如cookien，这就使得附带的信息可能有重复的，所以，在http2中会使用gzip或compress进行头部信息的压缩，而且服务器和客户端会共同维护一个头部信息表，所有的字段存入这个表中，生成一个索引值，当下次携带相同的信息的时候只携带索引值。</p>
</li>
<li class="lvl-3">
<p>服务器推送在http2中，服务器在没有收到请求的情况下，主动向客户端推送资源，减少一些延迟时间，推送的资源只能是静态资源。websocket向服务端请求的及时数据是不推送的。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP和HTTPS的区别</title>
    <url>/2022/11/24/interview/%E7%BD%91%E7%BB%9C/HTTP%E5%92%8CHTTPS%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="HTTP和HTTPS的区别">HTTP和HTTPS的区别</h2>
<ol>
<li class="lvl-3">HTTPS需要CA证书，费用较高，而HTTP不需要</li>
<li class="lvl-3">HTTP是超文本传输协议，是明文传输，而HTTPS是具有安全性的SSL加密的传输协议</li>
<li class="lvl-3">HTTP的端口号是80，HTTPS的端口号是443</li>
<li class="lvl-3">HTTP协议较简单，是无状态的，HTTPS是通过SSL和HTTP构建的可加密传输和身份认证的网络协议，比较安全</li>
</ol>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP状态码304是多好还是少好</title>
    <url>/2022/11/24/interview/%E7%BD%91%E7%BB%9C/HTTP%E7%8A%B6%E6%80%81%E7%A0%81304%E6%98%AF%E5%A4%9A%E5%A5%BD%E8%BF%98%E6%98%AF%E5%B0%91%E5%A5%BD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="HTTP状态码304是多好还是少好">HTTP状态码304是多好还是少好</h2>
<p>304状态码是浏览器的缓存机制，当没有命中强缓存的时候就会进行协商缓存，如果命中了协商缓存就返回304，直接使用缓存资源，不用再次下载资源，所以304状态码不是错误，而是浏览器的缓存机制所造成的。</p>
<p>但是304状态码如果较多，搜索引擎会减少对其的抓取次数，网站的访问量可能就会减少，网站的权重下降。</p>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP的优点与缺点</title>
    <url>/2022/11/24/interview/%E7%BD%91%E7%BB%9C/HTTP%E7%9A%84%E4%BC%98%E7%82%B9%E4%B8%8E%E7%BC%BA%E7%82%B9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="HTTP的优点与缺点">HTTP的优点与缺点</h2>
<p>优点</p>
<ol>
<li class="lvl-3">
<p>简单快速，因为HTTP在请求的时候只需要发送方法和路径，而且HTTP协议简单，所以简单快速</p>
</li>
<li class="lvl-3">
<p>无连接，由于HTTP无连接，每次只能处理一个请求，当服务器收到客户端的应道后立即断开连接，节省了传输时间</p>
</li>
<li class="lvl-3">
<p>无状态，由于HTTP连接无状态，所以如果需要前面的数据的时候，只能重传，但是如果不需要前面的数据，就比较快速了</p>
</li>
</ol>
<p>缺点</p>
<ol>
<li class="lvl-3">
<p>无状态，HTTP是一个无状态的协议，不会保存用户的任何信息</p>
</li>
<li class="lvl-3">
<p>明文传输，协议中的报文使用的纯文本的方式传输</p>
</li>
<li class="lvl-3">
<p>不安全，文明传输不加密，不会进行身份验证，不验证报文的完整性</p>
</li>
</ol>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP请求报文和响应报文</title>
    <url>/2022/11/23/interview/%E7%BD%91%E7%BB%9C/HTTP%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87%E5%92%8C%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="HTTP请求报文和响应报文">HTTP请求报文和响应报文</h2>
<h3 id="请求报文">请求报文</h3>
<ol>
<li class="lvl-3">
<p>请求行：由<code>请求方法</code>空格<code>url</code>空格<code>协议版本</code>回车符 换行符组成。例如：GET /index.html HTTP/1.1</p>
</li>
<li class="lvl-3">
<p>请求头：由键值对组成，每行一对</p>
</li>
<li class="lvl-3">
<p>空行</p>
</li>
<li class="lvl-3">
<p>请求体：POST、PUT等请求方法携带的数据</p>
</li>
</ol>
<h3 id="响应报文">响应报文</h3>
<ol>
<li class="lvl-3">
<p>响应行：由<code>协议版本</code>空格<code>状态码</code>空格<code>状态码的原因短语</code>组成。例如：HTTP/1.1 200 ok</p>
</li>
<li class="lvl-3">
<p>响应头：也是由键值对组成，每行一对</p>
</li>
<li class="lvl-3">
<p>空行</p>
</li>
<li class="lvl-3">
<p>响应体：服务器响应的数据</p>
</li>
</ol>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>OPTIONS请求方法的使用场景</title>
    <url>/2022/11/24/interview/%E7%BD%91%E7%BB%9C/OPTIONS%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="OPTIONS请求方法的使用场景">OPTIONS请求方法的使用场景</h2>
<ol>
<li class="lvl-3">查询服务器支持的HTTP请求方法</li>
<li class="lvl-3">查询访问权限，在进行CROS跨域的时候，就是使用OPTIONS来判断是否对资源有访问权限</li>
</ol>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>HTTP</tag>
        <tag>OPTIONS</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP和UDP的适用场景</title>
    <url>/2022/11/23/interview/%E7%BD%91%E7%BB%9C/TCP%E5%92%8CUDP%E7%9A%84%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="TCP和UDP的适用场景">TCP和UDP的适用场景</h2>
<ol>
<li class="lvl-3">
<p>TCP是一种可靠的连接，但是建立连接之前需要&quot;三次握手&quot;，所以TCP适用于文件的传输和邮箱接收，虽然速度较慢，但是数据准确。</p>
</li>
<li class="lvl-3">
<p>UDP面向与无连接，不可靠，适用于即时通讯，例如聊天软件，会议软件，广播，偶尔出现丢包也不是太大的问题，而且也可以不需要重发机制。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>TCP</tag>
        <tag>UDP</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP拥塞控制机制</title>
    <url>/2022/11/23/interview/%E7%BD%91%E7%BB%9C/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="TCP拥塞控制机制">TCP拥塞控制机制</h2>
<ol>
<li class="lvl-3">
<p>慢开始</p>
</li>
<li class="lvl-3">
<p>拥塞避免</p>
</li>
<li class="lvl-3">
<p>快速重传</p>
</li>
<li class="lvl-3">
<p>快速恢复</p>
</li>
<li class="lvl-3">
<p>慢开始慢开始，会设置一个cnwd（拥塞窗口的值），还会设置一个慢开始门限（ssthresh）。判断cnwd和ssthresh的关系，执行不同的算法。</p>
</li>
</ol>
<p>cnwd &lt; ssthresh，执行慢开始算法，每次数据发送成功后将cnwd的值乘2<br>
cnwd == ssthresh，既可以执行慢开始算法，也可以执行拥塞避免算法<br>
cnwd &gt; ssthresh，执行拥塞避免算法，每次数据发送成功后将cnwd的值加1</p>
<ol start="2">
<li class="lvl-3">
<p>拥塞避免无论是在慢开始阶段还是拥塞避免阶段，只要发送方判断网络拥塞了，就会将门限值（ssthresh）变成发送窗口值的一半，把cnwd（拥塞窗口）的值变成1，重新执行慢开始算法。</p>
</li>
</ol>
<p><img src="/images/TCP/1.png" alt="" loading="lazy"></p>
<ol start="3">
<li class="lvl-3">
<p>快速重传当接收方接收到失序的报文后就立刻向发送方发送重复确认，当发送方接收到三次重复确认就会重传对方未接收到的报文，而不用等待定时器结束后才重传。</p>
</li>
<li class="lvl-3">
<p>快速恢复当发送方接收到三次重复确认后，会将门限值（ssthres）设置成发送窗口值的一半，将cnwd设置成ssthres的大小，然后执行拥塞避免算法。</p>
</li>
</ol>
<p><img src="/images/TCP/2.png" alt="" loading="lazy"></p>
<h2 id="参考资料">参考资料</h2>
<p>[1]<a href="https://juejin.cn/post/6908327746473033741">「2021」高频前端面试题汇总之计算机网络篇</a><br>
[2]<a href="https://www.bilibili.com/video/BV1L4411a7RN">计算机网络第35讲-TCP的拥塞控制（计算机网络简明教程及仿真实验）</a></p>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>TCP</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP流量控制和死锁</title>
    <url>/2022/11/23/interview/%E7%BD%91%E7%BB%9C/TCP%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="TCP流量控制和死锁">TCP流量控制和死锁</h2>
<ol>
<li class="lvl-3">TCP中采用滑动窗口来进行流量控制。</li>
<li class="lvl-3">发送方和接收方都有一个缓存区。</li>
<li class="lvl-3">如果接收方读取的速度与数据到达的速度一样快，那么接收方就会向发送方发送一个正的窗口通知。</li>
<li class="lvl-3">如果接收方读取的速度慢于数据到达的速度，接收的数据会填满缓存区，这时接收方会发送一个零的窗口通知，将发送方的窗口设置成零，这是发送方的窗口将不能传输数据。</li>
<li class="lvl-3">发送方等待接收方发送一个正的窗口通知后再次传输数据。</li>
<li class="lvl-3">如果在接收方向发送方发送正的窗口通知的时候，通知丢失了。这是就会产生发送方等待接收方的正的窗口通知，而接收方等待发送方的数据，这就形成了死锁。</li>
<li class="lvl-3">在发送方接收到接收方发送的零窗口的通知的时候，就会启用持续计时器，如果计时器超时就会发送一个探测报文，只有1字节，去探测接收方的窗口是否是零。如果是零，那么就重新启用计时器，如果不是零就接触了死锁的局面。</li>
</ol>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>TCP</tag>
        <tag>死锁</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP的重传机制</title>
    <url>/2022/11/23/interview/%E7%BD%91%E7%BB%9C/TCP%E7%9A%84%E9%87%8D%E4%BC%A0%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="TCP的重传机制">TCP的重传机制</h2>
<p>TCP的下层网络可能会出现，重复，丢失，失序等情况，TCP会重传它自己认为丢失的包，TCP的重传是根据两方面来进行的，一个是时间，一个是确认信息。</p>
<p>TCP在发送一个数据之后就会开启一个定时器，如果在这个时间内，没有收到ACK的确认报文，则重传数据，如果多次重传都没有成功则放弃重传，并返回一个复位信号。</p>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>TCP</tag>
      </tags>
  </entry>
  <entry>
    <title>UDP为什么不可靠?</title>
    <url>/2022/11/23/interview/%E7%BD%91%E7%BB%9C/UDP%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E5%8F%AF%E9%9D%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="UDP为什么不可靠">UDP为什么不可靠?</h2>
<ol>
<li class="lvl-3">UDP是面向无连接的，什么时候发送都可以。</li>
<li class="lvl-3">UDP只是搬运了数据，接收到的什么数据就返回什么数据，并且不关心对方是否正确的收到，如果没收到，不会重新发送。</li>
<li class="lvl-3">UDP没有阻塞控制，UDP会以一个固定的速率发送数据，当网络不好时也不会减慢速率，这就导致了可能丢包，数据不完整。</li>
</ol>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>UDP</tag>
      </tags>
  </entry>
  <entry>
    <title>URL有哪些组成部分</title>
    <url>/2022/11/24/interview/%E7%BD%91%E7%BB%9C/URL%E6%9C%89%E5%93%AA%E4%BA%9B%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="URL有哪些组成部分">URL有哪些组成部分</h2>
<ol>
<li class="lvl-3">协议</li>
<li class="lvl-3">主机</li>
<li class="lvl-3">端口</li>
<li class="lvl-3">虚拟目录</li>
<li class="lvl-3">文件名</li>
<li class="lvl-3">参数</li>
<li class="lvl-3">锚点</li>
</ol>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>URL</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是DNS？</title>
    <url>/2022/11/23/interview/%E7%BD%91%E7%BB%9C/%E4%BB%80%E4%B9%88%E6%98%AFDNS/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="什么是DNS？">什么是DNS？</h2>
<p>DNS服务器将域名解析成IP地址。</p>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>常见的HTTP请求方法</title>
    <url>/2022/11/24/interview/%E7%BD%91%E7%BB%9C/%E5%B8%B8%E8%A7%81%E7%9A%84HTTP%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="常见的HTTP请求方法">常见的HTTP请求方法</h2>
<ol>
<li class="lvl-3">Get：向服务器请求资源</li>
<li class="lvl-3">POST：向服务器提交资源，一般会修改服务器上的数据</li>
<li class="lvl-3">PUT：上传文件，更新信息</li>
<li class="lvl-3">DELETE：删除服务器上的数据</li>
<li class="lvl-3">OPTIONS：查询支持的请求方法，用来跨域请求</li>
<li class="lvl-3">CONNECT：和代理服务器通信时建立通道，在通道上进行TCP通信</li>
<li class="lvl-3">REACT：回显服务器收到的请求，用来诊断错误</li>
</ol>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>迭代查询与递归查询</title>
    <url>/2022/11/23/interview/%E7%BD%91%E7%BB%9C/%E8%BF%AD%E4%BB%A3%E6%9F%A5%E8%AF%A2%E4%B8%8E%E9%80%92%E5%BD%92%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="迭代查询与递归查询">迭代查询与递归查询</h2>
<p>DNS域名解析是一个迭代查询和递归查询的过程。</p>
<ol>
<li class="lvl-3">
<p>迭代查询迭代查询是域名服务器只返回单次查询的结果，下一级的查询由用户自己决定，所以，迭代查询需要发送多次请求。</p>
</li>
<li class="lvl-3">
<p>递归查询递归查询是域名服务器向下一级域名服务器发送请求，最后将请求结果返回给用户，所以，递归查询用户只需要发送一次请求。</p>
</li>
</ol>
<p>DNS域名解析的时候，浏览器向本地DNS服务器发送请求是用的递归查询，只需要发送一次请求。本地DNS服务器向各个级别服务器发送请求用的是迭代查询，需要发送多次请求。</p>
]]></content>
      <categories>
        <category>面试准备</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>键入网址按下回车后究竟发生了什么</title>
    <url>/2022/10/31/interview/%E7%BD%91%E7%BB%9C/%E9%94%AE%E5%85%A5%E7%BD%91%E5%9D%80%E6%8C%89%E4%B8%8B%E5%9B%9E%E8%BD%A6%E5%90%8E%E7%A9%B6%E7%AB%9F%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="键入网址按下回车后究竟发生了什么">键入网址按下回车后究竟发生了什么</h2>
<h3 id="1-解析URL">1.解析URL</h3>
<p>URL由<code>协议</code>、<code>主机</code>、<code>端口</code>、<code>路径</code>、<code>查询参数</code>、<code>锚点</code>六部分组成。</p>
<pre class="language-none"><code class="language-none">https:&#x2F;&#x2F;gulinga.github.io:443&#x2F;2022&#x2F;10&#x2F;06&#x2F;frame&#x2F;Umi3&#x2F;index?age&#x3D;18#3
https - 协议
gulina.github.io - 主机
443 - 端口
2022&#x2F;10&#x2F;06&#x2F;frame&#x2F;Umi3&#x2F;index - 路径
?age&#x3D;18 - 查询参数
#3 - 锚点</code></pre>
<p>浏览器解析URL，如果发现URL的协议或主机不合法就会将搜索的内容交给搜索引擎，如果合法就会检查URL中是否存在非法字符，如果存在非法字符，会对非法字符进行转译后再进行下一个过程。什么是非法字符呢？就比如<code>空格</code>，浏览器会将<code>空格</code>转译成<code>%20</code>。</p>
<h3 id="2-缓存判断">2.缓存判断</h3>
<p>浏览器会判断，你要请求的资源是否在缓存里面，如果存在就直接使用，判断是否过期，如果过期还要向服务器验证资源是否有效，否则发起新的请求。</p>
<div id="flowchart-0" class="flow-chart"></div>
<h3 id="3-DNS解析">3.DNS解析</h3>
<p>DNS解析就是解析出来URL中的ip地址，因为我们可以使用域名来访问URL，所以当输入是域名的时候就需要DNS来解析域名对应的ip地址。首先会本地判断是否有该域名的ip地址，如果有则使用，如果没有则向本地的DNS服务器发起请求，本地的DNS也会检查是否存在缓存，如果没有就向根域名服务器发起请求，获得到顶级域名服务器的地址后，再向顶级域名服务器请求，然后获取到权威域名服务器的地址后，再向权威域名服务器请求，最后获取到ip地址。用户向本地DNS服务器的请求是递归进行的。本地DNS服务器向各级域名服务器的请求是迭代进行的。</p>
<h3 id="4-获取MAC地址">4.获取MAC地址</h3>
<h3 id="5-三次握手">5.三次握手</h3>
<h4 id="使用IP地址访问Web服务器">使用IP地址访问Web服务器</h4>
<p>我们先看一下当我们输入网址按下回车后wireshark抓包的结果。<img src="/images/%E7%BD%91%E7%BB%9C/1.png" alt="wireshark抓包的结果" loading="lazy"><br>
然后我们使用滤包过滤一下。<br>
<img src="/images/%E7%BD%91%E7%BB%9C/2.png" alt="wireshark滤包的结果" loading="lazy"></p>
<p>当我们键入网址按下回车后，浏览器进行三次握手。</p>
<table>
<thead>
<tr>
<th style="text-align:center">第几个包</th>
<th style="text-align:center">请求</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">第个一包</td>
<td style="text-align:center">52085 -&gt; 80</td>
<td style="text-align:center">第一次握手  浏览器向服务器发送SYN。</td>
</tr>
<tr>
<td style="text-align:center">第个二包</td>
<td style="text-align:center">80 -&gt; 52085</td>
<td style="text-align:center">第二次握手  服务器向浏览器发送SYN,ACK。</td>
</tr>
<tr>
<td style="text-align:center">第个三包</td>
<td style="text-align:center">52085 -&gt; 80</td>
<td style="text-align:center">第三次握手  浏览器向服务器发送ACK。</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">当三次握手完成后，TCP链接就建立了起来。有了可靠的TCP连接通道后，HTTP协议就可以开始工作了。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">第个四包</td>
<td style="text-align:center">GET / HTTP/1.1</td>
<td style="text-align:center">浏览器按照<code>HTTP协议的规定格式</code>通过<code>TCP</code>发送了一个<code>GET / HTTP/1.1请求报文</code>。</td>
</tr>
<tr>
<td style="text-align:center">第个五包</td>
<td style="text-align:center">80 -&gt; 52085</td>
<td style="text-align:center">服务器回复，在TCP协议层面确认：“刚才的报文已经收到”。</td>
</tr>
<tr>
<td style="text-align:center">第个六包</td>
<td style="text-align:center">HTTP/1.1 200 OK (text/html)</td>
<td style="text-align:center">服务器开始解析报文，读取浏览器请求的数据，拼成符合HTTP格式的报文返回给浏览器。</td>
</tr>
<tr>
<td style="text-align:center">第个七包</td>
<td style="text-align:center">52085 -&gt; 80</td>
<td style="text-align:center">浏览器接收到服务器返回的报文后，给服务器回复一个TCP的ACK，确认收到了报文。</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">浏览器解析报文后发现是html文件，浏览器就会调用排版引擎、javascript引擎等进行处理。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">第个八包</td>
<td style="text-align:center">GET /favicon.io HTTP/1.1</td>
<td style="text-align:center">浏览器解析到是html文件向服务器请求favicon.ico文件。现代浏览器通常都会自动且秘密地发送favicon.ico请求。</td>
</tr>
<tr>
<td style="text-align:center">第九个包</td>
<td style="text-align:center">80 -&gt; 52085</td>
<td style="text-align:center">服务器回复，在TCP协议层面确认：“刚才的报文已经收到”。</td>
</tr>
<tr>
<td style="text-align:center">第十个包</td>
<td style="text-align:center">HTTP/1.1 404 Not Found (text/html)</td>
<td style="text-align:center">浏览器解析报文，找不到浏览器请求的数据，则返回404。</td>
</tr>
<tr>
<td style="text-align:center">第十一个包</td>
<td style="text-align:center">52085 -&gt; 80</td>
<td style="text-align:center">浏览器收到服务器返回的报文后，向服务器回复一个TCP的ACK，确认收到了报文。</td>
</tr>
</tbody>
</table>
<h4 id="使用域名访问Web服务器">使用域名访问Web服务器</h4>
<p>当我们使用域名来输入网址按下回车后和输入IP得到的结果一样，那么服务器怎么知道我们的域名对应什么IP地址呢？</p>
<p>浏览器在看到网址不是数字形式的IP地址后，就确认了肯定是域名。于是借助<code>DNS的域名解析功能</code>发起域名解析动作。如果每一个域名都要去网上查找一下，那服务器解析域名是十分缓慢的，所以域名解析过程中有多级缓存。</p>
<p>浏览器查找<code>自己的缓存</code>里面有没有，如果没有就向<code>操作系统的缓存</code>要，如果还是没有就检查本机域名解析文件hosts。也就是“C:\WINDOWS\system32\drivers\etc\hosts”</p>
<h3 id="6-HTTPS挥手">6.HTTPS挥手</h3>
<h3 id="7-返回数据">7.返回数据</h3>
<h3 id="8-页面渲染">8.页面渲染</h3>
<h3 id="7-TCP四次挥手">7.TCP四次挥手</h3>
<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 浏览器发起请求
co=>condition: 是否有缓存？
op=>operation: 向服务器请求资源
op1=>operation: 【存储策略】响应内容存入缓存
co1=>condition: 【过期策略】判断缓存是否过期
co2=>condition: 【协商策略】向服务器发起验证，验证资源是否有效
op2=>operation: 304响应
e=>end: 载入资源

st->co
co(no)->op->op1->e
co(yes)->co1
co1(yes)->co2
co1(no)->e
co2(yes)->op2->op1
co2(no)->op</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script>]]></content>
      <categories>
        <category>面试准备</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>创建数组</title>
    <url>/2022/10/04/technology/Array/created%20array/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="#1">创建数组</a></p>
<ul class="lvl-0">
<li class="lvl-4"><a href="#2">[]</a></li>
<li class="lvl-4"><a href="#3">new Array()</a></li>
<li class="lvl-4"><a href="#4">ES6 Array.of()</a></li>
<li class="lvl-4"><a href="#5">ES6 Array.from()</a></li>
<li class="lvl-4"><a href="#6">参考资料</a></li>
</ul>
<p id=1></p>
<h2 id="创建数组">创建数组</h2>
<p id=2></p>
<h3 id="">[]</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span></code></pre>
<p id=3></p>
<h3 id="new-Array">new Array()</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//[]</span>
<span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//[]</span>
<span class="token keyword">let</span> arr3 <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//[,,]</span>
<span class="token keyword">let</span> arr4 <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">//[3,4,5]</span></code></pre>
<p id=4></p>
<h3 id="ES6-Array-of">ES6 Array.of()</h3>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/of">Array.of() 方法创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型。</a></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [7]</span>
<span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// array of 7 empty slots</span>
Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]</span>
<span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// [1, 2, 3]</span></code></pre>
<p id=5></p>
<h3 id="ES6-Array-from">ES6 Array.from()</h3>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from">Array.from() 方法对一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。</a></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">Array<span class="token punctuation">.</span><span class="token function">form</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token comment">//['1','2','3']</span>

<span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [ "foo", "bar", "baz" ]</span>

<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [[1, 2], [2, 4], [4, 8]]</span>
<span class="token keyword">const</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ['a', 'b'];</span>
Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ['1', '2'];</span>

<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [ 1, 2, 3 ]</span>

Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [2, 4, 6]</span>

Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [0, 1, 2, 3, 4]</span></code></pre>
<p>我们可以使用Array.from给数组去重合并。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">combine</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//[1,2,3]</span></code></pre>
<p id=6></p>
<h3 id="参考资料">参考资料</h3>
<p>[1]<a href="https://juejin.cn/post/6844903614918459406">【干货】js 数组详细操作方法及解析合集</a><br>
[2]<a href="https://developer.mozilla.org/en-US/">MDN</a></p>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>数组</category>
      </categories>
  </entry>
  <entry>
    <title>遍历数组</title>
    <url>/2022/10/04/technology/Array/traversal%20array/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="遍历数组">遍历数组</h2>
<h3 id="forEach">forEach</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>globalThis<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>item:数组中的每一个元素，必选<br>
index:元素对应的下标，可选<br>
arr:原数组，可选<br>
globalThis:forEach中的this指向，不填默认undefined</p>
<p><strong>forEach在遍历的过程中只能使用try…catch中断。</strong></p>
<h3 id="every">every</h3>
<p>every()方法测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>globalThis<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>every()需要返回一个true，如果没有返回值，只会遍历第一个。</p>
<h3 id="some">some</h3>
<p>some()方法测试数组中是不是至少有 1 个元素通过了被提供的函数测试。它返回的是一个 Boolean 类型的值。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>globalThis<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>some()需要返回一个false，如果没有返回值，只会遍历第一个。</p>
<h3 id="filter">filter</h3>
<p>filter() 方法创建给定数组一部分的浅拷贝 (en-US)，其包含通过所提供函数实现的测试的所有元素。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>globalThis<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[]</span></code></pre>
<h3 id="map">map</h3>
<p>map() 方法创建一个新数组，这个新数组由原数组中的每个元素都调用一次提供的函数后的返回值组成。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> item<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>globalThis<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[ 1, 2, 3 ]</span></code></pre>
<h3 id="reduce">reduce</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> init <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>init<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//7</span></code></pre>
<p>init:初始化值</p>
<h3 id="reduceRight">reduceRight</h3>
<p>reduceRight() 方法接受一个函数作为累加器（accumulator）和数组的每个值（从右到左）将其减少为单个值。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> init <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> array1<span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> accumulator<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">)</span><span class="token punctuation">,</span>init<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[6, 4, 5, 2, 3, 0, 1]</span></code></pre>
<p>init:首次调用 callback 函数时，累加器 accumulator 的值。如果未提供该初始值，则将使用数组中的最后一个元素，并跳过该元素。如果不给出初始值，则需保证数组不为空。 否则，在空数组上调用 reduce 或 reduceRight 且未提供初始值（例如 [].reduce( (acc, cur, idx, arr) =&gt; {} ) ）的话，会导致类型错误。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr2<span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//报错</span></code></pre>
<h3 id="ES6-find-findIndex">ES6 find()&amp;findIndex()</h3>
<p>find() 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> item<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//undefined</span></code></pre>
<p>findIndex()方法返回数组中满足提供的测试函数的第一个元素的索引。若没有找到对应元素则返回-1。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> item<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-1</span></code></pre>
<h3 id="keys-values-entries">keys()&amp;values()&amp;entries()</h3>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[ '0', '1', '2' ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[ 1, 2, 3 ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[ [ '0', 1 ], [ '1', 2 ], [ '2', 3 ] ]</span></code></pre>
<h3 id="参考资料">参考资料</h3>
<p>[1]<a href="https://juejin.cn/post/6844903614918459406">【干货】js 数组详细操作方法及解析合集</a><br>
[2]<a href="https://developer.mozilla.org/en-US/">MDN</a></p>
]]></content>
      <categories>
        <category>前端学习</category>
        <category>数组</category>
      </categories>
  </entry>
  <entry>
    <title>今后计划</title>
    <url>/2023/05/02/live/%E4%BB%8A%E5%90%8E%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="今后计划">今后计划</h2>
<h3 id="对今后学习方向的思考">对今后学习方向的思考</h3>
<ol>
<li class="lvl-3">
<p>八股文<br>
    对于前端八股文，感觉已经差不多了，但是还需要不断的巩固，不能慢慢的忘掉，要时刻做好面试的准备。</p>
</li>
<li class="lvl-3">
<p>想要向哪一方向深入学习<br>
    对于前端，都是实在是太多了，方向也很多，要是真的都想深入学习，时间和精力都不允许，这就需要思考一下今后要想哪一方向深入学习了。经过一番的思考，我更加想在学校期间深入学习一下工程化方面的东西，不能止步于写业务逻辑的代码，学习工程化也能让拓宽视野，让自己更加知道前端都有什么。</p>
</li>
<li class="lvl-3">
<p>关于算法的思考<br>
    关于算法我思考了很多，好多人都跟我说算法只需要刷一刷题就行了，能过面试就行。但是算法在我这里不仅仅是为了通过面试这样，算法带给我的更是一种爱好。在写算法的过程中我能静下心来盯着一道题一直看，有种内心的平静。这一段时间都是使用的js来写算法，体会到了一些js API的便利，但是这些便利的API却对算法的提升没有帮助，我在想要不要使用另一门语言来写算法。想用c语言来写算法，在大一的时候也学习过一些c语言的语法，而且c语言更偏向于底层，所以想要尝试一下。可以先看一下《啊哈！算法》这本书。但是，我又感觉写算法不要局限于语言，更要理解算法的思维，所以，还是用自己熟练的语言比较好，还是用我的js吧。</p>
</li>
<li class="lvl-3">
<p>关于焦虑这件事<br>
    其实我对于找实习这件事并没有太焦虑，反而觉得在学校挺好的。主要就是我太容易因为别人的话而变动了，今后还是要靠自己的，要有自己的主见，所以，不能因为别人的一句话而改变自己的想法，更多的是要有自己的思考。</p>
</li>
</ol>
<h3 id="对今后学习时间的思考">对今后学习时间的思考</h3>
<p>    现在已经五月份了，离课程实习也不早了，需要主抓更多的课余时间来学习了。</p>
<p>    关于八股文可以利用中午和晚上的课余时间来学习，主要不能占用主要的时间，也可以在课堂上背一下，反正听课也听不懂。</p>
<p>    算法的话可以利用晚上的时间和课堂时间学习，可以做一下笔记，这样更有利于之后总结。</p>
<p>    至于工程化这方面就需要使用主要时间来进行实战了。可以自己学习工程化来封装一个东西出来，加深理解。</p>
<h3 id="关于发呆这件事">关于发呆这件事</h3>
<p>    看文章和视频都是看着看着就发呆了。需要改正，以后尽量少发呆。</p>
<h3 id="其他">其他</h3>
<p>    其他就是不要给自己焦虑，这样太内耗了，有机会自然就把握住了。没机会就抓紧时间充实自己，等待机会再抓住。</p>
]]></content>
      <categories>
        <category>live</category>
      </categories>
  </entry>
  <entry>
    <title>Lerna</title>
    <url>/2022/05/03/framework/Lerna/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="Lerna">Lerna</h2>
<p>    Lerna是一个优化基于git+npm的多pagkage项目的管理工具</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>解决的痛点</p>
<ul class="lvl-2">
<li class="lvl-4">痛点一:重复操作
<ul class="lvl-4">
<li class="lvl-6">多Package本地link</li>
<li class="lvl-6">多Package依赖安装</li>
<li class="lvl-6">多Package单元测试</li>
<li class="lvl-6">多Package代码提交</li>
<li class="lvl-6">多Package代码发布</li>
</ul>
</li>
<li class="lvl-4">痛点二:版本一致性
<ul class="lvl-4">
<li class="lvl-6">发布时版本一 致性</li>
<li class="lvl-6">发布后相互依赖版本升级</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>package越多，管理复杂度越高</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>优势</p>
<ul class="lvl-2">
<li class="lvl-4">大幅减少重复操作</li>
<li class="lvl-4">提升操作的标准化</li>
</ul>
</li>
</ul>
<p style="color:red">*lerna开发脚手架流程<p>
<p><a href="https://gitcode.gitcode.host/docs-cn/lerna-docs-cn/commands/add/index.html">lerna命令语法文档</a></p>
<pre class="mermaid">graph LR
subgraph 4.脚手架发布上线
	I[lerna version 进行 bump version] --> J[lerna changed 查看上版本以来的所有变更] --> K[lerna diff 查看diff] --> L[lerna publish 项目发布]
end
subgraph 3.脚手架开发和测试
	E[lerna exec 执行shell脚本] --> F[lerna run 执行npm命令] --> G[lerna clean 清空依赖] --> H[lerna bootstrap 重装依赖]
end
subgraph 2.创建package
	B[lerna create 创建Package] --> C[lerna add 安装依赖] --> D[lerna link 连接依赖]
end
subgraph 1.脚手架项目初始化
	初始化npm --> 安装lerna --> A[lerna init]
end
style L fill: #fdb8ff
style F fill: #fdb8ff
style B fill: #fdb8ff
style A fill: #fdb8ff</pre>
<ol>
<li class="lvl-3">
<p>脚手架项目初始化</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml">npm init <span class="token punctuation">-</span>y
npm i <span class="token punctuation">-</span>g lerna
lerna init</code></pre>
</li>
<li class="lvl-3">
<p>创建package</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml">lerna create core <span class="token comment"># 输入命令后会让填写package name，请不要填写成默认的core为name，可以写成@项目名/core，之后一路回车</span>
lerna create utils <span class="token comment"># 步骤和上一条命令一样</span>

<span class="token comment"># 在npm上创建组织，组织名为上两条命令的@后面的项目名</span>
<span class="token comment"># 点击npm头像，点击Add Organization，点击输入项目名，点击create，点击跳过。组织创建完毕。</span>

lerna add 依赖名 <span class="token comment"># 为每个packages安装依赖</span>
lerna add 依赖名 路径名<span class="token punctuation">[</span>packages/core/<span class="token punctuation">]</span> <span class="token comment"># 为单个packages安装依赖</span>

lerna link 
<span class="token comment"># 直接执行lerna link是无效的</span>
<span class="token comment"># 以将utils目录下的lib/utils.js改成lib/index.js</span>
<span class="token comment"># utils目录下的package.json的"main": "lib/utils.js"改成"main": "lib/index.js"</span>
<span class="token comment"># 在core目录下的package.json中写入"dependencies": &#123;"@pale-cli-dev/utils": "^1.0.0"&#125;</span>
<span class="token comment"># 之后再执行lerna link，就会发现在core目录下多了一个node_modules目录，就是utils的软连接</span></code></pre>
</li>
<li class="lvl-3">
<p>脚手架开发和测试</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml">lerna exec <span class="token punctuation">-</span><span class="token punctuation">-</span> rm <span class="token punctuation">-</span>rf node_modules/ 
<span class="token comment"># 删除packages下的所有node_modules，而不是根目录下的node_modules</span>
lerna exec <span class="token punctuation">-</span><span class="token punctuation">-</span>scope 包名<span class="token punctuation">[</span>@pale<span class="token punctuation">-</span>cli<span class="token punctuation">-</span>dev/core<span class="token punctuation">]</span> <span class="token punctuation">-</span><span class="token punctuation">-</span> rm <span class="token punctuation">-</span>rf node_modules. 
<span class="token comment"># 删除packages下core中的node_modules</span>

lerna run 脚本名(package.json中script中的属性) <span class="token comment"># 执行每个packages的脚本命令</span>
lerna run <span class="token punctuation">-</span><span class="token punctuation">-</span>scope 包名<span class="token punctuation">[</span>@pale<span class="token punctuation">-</span>cli<span class="token punctuation">-</span>dev/core<span class="token punctuation">]</span> 脚本名 <span class="token comment"># 执行对应包名下的脚本命令</span>

lerna clean 
<span class="token comment"># 清空添加的依赖 lerna clean只能去除掉packages下的node_modules，但是不会去除package.json中写入的dependencies</span>

lerna bootstrap 
<span class="token comment"># 重装依赖 也可以重装链接（link） 但是需要在lerna.json中设置"useWorkspaces": false，不然会显示lerna info bootstrap root only，而不会进入packages中</span></code></pre>
</li>
<li class="lvl-3">
<p>脚手架发布上线</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml">lerna version <span class="token comment"># 升级版本 需要将代码commite仓库后才能运行</span>

lerna changed <span class="token comment"># 自上一个版本以来 哪些packages进行了变更</span>

lerna diff <span class="token comment"># </span>

lerna publish <span class="token comment"># 发布项目 注意在第二条创建package中需要进行组织的创建</span></code></pre>
</li>
<li class="lvl-3">
<p>关于lerna publish的一些报错</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml">lerna ERR<span class="token tag">!</span> E401 <span class="token punctuation">[</span>UNAUTHORIZED<span class="token punctuation">]</span> Login first，需要将npm设置成原本的镜像npm config set registry https<span class="token punctuation">:</span>//registry.npmjs.org

lerna ERR<span class="token tag">!</span> E426 426 Upgrade Required <span class="token punctuation">-</span> PUT http<span class="token punctuation">:</span>//registry.npmjs.org/@pale<span class="token punctuation">-</span>cli<span class="token punctuation">-</span>dev%2futils 设置的镜像不正确，是https而不是http

最好不要修改版本号，因为虽然npm没有发布成功但是github仓库会有不同版本的tag，如果版本相同也不会发布成功

如果项目中没有修改，内容和上次版本一样，也不会发布成功</code></pre>
</li>
</ol>
]]></content>
      <categories>
        <category>架构</category>
      </categories>
  </entry>
  <entry>
    <title>React新hook</title>
    <url>/2023/05/05/frame/React/React%E6%96%B0%E7%89%B9%E6%80%A7%E7%9A%84hook/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="React18新特性的hook">React18新特性的hook</h2>
<h3 id="useId">useId</h3>
<p>    useId解决了客户端和服务端id不相同的问题。</p>
<p>    我们看下面这段代码</p>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Checkbox</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Checkbox</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">Checkbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">htmlFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">Do you like React?</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>react<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre>
<p>    上面代码我们会发现Checkbox组件复用，会导致出现两个相同的id。会报一个错误<code>IDs used in ARIA and labels must be unique: Document has multiple elements referenced with ARIA with the same id attribute: 1</code>。那我们怎么解决这个问题呢？来看下面这段代码。</p>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Checkbox</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Checkbox</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">Checkbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">const</span> id <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">htmlFor</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>id<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Do you like React?</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>react<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>id<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre>
<p>    使用随机数来代替固定的id使得没有报错，但是这仍然有问题，如果恰好两次随机到了一个数，或者当使用服务端渲染的时候，客户端和服务端的id就不相同了。于是在React18版本就退出了useId这个hook。</p>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useId <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Checkbox</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Checkbox</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">Checkbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">useId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">htmlFor</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>id<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Do you like React?</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>react<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>id<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre>
<p>    上面React渲染成真实DOM后就成了下面的代码。</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>:r1:<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Do you like React?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>react<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>:r1:<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>:r3:<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Do you like React?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>react<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>:r3:<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>    useId的原理就是每个id代表组件在组件树种的层级结构。</p>
<h3 id="useTransition">useTransition</h3>
<p>    在React的状态更新中分为紧急更新和过渡更新。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>紧急更新，输出、点击、拖拽等事件需要立即响应，不然就会有种很卡的感觉。</p>
</li>
<li class="lvl-2">
<p>过渡更新，将UI从一个视图过渡到另一个视图，可以有些延迟。</p>
</li>
</ul>
<p>    并发模式只是提供了可中断的能力，默认情况下，所有的更新都是紧急更新，也就是更新的优先级相同。那么快速更新还是会被其他大量更新拖慢速度。我们看下面代码的示例。</p>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
        <span class="token function">setValue</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">List</span></span> <span class="token attr-name">search</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>search<span class="token punctuation">&#125;</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>search<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

  <span class="token keyword">const</span> <span class="token punctuation">[</span>list<span class="token punctuation">,</span> setList<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      <span class="token function">setList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span>search<span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token punctuation">&#123;</span>
      list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span>index<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>index<span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span>search<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">Item</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre>
<p>    因为上面有5000条数据，每次都search改变100毫秒后都会重新渲染。当输入的速度很快的时候就会导致输入框特别的卡。这是因为输入框的更新优先级和列表的更新优先级是一样的，那有没有一种可能，我们将输入框的优先级提高，这样列表就不会立刻渲染，只有当输入框输入事件不再触发的时候才会渲染呢。</p>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useEffect<span class="token punctuation">,</span> useState<span class="token punctuation">,</span> startTransition <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>search<span class="token punctuation">,</span> setSearch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
        <span class="token function">setValue</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token comment">// 紧急任务</span>
        <span class="token function">startTransition</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
          <span class="token function">setSearch</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token comment">// 非紧急任务</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">List</span></span> <span class="token attr-name">search</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>search<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>search<span class="token punctuation">&#125;</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>search<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

  <span class="token keyword">const</span> <span class="token punctuation">[</span>list<span class="token punctuation">,</span> setList<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      <span class="token function">setList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span>search<span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token punctuation">&#123;</span>
      list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span>index<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>index<span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span>search<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">Item</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre>
<p>    使用startTransition将search状态更新变成非优先级任务，还会出现节流的效果。我们使用useTransition来替代startTransition试一试。</p>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useEffect<span class="token punctuation">,</span> useState<span class="token punctuation">,</span> useTransition <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>search<span class="token punctuation">,</span> setSearch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>isPending<span class="token punctuation">,</span> startTransition<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useTransition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
        <span class="token function">setValue</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token comment">// 紧急任务</span>
        <span class="token function">startTransition</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
          <span class="token function">setSearch</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token comment">// 非紧急任务</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
      </span><span class="token punctuation">&#123;</span>isPending <span class="token operator">&amp;&amp;</span> <span class="token string">'loading……'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token comment">/* 非紧急任务的状态 */</span><span class="token punctuation">&#125;</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">List</span></span> <span class="token attr-name">search</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>search<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>search<span class="token punctuation">&#125;</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>search<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

  <span class="token keyword">const</span> <span class="token punctuation">[</span>list<span class="token punctuation">,</span> setList<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      <span class="token function">setList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span>search<span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token punctuation">&#123;</span>
      list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span>index<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>index<span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span>search<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">Item</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre>
<h3 id="useDeferredValue">useDeferredValue</h3>
<p>    除了useTransition我们还可以使用useDeferredValue将任务变成非紧急状态</p>
<pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useEffect<span class="token punctuation">,</span> useState<span class="token punctuation">,</span> useDeferredValue <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>search<span class="token punctuation">,</span> setSearch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
        <span class="token function">setValue</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token comment">// 紧急任务</span>
        <span class="token function">setSearch</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">List</span></span> <span class="token attr-name">search</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token function">useDeferredValue</span><span class="token punctuation">(</span>search<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">&#123;</span><span class="token comment">/* 标记非紧急状态 */</span><span class="token punctuation">&#125;</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>search<span class="token punctuation">&#125;</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>search<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

  <span class="token keyword">const</span> <span class="token punctuation">[</span>list<span class="token punctuation">,</span> setList<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      <span class="token function">setList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span>search<span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token punctuation">&#123;</span>
      list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span>index<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>index<span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span>search<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">Item</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre>
<h3 id="useDeferredValue与useTransition的区别">useDeferredValue与useTransition的区别</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>不同点：useDeferredValue是把更新任务变成了<code>延迟更新任务</code>，而useTransition是把一个状态变成了<code>延迟状态</code>。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>框架</category>
        <category>react</category>
      </categories>
  </entry>
  <entry>
    <title>慢啃Webpack</title>
    <url>/2023/05/04/webpack/%E6%85%A2%E5%95%83webpack%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="f6863392ad6f9c2f8d1027fd18b2a763eb271b28eab9ee159840fa130f98f12c"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>webpack</category>
      </categories>
  </entry>
  <entry>
    <title>五月中旬总结</title>
    <url>/2023/05/13/live/%E4%BA%94%E6%9C%88%E4%B8%AD%E6%97%AC%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="五月中旬总结">五月中旬总结</h2>
<h3 id="小红书">小红书</h3>
<p>    RN 技术是我大二下学期学习的，当时学长给了一个商业项目，当时拿到项目就开始学习 React，就学习了一周不到就直接开始写 RN 了。虽然一路艰辛，但是最后也写出来了。由于距离现在已经有很长时间了，所以我想再次复习一下 RN，然后就花了不到两周时间仿写了小红书的首页。写的不怎么好。但是学习到了 RN 的一些动画和桥接原生。<a href="https://github.com/guLinga/react-native-xiaohongshu">项目地址</a>放这里了，写的不好，React 优化不好，速度有点慢。</p>
<h3 id="面试">面试</h3>
<p>    这周一的时候面了一下站酷和云智，站酷答得不是很好，算法问的原生 js 对 DOM 操作的一些 API 也不怎么会以为没戏了，云智直接问了快两个小时，算法也都答出来了，结果云智挂了，站酷约二面。看牛客上说云智的人招够了，这也算给自己一个安慰吧。云智的<a href="https://docs.qq.com/doc/DVnFuT2FCVklpV2R3">算法</a>挺有意思的，放这里了，答案是我自己写的，可能不太标准。</p>
<h3 id="Site-Generators">Site Generators</h3>
<p>    最近有点想学习 SSG，就想着自己开发一个小的 Demo，本来用的 webpack 将 markdown 语法转换成 html，但是写着写着发现基本用的是 node，感觉也没啥技术，好多地方写的都不对。参考的是云游君的<a href="https://github.com/YunYouJun/valaxy">valaxy</a>。目前的 Site Generators<a href="https://jamstack.org/generators/">方案</a>有很多种。感觉自己搭建起来有点吃力，代码规范也不太行，就去找了找教程，最总看了神三元的 <a href="https://github.com/sanyuan0704/island.js">island</a>，<a href="https://juejin.cn/video/7163857336258265102?enter_from=course_center&amp;utm_source=course_center">掘金小册</a>有教程，就是挺贵的。</p>
<h3 id="蓝桥杯">蓝桥杯</h3>
<p>    对了昨天蓝桥杯国赛地点出来了。看了看是再郑州轻工业大学，郑州市高新区科学大道 136 号科学校区或郑州市紧随</p>
<table>
<thead>
<tr>
<th style="text-align:center">省份</th>
<th style="text-align:center">赛点院校</th>
<th style="text-align:center">考试科目</th>
<th style="text-align:center">院校地址</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">河南</td>
<td style="text-align:center">郑州轻工业大学（科学校区和东风校区）</td>
<td style="text-align:center">软件类</td>
<td style="text-align:center">郑州市高新区科学大道 136 号科学校区<br>郑州市金水区东风路 5 号东风校区</td>
</tr>
<tr>
<td style="text-align:center">    除了大一时候的实习，还没去郑州玩过嘞，不知道这次有没有机会玩。</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<h3 id="丝之歌">丝之歌</h3>
<p>    丝之歌宣布延期了，我尽然感觉在意料之中。</p>
<h3 id="算法">算法</h3>
<p>    前一段时间参加了力扣杯的团队赛，和老大一队，就写出来一道题还是老大写的，被带了。没想到一道题都能超过百分之七十多的人。</p>
<h3 id="一些经历总结">一些经历总结</h3>
<p>    成长是否有捷径呢？是的，我们都站在巨人的肩膀上。巨人可以是一个人，一本书，一个项目，只要他能够带给你一些进步他就算是巨人。在我写一个东西的时候经常想尝试按照自己的方法来写，最总也可以写出来，但是效果可能没那么好，总是不想去用别人的库，或去看别人的写法，现在我明白了，去读一篇技术文章，去看一篇技术视频并不是说明自己不行，而是成长道路上必须要经历的，前端技术那么多，你总可以从别人身上学习到更多的东西来慢慢成长自己。</p>
<p>    怎么样保持对学习的兴趣呢？在学习前端的过程中，最开始的时候我对前端技术充满了兴趣，对一切都是好奇的，随着学习的逐渐深入，慢慢的对前端的技术有些失去了兴趣。保持自己对技术的兴趣就需要在保证输入的时候进行输出，比如写一些自己对技术的理解，研读源码，做一个项目，最总就是让自己这件事情做下去自己感觉有兴趣，让自己有一个动力源。</p>
]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
</search>
