<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  
  
  <link href="http://gulinga.github.io/atom.xml" rel="self"/>
  
  <link href="http://gulinga.github.io/"/>
  <updated>2023-03-10T02:06:15.773Z</updated>
  <id>http://gulinga.github.io/</id>
  
  <author>
    <name>五亿个小铃铛</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>重拾ts类型体操</title>
    <link href="http://gulinga.github.io/2023/03/10/typeScript/%E9%87%8D%E6%8B%BEts%E7%B1%BB%E5%9E%8B%E4%BD%93%E6%93%8D/"/>
    <id>http://gulinga.github.io/2023/03/10/typeScript/%E9%87%8D%E6%8B%BEts%E7%B1%BB%E5%9E%8B%E4%BD%93%E6%93%8D/</id>
    <published>2023-03-09T16:00:00.000Z</published>
    <updated>2023-03-10T02:06:15.773Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="重拾ts类型体操">重拾ts类型体操</h2><h3 id="匹配模式做提取">匹配模式做提取</h3><ol><li class="lvl-3"><p>数组类型</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>提取数组第一个元素的类型</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">GetFirst<span class="token operator">&lt;</span>Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> Arr <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> First<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">?</span> First <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span></code></pre><ul class="lvl-0"><li class="lvl-2"><p>提取数组的最后一个元素的类型</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">GetLast<span class="token operator">&lt;</span>Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> Arr <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">infer</span> Last<span class="token punctuation">]</span> <span class="token operator">?</span> Last <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span></code></pre><ul class="lvl-0"><li class="lvl-2"><p>去掉数组最后一个元素的类型</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">PopArr<span class="token operator">&lt;</span>Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> Arr <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> Arr <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">infer</span> Result<span class="token punctuation">,</span><span class="token builtin">unknown</span><span class="token punctuation">]</span> <span class="token operator">?</span> Result <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span></code></pre><ul class="lvl-0"><li class="lvl-2"><p>去掉数组第一个元素的类型</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ShiftArr<span class="token operator">&lt;</span>Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> Arr <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> Arr <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">unknown</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token keyword">infer</span> Result<span class="token punctuation">]</span> <span class="token operator">?</span> Result <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span></code></pre><ol start="2"><li class="lvl-3"><p>字符串类型</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>判断字符串是否以某个前缀开始</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">StartWith<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> Start <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">></span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Start<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token builtin">string</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span></code></pre><ul class="lvl-0"><li class="lvl-2"><p>字符串替换</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ReplaceStr<span class="token operator">&lt;</span>  Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>  From <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>  To <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">></span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Prefix<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>From<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Suffix<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span>    ReplaceStr<span class="token operator">&lt;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Prefix<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>To<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Suffix<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>From<span class="token punctuation">,</span>To<span class="token operator">></span> <span class="token operator">:</span> Str</code></pre><ul class="lvl-0"><li class="lvl-2"><p>递归去除字符串中的右侧空格</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">TrimStringRight<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">></span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Result<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token string">' '</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> TrimStringRight<span class="token operator">&lt;</span>Result<span class="token operator">></span> <span class="token operator">:</span> Str<span class="token punctuation">;</span></code></pre><ul class="lvl-0"><li class="lvl-2"><p>递归去除字符串中的左侧空格</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">TrimStringLeft<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">></span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token string">' '</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Result<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> TrimStringLeft<span class="token operator">&lt;</span>Result<span class="token operator">></span> <span class="token operator">:</span> Str<span class="token punctuation">;</span></code></pre><ul class="lvl-0"><li class="lvl-2"><p>递归去除字符串中的左右侧空格</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">TrimString<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">></span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token string">' '</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Result<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token string">' '</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> TrimString<span class="token operator">&lt;</span>Result<span class="token operator">></span> <span class="token operator">:</span> Str<span class="token punctuation">;</span></code></pre><ol start="3"><li class="lvl-3"><p>函数</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>提取参数的类型</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">FunctionArgs<span class="token operator">&lt;</span>Fn <span class="token keyword">extends</span> <span class="token builtin">Function</span><span class="token operator">></span></span> <span class="token operator">=</span> Fn <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span><span class="token keyword">infer</span> Args<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">unknown</span> <span class="token operator">?</span> Args <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span></code></pre><ul class="lvl-0"><li class="lvl-2"><p>提取返回值</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">FunctionResult<span class="token operator">&lt;</span>Fn <span class="token keyword">extends</span> <span class="token builtin">Function</span><span class="token operator">></span></span> <span class="token operator">=</span> Fn <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">infer</span> Result <span class="token operator">?</span> Result <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span></code></pre><ul class="lvl-0"><li class="lvl-2"><p>提取函数中的this</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">FunctionThis<span class="token operator">&lt;</span>Fn <span class="token keyword">extends</span> <span class="token builtin">Function</span><span class="token operator">></span></span> <span class="token operator">=</span> Fn <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span><span class="token keyword">infer</span> This<span class="token punctuation">,</span><span class="token operator">...</span>args<span class="token operator">:</span><span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token builtin">unknown</span> <span class="token operator">?</span> This <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span></code></pre><ol start="4"><li class="lvl-3"><p>构造器</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>匹配提取出实例对象</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">GetInstanceType<span class="token operator">&lt;</span>Type <span class="token keyword">extends</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">=></span></span><span class="token builtin">any</span><span class="token operator">></span> <span class="token operator">=</span> Type <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">new</span></span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">infer</span> Result <span class="token operator">?</span> Result <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span><span class="token comment">// 测试案例</span><span class="token keyword">interface</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">PersonConstructor</span><span class="token punctuation">&#123;</span>  <span class="token keyword">new</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span>Person<span class="token punctuation">&#125;</span><span class="token keyword">type</span> <span class="token class-name">person</span> <span class="token operator">=</span> GetInstanceType<span class="token operator">&lt;</span>PersonConstructor<span class="token operator">></span><span class="token punctuation">;</span></code></pre><ul class="lvl-0"><li class="lvl-2"><p>提取构造器的参数</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">GetInstanceParam<span class="token operator">&lt;</span>Type <span class="token keyword">extends</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">=></span></span><span class="token builtin">any</span><span class="token operator">></span> <span class="token operator">=</span> Type <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">new</span></span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span><span class="token keyword">infer</span> Result<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">unknown</span> <span class="token operator">?</span> Result <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span><span class="token comment">// 测试案例</span><span class="token keyword">interface</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">PersonConstructor</span><span class="token punctuation">&#123;</span>  <span class="token keyword">new</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span>Person<span class="token punctuation">&#125;</span><span class="token keyword">type</span> <span class="token class-name">person</span> <span class="token operator">=</span> GetInstanceParam<span class="token operator">&lt;</span>PersonConstructor<span class="token operator">></span><span class="token punctuation">;</span></code></pre><ol start="5"><li class="lvl-3"><p>索引类型</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>提取ref的值的类型<br>ts类型体操，提取ref的值的类型。</p></li></ul><h3 id="重新构造做变换">重新构造做变换</h3><ol><li class="lvl-3"><p>数组类型的重新构造</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>向数组后面添加元素</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Push<span class="token operator">&lt;</span>Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>Ele<span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>Arr<span class="token punctuation">,</span>Ele<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><ul class="lvl-0"><li class="lvl-2"><p>向数组前面添加元素</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Shift<span class="token operator">&lt;</span>Ele<span class="token punctuation">,</span> Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">[</span>Ele<span class="token punctuation">,</span><span class="token operator">...</span>Arr<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><ul class="lvl-0"><li class="lvl-2"><p>合并只有两个元素的两个元组对应的元素</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Concat<span class="token operator">&lt;</span>One <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">unknown</span><span class="token punctuation">,</span><span class="token builtin">unknown</span><span class="token punctuation">]</span><span class="token punctuation">,</span>Two <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">unknown</span><span class="token punctuation">,</span><span class="token builtin">unknown</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> One <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> OneFirst<span class="token punctuation">,</span> <span class="token keyword">infer</span> OneSecond<span class="token punctuation">]</span> <span class="token operator">?</span>  Two <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> TwoFirst<span class="token punctuation">,</span> <span class="token keyword">infer</span> TwoSecond<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>OneFirst<span class="token punctuation">,</span>OneSecond<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>TwoFirst<span class="token punctuation">,</span>TwoSecond<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre><ul class="lvl-0"><li class="lvl-2"><p>合并只有任意个元素的两个元组对应的元素</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Concat<span class="token operator">&lt;</span>One <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>Two <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> One <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> OneFirst<span class="token punctuation">,</span><span class="token operator">...</span><span class="token keyword">infer</span> OneOther<span class="token punctuation">]</span> <span class="token operator">?</span>  Two <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> TwoFirst<span class="token punctuation">,</span><span class="token operator">...</span><span class="token keyword">infer</span> TwoOther<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>OneFirst<span class="token punctuation">,</span>TwoFirst<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">...</span>Concat<span class="token operator">&lt;</span>OneOther<span class="token punctuation">,</span>TwoOther<span class="token operator">></span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><ol start="2"><li class="lvl-3"><p>字符串的重新构造</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>将字符串第一个元素转换成大写</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">StringFistToUp<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">></span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> First<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Other<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Uppercase<span class="token operator">&lt;</span>First<span class="token operator">></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Other<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token builtin">never</span></code></pre><ul class="lvl-0"><li class="lvl-2"><p>删除字符串中的某个字串</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">DeleteString<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>Ele <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">></span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Start<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Ele<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> End<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> DeleteString<span class="token operator">&lt;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Start<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>End<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>Ele<span class="token operator">></span> <span class="token operator">:</span> Str</code></pre><ul class="lvl-0"><li class="lvl-2"><p>函数类型的重新构造</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">FunAddParam<span class="token operator">&lt;</span>Fn <span class="token keyword">extends</span> <span class="token builtin">Function</span><span class="token punctuation">,</span>Arg <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token operator">></span></span> <span class="token operator">=</span>Fn <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span><span class="token keyword">infer</span> Args<span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">infer</span> Result <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span><span class="token punctuation">[</span><span class="token operator">...</span>Args<span class="token punctuation">,</span>Arg<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">=></span>Result <span class="token operator">:</span> <span class="token builtin">never</span></code></pre><ol start="3"><li class="lvl-3"><p>索引类型重新构造</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>把索引类型的Key变成大写</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">KeyUp<span class="token operator">&lt;</span>Obj <span class="token keyword">extends</span> Object<span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span>Key <span class="token keyword">in</span> <span class="token keyword">keyof</span> Obj <span class="token keyword">as</span> Uppercase<span class="token operator">&lt;</span>Key <span class="token operator">&amp;</span> <span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">:</span>Obj<span class="token punctuation">[</span>Key<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul class="lvl-0"><li class="lvl-2"><p>Record，typescript内置了Record，用来创建索引类型。</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">_Record<span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">&#125;</span></code></pre><ul class="lvl-0"><li class="lvl-2"><p>将索引转换成只读</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ReadonlyParam<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token keyword">readonly</span>  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><ul class="lvl-0"><li class="lvl-2"><p>给索引添加可选修饰符</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">toSelector<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><ul class="lvl-0"><li class="lvl-2"><p>去掉只读修饰符</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">RemoveReadonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token operator">-</span><span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><ul class="lvl-0"><li class="lvl-2"><p>去掉可选修饰符</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ClearSelector<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><ul class="lvl-0"><li class="lvl-2"><p>对索引类型做过滤</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">FilterValue<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">,</span>valueType <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span>Key <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token constant">T</span><span class="token punctuation">[</span>Key<span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">valueType</span> <span class="token operator">?</span> Key <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>Key<span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><h3 id="递归复用做循环">递归复用做循环</h3><ol><li class="lvl-3"><p>Promise的递归调用</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>提取不确定层数的Promise中的value类型的高级类型</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">PromiseValue<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">infer</span> Value<span class="token operator">></span></span><span class="token operator">?</span>  PromiseValue<span class="token operator">&lt;</span>Value<span class="token operator">></span><span class="token operator">:</span> <span class="token constant">T</span><span class="token keyword">type</span> <span class="token class-name">promise</span> <span class="token operator">=</span> PromiseValue<span class="token operator">&lt;</span><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">Promise</span><span class="token operator">&lt;</span>Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">any</span><span class="token operator">>>></span><span class="token operator">></span></code></pre><ol start="2"><li class="lvl-3"><p>数组类型的递归</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>不确定长度的元组反转</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ReverseArr<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">unknown</span><span class="token operator">>></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> First<span class="token punctuation">,</span><span class="token operator">...</span><span class="token keyword">infer</span> Other<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">...</span>ReverseArr<span class="token operator">&lt;</span>Other<span class="token operator">></span><span class="token punctuation">,</span>First<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span></code></pre><ul class="lvl-0"><li class="lvl-2"><p>寻找元组中是否存在某个元素</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">IsEqual<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span><span class="token constant">B</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">type</span> <span class="token class-name">Include<span class="token operator">&lt;</span>Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>Ele<span class="token operator">></span></span> <span class="token operator">=</span> Arr <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> First<span class="token punctuation">,</span><span class="token operator">...</span><span class="token keyword">infer</span> Other<span class="token punctuation">]</span> <span class="token operator">?</span>  IsEqual<span class="token operator">&lt;</span>First<span class="token punctuation">,</span>Ele<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> Include<span class="token operator">&lt;</span>Other<span class="token punctuation">,</span>Ele<span class="token operator">></span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span></code></pre><ul class="lvl-0"><li class="lvl-2"><p>删除元组中的某个元素</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">RemoveArrItem<span class="token operator">&lt;</span>  Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  Item<span class="token punctuation">,</span>  Result <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> Arr <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> First<span class="token punctuation">,</span><span class="token operator">...</span><span class="token keyword">infer</span> Other<span class="token punctuation">]</span> <span class="token operator">?</span>  IsEqual<span class="token operator">&lt;</span>Item<span class="token punctuation">,</span>First<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> RemoveArrItem<span class="token operator">&lt;</span>Other<span class="token punctuation">,</span>Item<span class="token punctuation">,</span>Result<span class="token operator">></span> <span class="token operator">:</span> RemoveArrItem<span class="token operator">&lt;</span>Other<span class="token punctuation">,</span>Item<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">...</span>Result<span class="token punctuation">,</span>First<span class="token punctuation">]</span><span class="token operator">></span><span class="token operator">:</span> Result<span class="token keyword">type</span> <span class="token class-name">IsEqual<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span><span class="token constant">B</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span></code></pre><ul class="lvl-0"><li class="lvl-2"><p>构建一个自定义长度的同一类别的数组</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">BuildArr<span class="token operator">&lt;</span>  Length <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>  Ele<span class="token punctuation">,</span>  Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> Arr<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Length</span> <span class="token operator">?</span> Arr <span class="token operator">:</span> BuildArr<span class="token operator">&lt;</span>Length<span class="token punctuation">,</span>Ele<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">...</span>Arr<span class="token punctuation">,</span>Ele<span class="token punctuation">]</span><span class="token operator">></span></code></pre><ol start="3"><li class="lvl-3"><p>字符串类型的递归</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>将字符串中的所用的指定字串替换成另一个字符串</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Replace<span class="token operator">&lt;</span>  Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>  From <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>  To <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">></span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Start<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>From<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> End<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> Replace<span class="token operator">&lt;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Start<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>To<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>End<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>From<span class="token punctuation">,</span>To<span class="token operator">></span> <span class="token operator">:</span> Str</code></pre><ul class="lvl-0"><li class="lvl-2"><p>将字符串的每个元素提取出来转换成联合类型</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">StrType<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>Result <span class="token operator">=</span> <span class="token builtin">never</span><span class="token operator">></span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> First<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Other<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> StrType<span class="token operator">&lt;</span>Other<span class="token punctuation">,</span>Result<span class="token operator">|</span>First<span class="token operator">></span> <span class="token operator">:</span> Result</code></pre><ul class="lvl-0"><li class="lvl-2"><p>反转字符串类型</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ReverseString<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>Result <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token operator">></span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> First<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Other<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> ReverseString<span class="token operator">&lt;</span>Other<span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Result<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>First<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token operator">></span> <span class="token operator">:</span> Result</code></pre><ol start="4"><li class="lvl-3"><p>对象类型的递归(索引类型的递归)</p></li></ol><p>-递归将所有层的索引都变成只读错误代码，如果测试一下我们就会发现，递归没有进行下去。因为ts的类型只有被用到的时候才会被计算。这里只是给第一次的索引加上了只读，但是没有使用。所以不会进行计算，我们可以加一个Obj extends any让其计算。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">DeepReadonly<span class="token operator">&lt;</span>Obj <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">any</span><span class="token operator">>></span></span> <span class="token operator">=</span> Obj <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">any</span></span> <span class="token operator">?</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">readonly</span> <span class="token punctuation">[</span>Key <span class="token keyword">in</span> <span class="token keyword">keyof</span> Obj<span class="token punctuation">]</span><span class="token operator">:</span> Obj<span class="token punctuation">[</span>Key<span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">any</span><span class="token operator">></span></span> <span class="token operator">?</span>     Obj<span class="token punctuation">[</span>Key<span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Function</span></span> <span class="token operator">?</span> Obj<span class="token punctuation">[</span>Key<span class="token punctuation">]</span> <span class="token operator">:</span> DeepReadonly<span class="token operator">&lt;</span>Obj<span class="token punctuation">[</span>Key<span class="token punctuation">]</span><span class="token operator">></span>  <span class="token operator">:</span> Obj<span class="token punctuation">[</span>Key<span class="token punctuation">]</span><span class="token punctuation">&#125;</span> <span class="token operator">:</span> <span class="token builtin">never</span></code></pre><h3 id="数组长度做计算">数组长度做计算</h3><ol><li class="lvl-3"><p>数组长度实现加减乘除</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>加</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">BuildArray<span class="token operator">&lt;</span>  Length <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>  Ele <span class="token operator">=</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span>  Result <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> Result<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Length</span> <span class="token operator">?</span> Result <span class="token operator">:</span> BuildArray<span class="token operator">&lt;</span>Length<span class="token punctuation">,</span>Ele<span class="token punctuation">,</span><span class="token punctuation">[</span>Ele<span class="token punctuation">,</span><span class="token operator">...</span>Result<span class="token punctuation">]</span><span class="token operator">></span><span class="token keyword">type</span> <span class="token class-name">Add<span class="token operator">&lt;</span>Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>Result <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> Arr <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> Start <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token keyword">infer</span> Other<span class="token punctuation">]</span>                                                          <span class="token operator">?</span> Add<span class="token operator">&lt;</span>Other<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">...</span>BuildArray<span class="token operator">&lt;</span>Start<span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">...</span>Result<span class="token punctuation">]</span><span class="token operator">></span> <span class="token operator">:</span>                                                           Result<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span><span class="token keyword">type</span> <span class="token class-name">s</span> <span class="token operator">=</span> Add<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">></span></code></pre><ul class="lvl-0"><li class="lvl-2"><p>减</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">BuildArray<span class="token operator">&lt;</span>  Length <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>  Ele <span class="token operator">=</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span>  Result <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> Result<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Length</span> <span class="token operator">?</span> Result <span class="token operator">:</span> BuildArray<span class="token operator">&lt;</span>Length<span class="token punctuation">,</span>Ele<span class="token punctuation">,</span><span class="token punctuation">[</span>Ele<span class="token punctuation">,</span><span class="token operator">...</span>Result<span class="token punctuation">]</span><span class="token operator">></span><span class="token keyword">type</span> <span class="token class-name">SubTract<span class="token operator">&lt;</span>Num1 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>Num2 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token operator">></span></span> <span class="token operator">=</span> BuildArray<span class="token operator">&lt;</span>Num1<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token operator">...</span>BuildArray<span class="token operator">&lt;</span>Num2<span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token keyword">infer</span> Result<span class="token punctuation">]</span> <span class="token operator">?</span> Result<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token builtin">never</span></code></pre><ul class="lvl-0"><li class="lvl-2"><p>乘</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">BuildArray<span class="token operator">&lt;</span>  Length <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>  Ele <span class="token operator">=</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span>  Result <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> Result<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Length</span> <span class="token operator">?</span> Result <span class="token operator">:</span> BuildArray<span class="token operator">&lt;</span>Length<span class="token punctuation">,</span>Ele<span class="token punctuation">,</span><span class="token punctuation">[</span>Ele<span class="token punctuation">,</span><span class="token operator">...</span>Result<span class="token punctuation">]</span><span class="token operator">></span><span class="token keyword">type</span> <span class="token class-name">SubTract<span class="token operator">&lt;</span>Num1 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>Num2 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token operator">></span></span> <span class="token operator">=</span> BuildArray<span class="token operator">&lt;</span>Num1<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token operator">...</span>BuildArray<span class="token operator">&lt;</span>Num2<span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token keyword">infer</span> Result<span class="token punctuation">]</span> <span class="token operator">?</span> Result<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token keyword">type</span> <span class="token class-name">Multiply<span class="token operator">&lt;</span>  Num1 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>  Num2 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>  Result <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> Num1 <span class="token keyword">extends</span> <span class="token number">0</span> <span class="token operator">?</span> Result<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token operator">:</span> Multiply<span class="token operator">&lt;</span>SubTract<span class="token operator">&lt;</span>Num1<span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">></span><span class="token punctuation">,</span>Num2<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">...</span>Result<span class="token punctuation">,</span><span class="token operator">...</span>BuildArray<span class="token operator">&lt;</span>Num2<span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">></span></code></pre><ul class="lvl-0"><li class="lvl-2"><p>除</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">BuildArray<span class="token operator">&lt;</span>  Length <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>  Ele <span class="token operator">=</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span>  Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> Arr<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Length</span> <span class="token operator">?</span>    Arr <span class="token operator">:</span>    BuildArray<span class="token operator">&lt;</span>Length<span class="token punctuation">,</span>Ele<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">...</span>Arr<span class="token punctuation">,</span>Ele<span class="token punctuation">]</span><span class="token operator">></span><span class="token keyword">type</span> <span class="token class-name">Subtract<span class="token operator">&lt;</span>Num1 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span> Num2 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token operator">></span></span> <span class="token operator">=</span> BuildArray<span class="token operator">&lt;</span>Num1<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token operator">:</span> BuildArray<span class="token operator">&lt;</span>Num2<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">...</span>arr2<span class="token operator">:</span> <span class="token keyword">infer</span> Rest<span class="token punctuation">]</span> <span class="token operator">?</span>Rest<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token keyword">type</span> <span class="token class-name">Divide<span class="token operator">&lt;</span>  Num1 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>  Num2 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>  ResultArr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> Num1 <span class="token keyword">extends</span> <span class="token number">0</span> <span class="token operator">?</span>    ResultArr<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token operator">:</span>    Divide<span class="token operator">&lt;</span>Subtract<span class="token operator">&lt;</span>Num1<span class="token punctuation">,</span>Num2<span class="token operator">></span><span class="token punctuation">,</span>Num2<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token builtin">unknown</span><span class="token punctuation">,</span> <span class="token operator">...</span>ResultArr<span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">type</span> <span class="token class-name">divide</span> <span class="token operator">=</span> Divide<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre><ul class="lvl-0"><li class="lvl-2"><p>求字符串的长度的类型</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">StrLen<span class="token operator">&lt;</span>  Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>  ResultArr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token builtin">string</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Rest<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token operator">?</span>   StrLen<span class="token operator">&lt;</span>Rest<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">...</span>ResultArr<span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token operator">:</span> ResultArr<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">type</span> <span class="token class-name">str</span> <span class="token operator">=</span> StrLen<span class="token operator">&lt;</span><span class="token string">'123'</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre><ul class="lvl-0"><li class="lvl-2"><p>比较两个值的大小</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Than<span class="token operator">&lt;</span>  Num1 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>  Num2 <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>  Count <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> Num1 <span class="token keyword">extends</span> <span class="token class-name">Num2</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span>  Count<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Num2</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span>  Count<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Num1</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span>  Than<span class="token operator">&lt;</span>Num1<span class="token punctuation">,</span>Num2<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token builtin">unknown</span><span class="token punctuation">,</span><span class="token operator">...</span>Count<span class="token punctuation">]</span><span class="token operator">></span></code></pre><ul class="lvl-0"><li class="lvl-2"><p>Fibonacci 数列的计算</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Fi<span class="token operator">&lt;</span>  Left <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  Right <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  Num <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span>  Idx <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token operator">></span></span> <span class="token operator">=</span> Idx<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Num</span> <span class="token operator">?</span> Right<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token operator">:</span> Fi<span class="token operator">&lt;</span>Right<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">...</span>Left<span class="token punctuation">,</span><span class="token operator">...</span>Right<span class="token punctuation">]</span><span class="token punctuation">,</span>Num<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">...</span>Idx<span class="token punctuation">,</span><span class="token builtin">unknown</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token keyword">type</span> <span class="token class-name">Fib<span class="token operator">&lt;</span>Num <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token operator">></span></span> <span class="token operator">=</span> Fi<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>Num<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span></code></pre><h3 id="联合分散可化简">联合分散可化简</h3><ol><li class="lvl-3"><p>将联合类型的字符串_去点，并将_后的第一个字母大写</p></li></ol><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Tool<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">></span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> First<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> Start<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">infer</span> End<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> Tool<span class="token operator">&lt;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>First<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Uppercase<span class="token operator">&lt;</span>Start<span class="token operator">></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>End<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token operator">></span> <span class="token operator">:</span> Str<span class="token keyword">type</span> <span class="token class-name">item</span> <span class="token operator">=</span> Tool<span class="token operator">&lt;</span><span class="token string">'aa_bb_cc_dd'</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre><ol start="2"><li class="lvl-3"><p>判断联合类型</p></li></ol><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Tool<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span> <span class="token operator">=</span> <span class="token constant">A</span><span class="token operator">></span></span> <span class="token operator">=</span><span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span><span class="token operator">?</span>  <span class="token punctuation">[</span><span class="token constant">B</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token constant">A</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token operator">:</span> <span class="token builtin">never</span></code></pre><ol start="3"><li class="lvl-3"><p>BEM<br>BEM是css命名规范</p></li></ol><pre class="language-yarm" data-language="yarm"><code class="language-yarm">type bemResult &#x3D; BEM&lt;&#39;guang&#39;, [&#39;aaa&#39;, &#39;bbb&#39;], [&#39;warning&#39;, &#39;success&#39;]&gt;;&#x2F;&#x2F;会转换成guang__aaa--warning guang__bbb--success</code></pre><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">BEM</span><span class="token operator">&lt;</span>Ele1 <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>Ele2 <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>Ele3 <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Ele1<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">__</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Ele2<span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Ele3<span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span></code></pre><ol start="4"><li class="lvl-3"><p>AllCombinations</p></li></ol><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Combination<span class="token operator">&lt;</span><span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">></span></span> <span class="token operator">=</span>    <span class="token operator">|</span> <span class="token constant">A</span>    <span class="token operator">|</span> <span class="token constant">B</span>    <span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">A</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">B</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>    <span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">B</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">A</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token keyword">type</span> <span class="token class-name">AllCombinations<span class="token operator">&lt;</span><span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token constant">A</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span>    <span class="token operator">?</span> Combination<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> AllCombinations<span class="token operator">&lt;</span>Exclude<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">>>></span>    <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span><span class="token keyword">type</span> <span class="token class-name">all</span> <span class="token operator">=</span> AllCombinations<span class="token operator">&lt;</span><span class="token string">'A'</span> <span class="token operator">|</span> <span class="token string">'B'</span> <span class="token operator">|</span> <span class="token string">'C'</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre><h3 id="特殊类型要记清">特殊类型要记清</h3><ol><li class="lvl-3"><p>IsEqual</p></li></ol><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">IsEqual<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span><span class="token constant">B</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span></code></pre><ol start="2"><li class="lvl-3"><p>几个条件类型的特殊情况</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>联合类型作为类型参数在条件类型左边的时候，会把每个类型单独传入做计算，并把结果合并成联合类型。</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Test<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">type</span> <span class="token class-name">res</span> <span class="token operator">=</span> Test<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">|</span> <span class="token string">'a'</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment">//type res = 1 | 2</span></code></pre><ul class="lvl-0"><li class="lvl-2"><p>boolean也是联合类型，是false | true。</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Test<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">type</span> <span class="token class-name">res</span> <span class="token operator">=</span> Test<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment">//type res = false | true</span></code></pre><ul class="lvl-0"><li class="lvl-2"><p>any类型如果在条件类型的左边，则返回trueType和falseType的联合类型。</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Test<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">type</span> <span class="token class-name">res</span> <span class="token operator">=</span> Test<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment">//type res = 1 | 2</span></code></pre><ul class="lvl-0"><li class="lvl-2"><p>当条件类型的左侧是never的时候直接返回never。</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Test<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">type</span> <span class="token class-name">res</span> <span class="token operator">=</span> Test<span class="token operator">&lt;</span><span class="token builtin">never</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment">//type res = never</span></code></pre><h3 id="内置高级类型">内置高级类型</h3><ol><li class="lvl-3"><p>Parameters-用来提取函数参数的类型</p></li></ol><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Parameters<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span></span> <span class="token builtin">any</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">P</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">any</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span></code></pre><ol start="2"><li class="lvl-3"><p>ResultType-用来提取函数的返回值类型</p></li></ol><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ReturnType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span></span> <span class="token builtin">any</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span></code></pre><ol start="3"><li class="lvl-3"><p>ConstructorParameters-用来提取构造器的参数类型</p></li></ol><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ConstructorParameters<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">abstract</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span></span> <span class="token builtin">any</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">abstract</span></span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">P</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">any</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span></code></pre><ol start="4"><li class="lvl-3"><p>InstanceType-用来提取构造器的返回值类型</p></li></ol><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">InstanceType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">abstract</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span></span> <span class="token builtin">any</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">abstract</span></span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span></code></pre><ol start="5"><li class="lvl-3"><p>Partial-把索引类型变成可选类型</p></li></ol><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Partial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><ol start="6"><li class="lvl-3"><p>Required-把可选的索引类型变成必选类型</p></li></ol><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Required<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><ol start="7"><li class="lvl-3"><p>Readonly-把索引类型变成只读类型</p></li></ol><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Readonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><ol start="8"><li class="lvl-3"><p>Pick-对索引进行修改和过滤,保留对应的索引</p></li></ol><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><ol start="9"><li class="lvl-3"><p>Record-用来创建索引类型</p></li></ol><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Record<span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><ol start="10"><li class="lvl-4"><p>Exclude-用来删除联合类型的一部分</p></li></ol><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Exclude<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span></code></pre><ol start="11"><li class="lvl-4"><p>Extract-用来保留联合类型的一部分</p></li></ol><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Extract<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span></code></pre><ol start="12"><li class="lvl-4"><p>Omit-和Pick相反，去掉对应的索引</p></li></ol><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Omit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token builtin">any</span><span class="token operator">></span></span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> Exclude<span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">>></span><span class="token punctuation">;</span></code></pre><ol start="13"><li class="lvl-4"><p>Awaited-用来获取Promise的ValueType的类型</p></li></ol><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Awaited<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span>    <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">null</span></span> <span class="token operator">|</span> <span class="token keyword">undefined</span>        <span class="token operator">?</span> <span class="token constant">T</span>         <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span> <span class="token operator">&amp;</span> <span class="token punctuation">&#123;</span> <span class="token function">then</span><span class="token punctuation">(</span>onfulfilled<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">F</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">&#125;</span>            <span class="token operator">?</span> <span class="token constant">F</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">V</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">any</span><span class="token punctuation">)</span>                <span class="token operator">?</span> Awaited<span class="token operator">&lt;</span><span class="token constant">V</span><span class="token operator">></span>                <span class="token operator">:</span> <span class="token builtin">never</span>             <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span></code></pre><ol start="14"><li class="lvl-4"><p>NonNullable-用来判断是否为非空类型</p></li></ol><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">NonNullable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">null</span></span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span></code></pre><ol start="15"><li class="lvl-4"><p>ThisParameterType-函数里可以调用 this，这个 this 的类型也可以约束。</p></li></ol><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ThisParameterType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span>     <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">any</span>         <span class="token operator">?</span> <span class="token constant">U</span>         <span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">;</span></code></pre><ol start="16"><li class="lvl-4"><p>OmitThisParameter-用来提取this</p></li></ol><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">OmitThisParameter<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span>     <span class="token builtin">unknown</span> <span class="token keyword">extends</span> <span class="token class-name">ThisParameterType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span>         <span class="token operator">?</span> <span class="token constant">T</span>         <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">A</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">infer</span> <span class="token constant">R</span>             <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token constant">A</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">R</span>             <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css&quot;&gt;&lt;scrip</summary>
      
    
    
    
    <category term="typescript" scheme="http://gulinga.github.io/categories/typescript/"/>
    
    
  </entry>
  
  <entry>
    <title>React数据管理</title>
    <link href="http://gulinga.github.io/2023/03/06/frame/React/React%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/"/>
    <id>http://gulinga.github.io/2023/03/06/frame/React/React%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/</id>
    <published>2023-03-05T16:00:00.000Z</published>
    <updated>2023-03-06T09:23:18.288Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="React数据管理">React数据管理</h2><p><a href="https://github.com/guLinga/React-data-administration">代码仓库</a></p><h3 id="React批量更新">React批量更新</h3><p>React中的批量更新就是将多次更新合并处理，最终只渲染一次，来获得更好的性能。</p><h4 id="React18版本之前的批量更新">React18版本之前的批量更新</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// react 17 react-dom 17 react-scripts 4.0.3</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ReactDOM <span class="token keyword">from</span> <span class="token string">"react-dom"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>useState<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>num1<span class="token punctuation">,</span> setNum1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>num2<span class="token punctuation">,</span> setNum2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setNum1</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setNum2</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"render"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token literal-property property">num1</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>num1<span class="token punctuation">&#125;</span><span class="token operator">-</span>num2<span class="token operator">:</span><span class="token punctuation">&#123;</span>num2<span class="token punctuation">&#125;</span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span><span class="token operator">></span>Next<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> rootElement<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>点击一次按钮触发setNum1和setNum2，但是render只输出一次，React将多次更新合并处理，最终只渲染一次。</p><p>然而React18版本之前，批量更新并不是所有场景都会生效。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ReactDOM <span class="token keyword">from</span> <span class="token string">"react-dom"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>useState<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>num1<span class="token punctuation">,</span> setNum1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>num2<span class="token punctuation">,</span> setNum2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>      <span class="token function">setNum1</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">setNum2</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"render"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token literal-property property">num1</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>num1<span class="token punctuation">&#125;</span><span class="token operator">-</span>num2<span class="token operator">:</span><span class="token punctuation">&#123;</span>num2<span class="token punctuation">&#125;</span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span><span class="token operator">></span>Next<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> rootElement<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>点击一次按钮触发setNum1和setNum2，然后会输出两次render，这就是在React18版本之前，React的批量更新失效了。</p><p>总结：在React18之前，我们只能在React事件处理函数中执行过程中进行批量更新。对于promise、setTimeout、原生事件处理函数或其他任何事件中的状态更新都不会进行批量更新。</p><h4 id="React18自动批量更新">React18自动批量更新</h4><p>从React18的createRoot开始，无论在哪里，所有更新都将自动进行批量更新。这意味着 setTimeout、promises、原生事件处理函数或其他任何事件的批量更新都将与 React 事件一样，以相同的方式进行批量更新。我们希望这样可以减少渲染工作量，从而提高应用程序的性能:</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// react 18.2.0 react-dom 18.2.0 react-scripts 5.0.1</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom/client'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>useState<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>num1<span class="token punctuation">,</span> setNum1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>num2<span class="token punctuation">,</span> setNum2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>      <span class="token function">setNum1</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">setNum2</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"render"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token literal-property property">num1</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>num1<span class="token punctuation">&#125;</span><span class="token operator">-</span>num2<span class="token operator">:</span><span class="token punctuation">&#123;</span>num2<span class="token punctuation">&#125;</span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span><span class="token operator">></span>Next<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>点击一次按钮触发setNum1和setNum2，然后会输出一次render，这就是在React18版本，自动批量更新，所有更新都将进行批量更新。</p><h4 id="禁止批量更新">禁止批量更新</h4><p>使用flushSync来包裹更新，做到禁止批量更新</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom/client'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>flushSync<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>useState<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>num1<span class="token punctuation">,</span> setNum1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>num2<span class="token punctuation">,</span> setNum2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>      <span class="token function">flushSync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token function">setNum1</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token function">flushSync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token function">setNum2</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"render"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token literal-property property">num1</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>num1<span class="token punctuation">&#125;</span><span class="token operator">-</span>num2<span class="token operator">:</span><span class="token punctuation">&#123;</span>num2<span class="token punctuation">&#125;</span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span><span class="token operator">></span>Next<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="React18的自动批量更新对Hooks的影响">React18的自动批量更新对Hooks的影响</h4><p>如果你正在使用 Hooks，在绝大多数情况下批量更新都能“正常工作”。</p><h4 id="React18的自动批量更新对Classes的影响">React18的自动批量更新对Classes的影响</h4><p>如果在React17版本之前，没有在React事件处理函数中执行的代码不会批量执行，同时它也是同步执行，而在React18版本中，都是批量更新和异步执行的。所以会导致React18版本和React18版本之前的输出不一样。</p><p>在React18版本之前</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">num1</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token literal-property property">num2</span><span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>num1<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">num1</span><span class="token operator">:</span> num1<span class="token operator">+</span><span class="token number">1</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>num2<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">num2</span><span class="token operator">:</span> num2<span class="token operator">+</span><span class="token number">1</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'render'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token literal-property property">num1</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>num1<span class="token punctuation">&#125;</span><span class="token operator">-</span>num2<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>num2<span class="token punctuation">&#125;</span>        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">></span>Next<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> rootElement<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*  上述代码点击的时候会输出一下内容：  render  &#123;num1: 2, num2: 1&#125;  render*/</span></code></pre><p>在React18版本</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom/client'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">num1</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token literal-property property">num2</span><span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>num1<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">num1</span><span class="token operator">:</span> num1<span class="token operator">+</span><span class="token number">1</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>num2<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">num2</span><span class="token operator">:</span> num2<span class="token operator">+</span><span class="token number">1</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'render'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token literal-property property">num1</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>num1<span class="token punctuation">&#125;</span><span class="token operator">-</span>num2<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>num2<span class="token punctuation">&#125;</span>        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">></span>Next<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*  上述代码点击的时候会输出一下内容：  &#123;num1: 1, num2: 1&#125;  render*/</span></code></pre><p>如果想要在React18中按照React18版本之前的输出需要使用flushSync来进行修改</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> flushSync <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom/client'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">num1</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token literal-property property">num2</span><span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>      <span class="token function">flushSync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>num1<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          <span class="token literal-property property">num1</span><span class="token operator">:</span> num1<span class="token operator">+</span><span class="token number">1</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>num2<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">num2</span><span class="token operator">:</span> num2<span class="token operator">+</span><span class="token number">1</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'render'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token literal-property property">num1</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>num1<span class="token punctuation">&#125;</span><span class="token operator">-</span>num2<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>num2<span class="token punctuation">&#125;</span>        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">></span>Next<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*  上述代码点击的时候会输出一下内容：  &#123;num1: 1, num2: 1&#125;  render*/</span></code></pre><h3 id="useState是同步还是异步">useState是同步还是异步</h3><p>先上结论：</p><ol><li class="lvl-3"><p>在React18版本之前，useState在React合成事件和hooks中是异步的，其他情况都是同步的，例如，原生事件、setTimeout、promise等</p></li><li class="lvl-3"><p>在React18版本，useState在React中都是异步的</p></li></ol><h4 id="React18版本之前的this-setState">React18版本之前的this.setState</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ReactDOM <span class="token keyword">from</span> <span class="token string">"react-dom"</span><span class="token punctuation">;</span><span class="token keyword">import</span> React<span class="token punctuation">,</span><span class="token punctuation">&#123;</span>useState<span class="token punctuation">,</span>useEffect<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">&#125;</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Count<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> rootElement<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上述代码输出<code>0 0 2 3</code>，我们来分析一下为什么这样输出。</p><ol><li class="lvl-3"><p>首先进入<code>componentDidMount</code>，因为this.setState是异步执行的，所以先执行同步代码，执行两次<code>console.log(this.state.count);</code>，输出两次0</p></li><li class="lvl-3"><p>在<code>componentDidMount</code>中，this.setState导致的更新会进行合并，批量更新，只会更新最后一个，所以当还没执行<code>setTimeout</code>之前，更新<code>count</code>，这时的<code>count</code>变成了1</p></li><li class="lvl-3"><p>进入<code>setTimeout</code>执行，在<code>setTimeout</code>中，this.setState是同步执行的，并且没有批量更新</p></li><li class="lvl-3"><p>执行<code>this.setState(&#123;count: this.state.count + 1&#125;)</code>，这时<code>count</code>同步更新为2，执行<code>console.log(this.state.count);</code>输出2</p></li><li class="lvl-3"><p>执行<code>this.setState(&#123;count: this.state.count + 1&#125;)</code>，这时<code>count</code>同步更新为3，执行<code>console.log(this.state.count);</code>输出4</p></li></ol><p>所以最终输出<code>0 0 2 3</code>。</p><h4 id="React18版本之前的this-setState怎么在setTimeout实现异步批量更新-unstable-batchedUpdates">React18版本之前的this.setState怎么在setTimeout实现异步批量更新(unstable_batchedUpdates)</h4><p>this.setState怎么在setTimeout实现异步批量更新，React提供了一种解决方案，就是从<code>react-dom</code>中暴露一个API:<code>unstable_batchedUpdates</code>，我们看一下具体的用法。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ReactDOM <span class="token keyword">from</span> <span class="token string">"react-dom"</span><span class="token punctuation">;</span><span class="token keyword">import</span> React<span class="token punctuation">,</span><span class="token punctuation">&#123;</span>useState<span class="token punctuation">,</span>useEffect<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">&#125;</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          ReactDOM<span class="token punctuation">.</span><span class="token function">unstable_batchedUpdates</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Count<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> rootElement<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上述代码输出<code>0 0 1 1</code>，我们来分析一下为什么这样输出。</p><ol><li class="lvl-3"><p>首先进入<code>componentDidMount</code>，因为this.setState是异步执行的，所以先执行同步代码，执行两次<code>console.log(this.state.count);</code>，输出两次0</p></li><li class="lvl-3"><p>在<code>componentDidMount</code>中，this.setState导致的更新会进行合并，批量更新，只会更新最后一个，所以当还没执行<code>setTimeout</code>之前，更新<code>count</code>，这时的<code>count</code>变成了1</p></li><li class="lvl-3"><p>进入<code>setTimeout</code>执行，因为<code>setTimeout</code>中的代码用了<code>unstable_batchedUpdates</code>嵌套，所以也是异步批量更新。</p></li><li class="lvl-3"><p>先执行同步代码，执行两次<code>console.log(this.state.count)</code>，输出两次1。</p></li><li class="lvl-3"><p>执行<code>this.setState(&#123;count: this.state.count + 1&#125;)</code>，此时<code>count</code>更新为2。</p></li><li class="lvl-3"><p>执行<code>this.setState(&#123;count: this.state.count + 1&#125;)</code>，此时<code>count</code>更新为3。</p></li></ol><h4 id="React18的解决方案">React18的解决方案</h4><p>如果在React17版本中，想要在<code>setTimeout</code>中执行异步批量更新，需要在每个<code>setTimeout</code>中都嵌套<code>unstable_batchedUpdates</code>，React18中解决了这个痛点，无论在哪里的更新都是异步批量更新。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom/client'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>flushSync<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">&#125;</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>React18 Count<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上述代码输出<code>0 0 1 1</code>，我们来分析一下为什么这样输出。</p><ol><li class="lvl-3"><p>首先进入<code>componentDidMount</code>，因为this.setState是异步执行的，所以先执行同步代码，执行两次<code>console.log(this.state.count);</code>，输出两次0</p></li><li class="lvl-3"><p>在<code>componentDidMount</code>中，this.setState导致的更新会进行合并，批量更新，只会更新最后一个，所以当还没执行<code>setTimeout</code>之前，更新<code>count</code>，这时的<code>count</code>变成了1</p></li><li class="lvl-3"><p>进入<code>setTimeout</code>执行，在React18中，<code>setTimeout</code>中是异步批量更新。</p></li><li class="lvl-3"><p>先执行同步代码，执行两次<code>console.log(this.state.count)</code>，输出两次1。</p></li><li class="lvl-3"><p>执行<code>this.setState(&#123;count: this.state.count + 1&#125;)</code>，此时<code>count</code>更新为2。</p></li><li class="lvl-3"><p>执行<code>this.setState(&#123;count: this.state.count + 1&#125;)</code>，此时<code>count</code>更新为3。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css&quot;&gt;&lt;scrip</summary>
      
    
    
    
    <category term="框架" scheme="http://gulinga.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="react" scheme="http://gulinga.github.io/categories/%E6%A1%86%E6%9E%B6/react/"/>
    
    
  </entry>
  
  <entry>
    <title>React新旧框架</title>
    <link href="http://gulinga.github.io/2023/03/04/frame/React/React%E6%96%B0%E6%97%A7%E6%A1%86%E6%9E%B6/"/>
    <id>http://gulinga.github.io/2023/03/04/frame/React/React%E6%96%B0%E6%97%A7%E6%A1%86%E6%9E%B6/</id>
    <published>2023-03-03T16:00:00.000Z</published>
    <updated>2023-03-04T11:53:52.126Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="React新旧框架">React新旧框架</h2><h3 id="React快速响应的制约和解决方案">React快速响应的制约和解决方案</h3><p>React的关键就是“快速响应”，那么制约“快速响应”的因素是什么呢？主要有一下两点。</p><ol><li class="lvl-3"><p>当执行大计算量的操作或设备性能不足时，页面掉帧导致卡顿。这就是CPU的瓶颈。</p></li><li class="lvl-3"><p>进行I/O操作后，需要等待数据返回才能继续操作。等待的过程导致不能快速响应。这就是I/O的瓶颈。</p></li></ol><p>CPU瓶颈：在React中，最有可能造成CPU瓶颈的部分是“虚拟DOM相关工作”。解决的方法就是将虚拟DOM的执行过程拆分为一个个独立的宏任务，将每个宏任务的执行时间限制在一定范围内（初始化为5ms），来减少掉帧的可能性。这一技术叫做Time Slice（时间切片）。</p><p>具体包括一下三点：</p><ol><li class="lvl-3"><p>为不同的操作赋予不同的优先级</p></li><li class="lvl-3"><p>优先处理“最高优先级的更新”</p></li><li class="lvl-3"><p>如果正在进行虚拟DOM相关的工作，有“更高优先级的更新”，则会中断当前更新，优先处理高优先级更新。</p></li></ol><p>要实现以上三点需要React底层实现一下三点：</p><ol><li class="lvl-3"><p>用于调度优先级的调度器</p></li><li class="lvl-3"><p>用于调度器的调度算法</p></li><li class="lvl-3"><p>支持可中断的虚拟DOM是新</p></li></ol><p>React旧的架构，在Reconciler中，mount组件会调用mountComponent，update组件会调用updateComponent。这两个方法都会递归的更新子组件。更新流程一旦开始就无法中断。<br>React新的架构，增加了Scheduler（调度器），调度任务的优先级，高优先级任务优先进入Reconciler。Reconciler的更新流程从递归不可中断变成了“可终端的循环过程”。每次循环都会调用shouldYield判断当前Time Slice是否有剩余时间。没有时间就暂停更新流程，将主线程交给优先级更高的任务，这就是Time Slice（时间切片）的实现原理。</p><p>I/O瓶颈：更新流程变成“异步、可中断”并不能完全突破“I/O瓶颈”，解决问题的关键在于“使多个更新的工作流程并发执行”。所以React继续迭代为“并发模式”。</p><p>旧框架对应同步时期，新框架对应异步模式、并发模式、并发特征。</p><h3 id="React从旧框架更新到新框架的过程-渐进升级">React从旧框架更新到新框架的过程-渐进升级</h3><p>为了使React从旧版本平滑过渡到新版本，React团队采用了“渐进升级”方案。v16.3新增了StrictMode针对开发者编写的“不符合并发更新规范的代码”给提示出来。为了使不同模式的应用可能在同一个页面内工作，将大多数事件统一冒泡到HTML元素调正为冒泡到所在的根元素。</p><h3 id="Fiber框架">Fiber框架</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css&quot;&gt;&lt;scrip</summary>
      
    
    
    
    <category term="框架" scheme="http://gulinga.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="react" scheme="http://gulinga.github.io/categories/%E6%A1%86%E6%9E%B6/react/"/>
    
    
  </entry>
  
  <entry>
    <title>JSX是什么，React为什么使用JSX，babel怎么转译JSX的</title>
    <link href="http://gulinga.github.io/2023/02/27/frame/React/JSX%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%8CReact%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8JSX%EF%BC%8Cbabel%E6%80%8E%E4%B9%88%E8%BD%AC%E8%AF%91JSX%E7%9A%84/"/>
    <id>http://gulinga.github.io/2023/02/27/frame/React/JSX%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%8CReact%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8JSX%EF%BC%8Cbabel%E6%80%8E%E4%B9%88%E8%BD%AC%E8%AF%91JSX%E7%9A%84/</id>
    <published>2023-02-26T16:00:00.000Z</published>
    <updated>2023-02-27T14:02:26.410Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="JSX是什么，React为什么使用JSX，babel怎么转译JSX的">JSX是什么，React为什么使用JSX，babel怎么转译JSX的</h2><p>在前端的框架中有两种“描述UI”的方案，一种是JSX语法，一种是模板语言。</p><p>其中React就是选择的JSX，Vue就是选择的模板语言。</p><p>JSX其实就是一个语法糖，在编写React代码的时候你可以不使用JSX来进行编写。在React中，你写的JSX代码最终都会被babel编译。</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// JSX语法</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Hello,World!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// babel编译后</span><span class="token keyword">var</span> element <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"h1"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"Hello,world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//React17版本之前</span><span class="token comment">// React17版本之后</span><span class="token keyword">var</span> _jsxRuntime <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"react/jsx-runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> element <span class="token operator">=</span> _jsxRuntime<span class="token punctuation">.</span><span class="token function">jsx</span><span class="token punctuation">(</span><span class="token string">"h1"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">children</span><span class="token operator">:</span><span class="token string">"Hello World!"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>JSX由babel转换成React.createElement或_jsxRuntime.jsx的形式，函数执行后返回虚拟DOM，所以说你可以不使用JSX，可以直接写React.createElement或_jsxRuntime.jsx的形式。所以我们写的代码最终都会被构建成虚拟DOM树。JSX就是一种类XML语法的语法糖，让开发者来构建这个虚拟DOM树更加的方便，使代码更加的简洁。</p><p>那么babel是怎么样将JSX语法转换成React.createElement或_jsxRuntime.jsx的形式的呢？</p><p>babel编译JSX的流程分为三个部分：</p><ol><li class="lvl-3"><p>parse：通过parse将JSX代码转换成AST。</p></li><li class="lvl-3"><p>transform：在transform阶段使用<code>@babel/plugin-transform-react-jsx</code>插件，它的核心就是visitor函数，通过这个函数来遍历AST，根据不同的节点类型来做不同的处理，生成了JSX对应的createElement对应的AST。</p></li><li class="lvl-3"><p>generate：最后由generate将AST转换为JS。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css&quot;&gt;&lt;scrip</summary>
      
    
    
    
    <category term="框架" scheme="http://gulinga.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="react" scheme="http://gulinga.github.io/categories/%E6%A1%86%E6%9E%B6/react/"/>
    
    
  </entry>
  
  <entry>
    <title>十二月最后一段时间的规划</title>
    <link href="http://gulinga.github.io/2022/12/18/live/%E5%8D%81%E4%BA%8C%E6%9C%88%E6%9C%80%E5%90%8E%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E8%A7%84%E5%88%92/"/>
    <id>http://gulinga.github.io/2022/12/18/live/%E5%8D%81%E4%BA%8C%E6%9C%88%E6%9C%80%E5%90%8E%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E8%A7%84%E5%88%92/</id>
    <published>2022-12-17T16:00:00.000Z</published>
    <updated>2022-12-18T11:12:21.499Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="十二月最后一段时间的规划">十二月最后一段时间的规划</h2><h3 id="关于项目">关于项目</h3><p>我的那个<code>penfriend-diary</code>已经完成了本地markdown，日记，聊天的功能了。我要规划一下接下来怎么完善项目。</p><ul class="lvl-0"><li class="lvl-2"><p>完善项目样式和一些小细节。</p></li><li class="lvl-2"><p>增加云文档的功能。保留本地文档功能。</p></li><li class="lvl-2"><p>总结一下整个项目的功能和难点，等面试的时候说。</p></li><li class="lvl-2"><p>自己尝试使用webpack和babel优化自己的项目。</p></li><li class="lvl-2"><p>以前写的代码好多可以使用memo、useMemo、useCallback优化的地方都没有优化，以后要注意了。</p></li><li class="lvl-2"><p>尝试使用前端可视化来优化项目。</p></li><li class="lvl-2"><p>聊天小游戏。</p></li><li class="lvl-2"><p>了解react 3D。</p></li></ul><h3 id="算法">算法</h3><p>我最近算法没有怎么练，就今天leetcode周赛写了一下，这一周的有点难，我就写出来两题还能排1300多名，主要是这次思路挺不错，做的比较快。</p><p>以后我要开始写算法了，每天写个四到五题，emmm，是有点多，但是20多天前我开了一个leetcode的学习计划，20多天的题都没写了，只能每天写四到五题了，还好吧，好多题都是写过类似的。</p><p>这次算法不仅要写好，也要锻炼好算法思维和特殊情况思维。</p><h3 id="前端复习">前端复习</h3><p>我树立了一下我的知识体系，有的好多都是知道但是说不明白，所以我感觉还是要背背，但是我又怕忘记，真实瞻前顾后的，不管了，背吧，要不等以后面试的时候啥都说不出来。</p><p>但是背东西是真的枯燥，一天真的不能背的太多，所以现在要做的就是每天背一点，然后主要抓住项目，使用新的东西来优化项目。</p><h3 id="了解前端发展">了解前端发展</h3><p>要多多了解前端目前的发展形式。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css&quot;&gt;&lt;scrip</summary>
      
    
    
    
    <category term="live" scheme="http://gulinga.github.io/categories/live/"/>
    
    
  </entry>
  
  <entry>
    <title>坎坎坷坷的一周</title>
    <link href="http://gulinga.github.io/2022/12/10/develop/%E5%9D%8E%E5%9D%8E%E5%9D%B7%E5%9D%B7%E7%9A%84%E4%B8%80%E5%91%A8/"/>
    <id>http://gulinga.github.io/2022/12/10/develop/%E5%9D%8E%E5%9D%8E%E5%9D%B7%E5%9D%B7%E7%9A%84%E4%B8%80%E5%91%A8/</id>
    <published>2022-12-09T16:00:00.000Z</published>
    <updated>2022-12-18T10:40:08.146Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="坎坎坷坷的一周">坎坎坷坷的一周</h2><h3 id="本地mysql80报错">本地mysql80报错</h3><p>一天早上我常规的启动node服务，结果就报错了，我弄了半天发现mysql服务开不开了，数据库连接不上，在网上找了好长时间都没结果，最后我吧mysql删除了重新安装。本以为以前的mysql查询语句和表都没了，结果查询语句还在，还好，本来表中的数据就没多少。</p><h3 id="mysql-node-js部署">mysql+node.js部署</h3><p>我弄了好长时间的linux服务器安装mysql，找了好几篇文章，跟着做都报错，然后就没弄了放了一放，今天下午就想着再弄一弄，不经意间看到了一篇文章，结果竟然弄好了，然后在vscode上安装了一下SSH TABGETS插件，使用pm2把linux服务器上的node.js运行了一下，本来我还以为要使用pkg打包一下呢，我都给打包好了，结果发现了pm2好像更好用一点就用来pm2，然后成功了。</p><h3 id="项目">项目</h3><p>我的项目的聊天模块基本成型了，今天将后端接口部署了一下，前端也打包成功了，对了今天还是我前端仓库提交量超过100的一天。</p><h3 id="聊天">聊天</h3><p>我这里说一下我的聊天功能的基本实现流程，通过@reduxjs/toolkit库中的createAsyncThunk处理异步请求，来储存笔友列表，当点击不同的笔友的时候判断是否已经请求过聊天记录，如果没有则通过createAsyncThunk来处理聊天记录的异步请求，发送消息的时候先请求发送信息的接口，如果成功则通过socket.io想服务器发送消息，然后另一个好友通过socket.io接收消息，发送过socket.io后想redux的state中添加消息。</p><h3 id="论文">论文</h3><p>好烦呀，我的论文还没写完，明天写吧，下周就要交了。</p><h3 id="专业课">专业课</h3><p>快要考试了，我专业课是一点不会，靠别人了，我兄弟说了，只要他有答案都会给我的。</p><h3 id="guithub的pages服务">guithub的pages服务</h3><p>不知道为什么，最近github的pages服务的静态页面都打不开了，我用了fastgithub才打开了，希望哪位大佬可以给我解惑一下，我实在弄不明白为什么，我ping了一下，ping的地址也没问题。但是就是显示**“页面可能存在问题，或者已永久移动到新的网址。”**</p><h3 id="复习">复习</h3><p>本来我的知识体系都总结好了，说是要背的，但是总是懒得背，明天就让我哥监督我来背。</p><h3 id="作息">作息</h3><p>最近总是起不来，闹钟响了就被我关了，起不到叫醒我的作用，还好，有我姐叫我起床。</p><h3 id="看书">看书</h3><p>我本来想买卢思浩的书来着，但是不知道为啥，我还没买，就忽然多了一本他的书《你也走了很远的路吧》，明天就开始看，哈哈。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css&quot;&gt;&lt;scrip</summary>
      
    
    
    
    <category term="开发" scheme="http://gulinga.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="开发笔记" scheme="http://gulinga.github.io/tags/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    <category term="云文档" scheme="http://gulinga.github.io/tags/%E4%BA%91%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>后端接口开发及其生活总结</title>
    <link href="http://gulinga.github.io/2022/12/03/develop/%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%E5%8F%8A%E5%85%B6%E7%94%9F%E6%B4%BB%E6%80%BB%E7%BB%93/"/>
    <id>http://gulinga.github.io/2022/12/03/develop/%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%E5%8F%8A%E5%85%B6%E7%94%9F%E6%B4%BB%E6%80%BB%E7%BB%93/</id>
    <published>2022-12-02T16:00:00.000Z</published>
    <updated>2022-12-03T15:16:00.189Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="后端接口开发及其生活总结">后端接口开发及其生活总结</h2><h3 id="开发">开发</h3><p>前一段时间开始学习了一下mysql，感觉还好，简单一点的mysql语句还是能写出来的。登录、注册、日记、好友接口都写好了，然后最近也吧样式美化了一下，然后打了一下包，测试了一下，发现在electorn中好像不能使用BrowserRouter，这会导致打包后路由失效。我测试的时候一直不知道axios的url应该设置成什么，最后发现好像直接访问接口的地址就行，不需要代理（开发环境需要代理），也不知道为什么，现在还没有把接口部署，只是前端打包后，接口还是用的本地。不知道部署到服务器上后会不会有问题。目前还不知道怎么部署。</p><h3 id="github-io"><a href="http://github.io">github.io</a></h3><p>最近不知道什么原因，github.io都进不去了，起初我以为我电脑有问题，尝试了各种方法还是不行，问了问别人，结果好像都打不开，最后我去github上找了一下fasegithub，暂时能访问github.io了。</p><h3 id="git-lfs">git lfs</h3><p>今天我准备弄一下官网，然后上传压缩文件到github的时候一直上传不上去，我就打算不用命令上传了，直接在github上选择文件上传，结果显示<code>Yowza, that’s a big file. Try again with a file smaller than 25MB.</code>，然后我看了一下我的压缩文件153MB，我去网上求助，发现了git lfs这个东西。就记录一下git lfs的用法。</p><ol><li class="lvl-3"><p>安装git lfs</p></li></ol><pre class="language-none"><code class="language-none">git lfs install</code></pre><ol start="2"><li class="lvl-3"><p>追踪文件</p></li></ol><pre class="language-none"><code class="language-none">git lfs track &quot;文件名 或 *.后缀名&quot;</code></pre><p>这时候会生成一个<code>.gitattributes</code>配置文件你可以通过<code> git lfs ls-files</code>来查看追踪的文件通过<code> git lfs untrack &quot;文件名 或 *.后缀名&quot;</code>来取消追踪<br>3. push .gitattributes文件按照正常的方法将<code>.gitattributes</code>文件push到仓库<br>4. push 大文件最后将打文件按照正常的方法push上去</p><p>然后就完成了大文件的push。如果clone大量lfs文件的仓库，可以使用<code>git lfs clone 地址</code>来进行clone，可以提高性能。</p><h3 id="官网发布">官网发布</h3><p>最后我还是发布了<code>PENFRIEND-DIARY</code>官网，并把第一版放了上去，因为还没有部署接口，所以肯定使没法运行的。<a href="https://gulinga.github.io/penfriend-diary/">官网地址</a></p><h3 id="知识体系">知识体系</h3><p>前一段时间，差不多一个月，把前端的面试题看了一篇，但是再去看就又忘记了。我已经开始梳理知识体系了，等把所有的东西差不多整理一下就开始背，背的熟练一点，面试的时候也能更流畅一点。</p><h3 id="组员">组员</h3><p>我留个组员，全是计科的，咱也不是对计科的有偏见，就是全是计科的多少优有点离谱。</p><h3 id="回家">回家</h3><p>我准备明天回家的，早上给辅导员报备了，晚上还打了电话问了问，说是学校又有异常的了，明天早上看看，如果没有问题就给我通过。</p><h3 id="力扣">力扣</h3><p>我的力扣估计还差四题就到10%，刷的不多，可能有好多题再写也不一定会。确定了，自己很菜。明天力扣周赛，加油。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css&quot;&gt;&lt;scrip</summary>
      
    
    
    
    <category term="开发" scheme="http://gulinga.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    <category term="live" scheme="http://gulinga.github.io/categories/%E5%BC%80%E5%8F%91/live/"/>
    
    
    <category term="开发笔记" scheme="http://gulinga.github.io/tags/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    <category term="云文档" scheme="http://gulinga.github.io/tags/%E4%BA%91%E6%96%87%E6%A1%A3/"/>
    
    <category term="live" scheme="http://gulinga.github.io/tags/live/"/>
    
  </entry>
  
  <entry>
    <title>十一月月底总结</title>
    <link href="http://gulinga.github.io/2022/11/27/live/%E5%8D%81%E4%B8%80%E6%9C%88%E6%9C%88%E5%BA%95%E6%80%BB%E7%BB%93/"/>
    <id>http://gulinga.github.io/2022/11/27/live/%E5%8D%81%E4%B8%80%E6%9C%88%E6%9C%88%E5%BA%95%E6%80%BB%E7%BB%93/</id>
    <published>2022-11-26T16:00:00.000Z</published>
    <updated>2022-11-28T09:12:10.749Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="十一月月底总结">十一月月底总结</h2><h3 id="突如其来的假期">突如其来的假期</h3><p>前几天，一直有小道消息说要放假了，周边的好几个学校都走了好几个了。然后我学校也通知了，前期学校说的是四六级只有一次机会，想考试的只能留校，所以，导致了很多人都想着留校考完四六级再走，可以看出来学校还是想让学生留校的。现在反转了，好多人走不了，学校一直催着走，说现在疫情很严重，可能晚点走就走不了了，不能回家过年。我就在学校待着吧，等啥时候学校真的催我走了我再走。</p><h3 id="生活">生活</h3><p>这一月的生活方面嘛，也没啥特别的。在月中的时候小组举行了一次算法比赛，只拿了第七名。然后中午的时候还是时不时打打球，我感觉我的球技真的有进步。本来计划的是把精选一百到算法刷完的，但是就刷了80道，后面的实在写不动了。就想着开始复习一下，开了个二分查找，前几天写完了拿到了个勋章，感觉自己对二分查找又理解的更深刻了些。哦哦，对了，今天力扣周赛，我写第三题的时候发现了一个问题，在js中如果我用数组的shift方法的时间复杂度是O(n)，而用pop的方法的时间复杂度是O(1)，所以，还是少用队列，多用栈，今天我用队列就超时了，用栈没有超时。小组招新已经悄悄的进行了一段时间了，招进来十个人左右吧，这几天学生会招新完了才让小组宣传，本来五十多人的群一会就超过了一百人。我应该是第一批面试的，我当时面试的一个学妹，挺不错的，自己在私底下学的挺多，有很强的求知欲。学习态度很好。最后也是分给了我组。看了看计网和浏览器基础，感觉挺好玩的。</p><h3 id="开发">开发</h3><p>我的项目开发遇到了点问题，因为我要自己写接口，于是我这一周去学习了一下node.js+MySQL，学了一下SQL命令，学的不算多，但是应该能写一些简单的接口。等我学完就去写接口，然后继续开发项目。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css&quot;&gt;&lt;scrip</summary>
      
    
    
    
    <category term="live" scheme="http://gulinga.github.io/categories/live/"/>
    
    
    <category term="总结" scheme="http://gulinga.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>GET和POST请求的区别</title>
    <link href="http://gulinga.github.io/2022/11/24/interview/%E7%BD%91%E7%BB%9C/GET%E5%92%8CPOST%E8%AF%B7%E6%B1%82%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://gulinga.github.io/2022/11/24/interview/%E7%BD%91%E7%BB%9C/GET%E5%92%8CPOST%E8%AF%B7%E6%B1%82%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-11-23T16:00:00.000Z</published>
    <updated>2022-11-24T07:58:17.851Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="GET和POST请求的区别">GET和POST请求的区别</h2><ol><li class="lvl-3"><p>应用场景<br>GET请求是请求服务器的数据，而POST一般是修改服务器的资源</p></li><li class="lvl-3"><p>是否缓存浏览器会对GET请求进行缓存，但是很少对POST请求缓存</p></li><li class="lvl-3"><p>发送的报文<br>GET请求的请求体是空的，POST请求的请求体是传递的一些参数</p></li><li class="lvl-3"><p>安全性<br>GET请求的参数是拼接到url后面的，但是POST的是在请求体中，请求的URL会保存到历史记录中，如果POST也在url后面拼接参数，会导致不安全</p></li><li class="lvl-3"><p>请求长度<br>GET请求被不同的浏览器限制了长度</p></li><li class="lvl-3"><p>参数类型<br>POST请求支持更多的参数类型</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css&quot;&gt;&lt;scrip</summary>
      
    
    
    
    <category term="面试准备" scheme="http://gulinga.github.io/categories/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
    
    <category term="网络" scheme="http://gulinga.github.io/categories/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="网络" scheme="http://gulinga.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="GET" scheme="http://gulinga.github.io/tags/GET/"/>
    
    <category term="POST" scheme="http://gulinga.github.io/tags/POST/"/>
    
  </entry>
  
  <entry>
    <title>GET方法URL长度限制的原因</title>
    <link href="http://gulinga.github.io/2022/11/24/interview/%E7%BD%91%E7%BB%9C/GET%E6%96%B9%E6%B3%95URL%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6%E7%9A%84%E5%8E%9F%E5%9B%A0/"/>
    <id>http://gulinga.github.io/2022/11/24/interview/%E7%BD%91%E7%BB%9C/GET%E6%96%B9%E6%B3%95URL%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6%E7%9A%84%E5%8E%9F%E5%9B%A0/</id>
    <published>2022-11-23T16:00:00.000Z</published>
    <updated>2022-11-24T07:49:22.580Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="GET方法URL长度限制的原因">GET方法URL长度限制的原因</h2><p>HTTP对GET方法的URL长度没有限制，只是不同浏览器对GET有不同字节的限制。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css&quot;&gt;&lt;scrip</summary>
      
    
    
    
    <category term="面试准备" scheme="http://gulinga.github.io/categories/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
    
    <category term="网络" scheme="http://gulinga.github.io/categories/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="网络" scheme="http://gulinga.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="HTTP" scheme="http://gulinga.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>HTTP1.0与HTTP1.1的区别</title>
    <link href="http://gulinga.github.io/2022/11/24/interview/%E7%BD%91%E7%BB%9C/HTTP1.0%E4%B8%8EHTTP1.1%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://gulinga.github.io/2022/11/24/interview/%E7%BD%91%E7%BB%9C/HTTP1.0%E4%B8%8EHTTP1.1%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-11-23T16:00:00.000Z</published>
    <updated>2022-11-24T01:50:38.995Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="HTTP1-0与HTTP1-1的区别">HTTP1.0与HTTP1.1的区别</h2><ol><li class="lvl-3"><p>连接方面<br>http1.0采用的是非持续性连接，http1.1中采用的是持续性连接，这就使得不同的http请求可以复用同一个tcp连接，避免了非持续性连接每次都需要连接的延时。</p></li><li class="lvl-3"><p>缓存方面在http1.0中是使用的expires和if-Modified-Since来进行缓存的判读，但是expires判读的是服务器上的时间，如果客户端和服务器上的时间不一致，就会导致缓存没有命中的情况。在http1.1中增加了Etag和if-None-Match等来进行缓存的判断。</p></li><li class="lvl-3"><p>资源请求方面在http1.0中，客户端请求一个资源的一部分，服务器会将整个资源都返回，这就造成了宽带的浪费。而在http1.1中，在头部增加了range头域，使得可以请求一个资源的一部分。</p></li><li class="lvl-3"><p>HOST<br>在http1.0中，一个服务器就对应一个固定的ip地址，所以是没有域名解析这个东西的。在http1.1中增加了host，用来自定服务器的域名。</p></li><li class="lvl-3"><p>请求方法在http1.1中增加了一些请求方法，例如：PUST,HEAD,OPTIONS等。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css&quot;&gt;&lt;scrip</summary>
      
    
    
    
    <category term="面试准备" scheme="http://gulinga.github.io/categories/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
    
    <category term="网络" scheme="http://gulinga.github.io/categories/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="网络" scheme="http://gulinga.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="HTTP" scheme="http://gulinga.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>HTTP1.1和HTTP2的区别</title>
    <link href="http://gulinga.github.io/2022/11/24/interview/%E7%BD%91%E7%BB%9C/HTTP1.1%E5%92%8CHTTP2%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://gulinga.github.io/2022/11/24/interview/%E7%BD%91%E7%BB%9C/HTTP1.1%E5%92%8CHTTP2%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-11-23T16:00:00.000Z</published>
    <updated>2022-11-24T05:40:31.372Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="HTTP1-1和HTTP2的区别">HTTP1.1和HTTP2的区别</h2><ol><li class="lvl-3"><p>二进制协议在http1.1中，头部信息是文本，数据可以是文本也可以是二进制，而http2中都必须是二进制，这个概念称为&quot;帧&quot;，分为头部信息帧和数据帧，帧也是http2中多路复用的基础。</p></li><li class="lvl-3"><p>多路复用在http2中，同样复用了tcp连接，但是http2中可以同时接收和发送多个请求和响应，不用按照顺序一一发送。对头阻塞：在http1.1中，报文是一发一收的，在http1.1中没有优先级，只有入队的先后顺序，先入队的先执行，如果对首的请求处理的时间过长，后面的请求需要等待对首的执行完毕才能继续执行，这就是对头阻塞。</p></li><li class="lvl-3"><p>数据流在http2中引入了数据流的概念，并不是按顺序发送的，所以每个数据流都有一个独一无二的编号，用来区分是哪个数据流。</p></li><li class="lvl-3"><p>头部信息压缩在http1.1每次都要附带上所有的信息发送请求，例如cookien，这就使得附带的信息可能有重复的，所以，在http2中会使用gzip或compress进行头部信息的压缩，而且服务器和客户端会共同维护一个头部信息表，所有的字段存入这个表中，生成一个索引值，当下次携带相同的信息的时候只携带索引值。</p></li><li class="lvl-3"><p>服务器推送在http2中，服务器在没有收到请求的情况下，主动向客户端推送资源，减少一些延迟时间，推送的资源只能是静态资源。websocket向服务端请求的及时数据是不推送的。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css&quot;&gt;&lt;scrip</summary>
      
    
    
    
    <category term="面试准备" scheme="http://gulinga.github.io/categories/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
    
    <category term="网络" scheme="http://gulinga.github.io/categories/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="网络" scheme="http://gulinga.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="HTTP" scheme="http://gulinga.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>HTTP和HTTPS的区别</title>
    <link href="http://gulinga.github.io/2022/11/24/interview/%E7%BD%91%E7%BB%9C/HTTP%E5%92%8CHTTPS%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://gulinga.github.io/2022/11/24/interview/%E7%BD%91%E7%BB%9C/HTTP%E5%92%8CHTTPS%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-11-23T16:00:00.000Z</published>
    <updated>2022-11-24T02:31:38.928Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="HTTP和HTTPS的区别">HTTP和HTTPS的区别</h2><ol><li class="lvl-3">HTTPS需要CA证书，费用较高，而HTTP不需要</li><li class="lvl-3">HTTP是超文本传输协议，是明文传输，而HTTPS是具有安全性的SSL加密的传输协议</li><li class="lvl-3">HTTP的端口号是80，HTTPS的端口号是443</li><li class="lvl-3">HTTP协议较简单，是无状态的，HTTPS是通过SSL和HTTP构建的可加密传输和身份认证的网络协议，比较安全</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css&quot;&gt;&lt;scrip</summary>
      
    
    
    
    <category term="面试准备" scheme="http://gulinga.github.io/categories/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
    
    <category term="网络" scheme="http://gulinga.github.io/categories/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="网络" scheme="http://gulinga.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="HTTP" scheme="http://gulinga.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>HTTP状态码304是多好还是少好</title>
    <link href="http://gulinga.github.io/2022/11/24/interview/%E7%BD%91%E7%BB%9C/HTTP%E7%8A%B6%E6%80%81%E7%A0%81304%E6%98%AF%E5%A4%9A%E5%A5%BD%E8%BF%98%E6%98%AF%E5%B0%91%E5%A5%BD/"/>
    <id>http://gulinga.github.io/2022/11/24/interview/%E7%BD%91%E7%BB%9C/HTTP%E7%8A%B6%E6%80%81%E7%A0%81304%E6%98%AF%E5%A4%9A%E5%A5%BD%E8%BF%98%E6%98%AF%E5%B0%91%E5%A5%BD/</id>
    <published>2022-11-23T16:00:00.000Z</published>
    <updated>2022-11-24T03:03:22.248Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="HTTP状态码304是多好还是少好">HTTP状态码304是多好还是少好</h2><p>304状态码是浏览器的缓存机制，当没有命中强缓存的时候就会进行协商缓存，如果命中了协商缓存就返回304，直接使用缓存资源，不用再次下载资源，所以304状态码不是错误，而是浏览器的缓存机制所造成的。</p><p>但是304状态码如果较多，搜索引擎会减少对其的抓取次数，网站的访问量可能就会减少，网站的权重下降。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css&quot;&gt;&lt;scrip</summary>
      
    
    
    
    <category term="面试准备" scheme="http://gulinga.github.io/categories/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
    
    <category term="网络" scheme="http://gulinga.github.io/categories/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="网络" scheme="http://gulinga.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="HTTP" scheme="http://gulinga.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>OPTIONS请求方法的使用场景</title>
    <link href="http://gulinga.github.io/2022/11/24/interview/%E7%BD%91%E7%BB%9C/OPTIONS%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <id>http://gulinga.github.io/2022/11/24/interview/%E7%BD%91%E7%BB%9C/OPTIONS%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</id>
    <published>2022-11-23T16:00:00.000Z</published>
    <updated>2022-11-24T03:09:19.743Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="OPTIONS请求方法的使用场景">OPTIONS请求方法的使用场景</h2><ol><li class="lvl-3">查询服务器支持的HTTP请求方法</li><li class="lvl-3">查询访问权限，在进行CROS跨域的时候，就是使用OPTIONS来判断是否对资源有访问权限</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css&quot;&gt;&lt;scrip</summary>
      
    
    
    
    <category term="面试准备" scheme="http://gulinga.github.io/categories/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
    
    <category term="网络" scheme="http://gulinga.github.io/categories/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="网络" scheme="http://gulinga.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="HTTP" scheme="http://gulinga.github.io/tags/HTTP/"/>
    
    <category term="OPTIONS" scheme="http://gulinga.github.io/tags/OPTIONS/"/>
    
  </entry>
  
  <entry>
    <title>HTTP的优点与缺点</title>
    <link href="http://gulinga.github.io/2022/11/24/interview/%E7%BD%91%E7%BB%9C/HTTP%E7%9A%84%E4%BC%98%E7%82%B9%E4%B8%8E%E7%BC%BA%E7%82%B9/"/>
    <id>http://gulinga.github.io/2022/11/24/interview/%E7%BD%91%E7%BB%9C/HTTP%E7%9A%84%E4%BC%98%E7%82%B9%E4%B8%8E%E7%BC%BA%E7%82%B9/</id>
    <published>2022-11-23T16:00:00.000Z</published>
    <updated>2022-11-24T07:46:48.471Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="HTTP的优点与缺点">HTTP的优点与缺点</h2><p>优点</p><ol><li class="lvl-3"><p>简单快速，因为HTTP在请求的时候只需要发送方法和路径，而且HTTP协议简单，所以简单快速</p></li><li class="lvl-3"><p>无连接，由于HTTP无连接，每次只能处理一个请求，当服务器收到客户端的应道后立即断开连接，节省了传输时间</p></li><li class="lvl-3"><p>无状态，由于HTTP连接无状态，所以如果需要前面的数据的时候，只能重传，但是如果不需要前面的数据，就比较快速了</p></li></ol><p>缺点</p><ol><li class="lvl-3"><p>无状态，HTTP是一个无状态的协议，不会保存用户的任何信息</p></li><li class="lvl-3"><p>明文传输，协议中的报文使用的纯文本的方式传输</p></li><li class="lvl-3"><p>不安全，文明传输不加密，不会进行身份验证，不验证报文的完整性</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css&quot;&gt;&lt;scrip</summary>
      
    
    
    
    <category term="面试准备" scheme="http://gulinga.github.io/categories/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
    
    <category term="网络" scheme="http://gulinga.github.io/categories/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="网络" scheme="http://gulinga.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="HTTP" scheme="http://gulinga.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>URL有哪些组成部分</title>
    <link href="http://gulinga.github.io/2022/11/24/interview/%E7%BD%91%E7%BB%9C/URL%E6%9C%89%E5%93%AA%E4%BA%9B%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86/"/>
    <id>http://gulinga.github.io/2022/11/24/interview/%E7%BD%91%E7%BB%9C/URL%E6%9C%89%E5%93%AA%E4%BA%9B%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86/</id>
    <published>2022-11-23T16:00:00.000Z</published>
    <updated>2022-11-24T07:46:39.787Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="URL有哪些组成部分">URL有哪些组成部分</h2><ol><li class="lvl-3">协议</li><li class="lvl-3">主机</li><li class="lvl-3">端口</li><li class="lvl-3">虚拟目录</li><li class="lvl-3">文件名</li><li class="lvl-3">参数</li><li class="lvl-3">锚点</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css&quot;&gt;&lt;scrip</summary>
      
    
    
    
    <category term="面试准备" scheme="http://gulinga.github.io/categories/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
    
    <category term="网络" scheme="http://gulinga.github.io/categories/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="网络" scheme="http://gulinga.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="URL" scheme="http://gulinga.github.io/tags/URL/"/>
    
  </entry>
  
  <entry>
    <title>常见的HTTP请求方法</title>
    <link href="http://gulinga.github.io/2022/11/24/interview/%E7%BD%91%E7%BB%9C/%E5%B8%B8%E8%A7%81%E7%9A%84HTTP%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95/"/>
    <id>http://gulinga.github.io/2022/11/24/interview/%E7%BD%91%E7%BB%9C/%E5%B8%B8%E8%A7%81%E7%9A%84HTTP%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95/</id>
    <published>2022-11-23T16:00:00.000Z</published>
    <updated>2022-11-24T01:30:32.700Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="常见的HTTP请求方法">常见的HTTP请求方法</h2><ol><li class="lvl-3">Get：向服务器请求资源</li><li class="lvl-3">POST：向服务器提交资源，一般会修改服务器上的数据</li><li class="lvl-3">PUT：上传文件，更新信息</li><li class="lvl-3">DELETE：删除服务器上的数据</li><li class="lvl-3">OPTIONS：查询支持的请求方法，用来跨域请求</li><li class="lvl-3">CONNECT：和代理服务器通信时建立通道，在通道上进行TCP通信</li><li class="lvl-3">REACT：回显服务器收到的请求，用来诊断错误</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css&quot;&gt;&lt;scrip</summary>
      
    
    
    
    <category term="面试准备" scheme="http://gulinga.github.io/categories/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
    
    <category term="网络" scheme="http://gulinga.github.io/categories/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="网络" scheme="http://gulinga.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="HTTP" scheme="http://gulinga.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>同源策略限制了什么?</title>
    <link href="http://gulinga.github.io/2022/11/23/interview/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9F%BA%E7%A1%80/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E9%99%90%E5%88%B6%E4%BA%86%E4%BB%80%E4%B9%88/"/>
    <id>http://gulinga.github.io/2022/11/23/interview/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9F%BA%E7%A1%80/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E9%99%90%E5%88%B6%E4%BA%86%E4%BB%80%E4%B9%88/</id>
    <published>2022-11-22T16:00:00.000Z</published>
    <updated>2022-11-23T14:33:40.332Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="同源策略限制了什么">同源策略限制了什么?</h2><p>同源策略就是，必须<code>协议</code>、<code>主机</code>、<code>端口</code>都相同才是同源的。</p><p>同源策略限制了以下三点。</p><ol><li class="lvl-3"><p>不同源的网站不能相互的访问和操作DOM。</p></li><li class="lvl-3"><p>不同源的网站中的sessionStorage、localStorage、Cookie、indexDB不互相连通。</p></li><li class="lvl-3"><p>不同源的网站不能使用XMLHTTPRequest来进行数据的请求。</p></li></ol><p>对于<code>script</code>、<code>link</code>、<code>img</code>标签来说，他们是没有跨域限制的。所以这也就使得出现了浏览器安全的问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css&quot;&gt;&lt;scrip</summary>
      
    
    
    
    <category term="面试准备" scheme="http://gulinga.github.io/categories/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
    
    <category term="浏览器基础" scheme="http://gulinga.github.io/categories/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="同源策略" scheme="http://gulinga.github.io/tags/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5/"/>
    
  </entry>
  
  <entry>
    <title>DNS同时使用TCP和UDP协议吗?</title>
    <link href="http://gulinga.github.io/2022/11/23/interview/%E7%BD%91%E7%BB%9C/DNS%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8TCP%E5%92%8CUDP%E5%8D%8F%E8%AE%AE%E5%90%97/"/>
    <id>http://gulinga.github.io/2022/11/23/interview/%E7%BD%91%E7%BB%9C/DNS%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8TCP%E5%92%8CUDP%E5%8D%8F%E8%AE%AE%E5%90%97/</id>
    <published>2022-11-22T16:00:00.000Z</published>
    <updated>2022-11-23T06:23:41.020Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="DNS同时使用TCP和UDP协议吗">DNS同时使用TCP和UDP协议吗?</h2><p>DNS服务器占用的53端口，同时使用TCP和UDP协议。</p><p>在进行区域传输的时候使用DNS协议，在进行域名解析的时候使用UDP协议。</p><ol><li class="lvl-3"><p>使用TCP协议辅域名服务器会定期的向主域名服务器查询数据是否变动，如果变动就是进行一次区域传输，来同步数据，此时的区域传输就是使用的TCP协议。<br>TCP是一种可靠的连接，确保了数据的准确性。</p></li><li class="lvl-3"><p>使用UDP协议客户端向DNS服务端发送查询域名，服务端返回的信息一般不会超过512字节，所以使用UDP协议，UDP协议不需要三次握手，所以服务器压力更小，响应快。理论上客户端也可以指定DNS服务器查询域名的时候使用TCP，但是实际上有的DNS服务器已经配置了仅支持UDP查询。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css&quot;&gt;&lt;scrip</summary>
      
    
    
    
    <category term="面试准备" scheme="http://gulinga.github.io/categories/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
    
    <category term="网络" scheme="http://gulinga.github.io/categories/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="网络" scheme="http://gulinga.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="DNS" scheme="http://gulinga.github.io/tags/DNS/"/>
    
  </entry>
  
</feed>
